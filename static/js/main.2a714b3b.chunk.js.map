{"version":3,"sources":["store/CharacterMetaData/Character.ts","store/CharacterMetaData/reducers.ts","components/DisplayCharacterMetaData/MetadataSelect/MetadataSelect.tsx","store/Abilities/selectors.ts","store/Abilities/reducers.ts","store/Skills/types.ts","store/CombatValues/types.ts","store/AppState/types.ts","store/AppState/reducers.ts","store/Talents/actions.ts","store/Talents/reducers.ts","store/SpecialAbilities/actions.ts","store/SpecialAbilities/reducers.ts","store/Inventory/actions.ts","store/Inventory/reducers.ts","store/root-reducer.ts","store/Skills/reducers.ts","store/CombatValues/reducers.ts","store/CombatValues/initialState.ts","store/index.ts","store/CharacterMetaData/actions.ts","store/CharacterMetaData/types.ts","store/CharacterMetaData/Alignment.ts","components/DisplayCharacterMetaData/DisplayCharacterMetaData.tsx","components/BoxInput/BoxInput.tsx","components/BoxInput/BoxNumberInput.tsx","components/BlackBox/BlackBox.tsx","components/DisplayAbilities/DisplayAbilities.tsx","store/Abilities/actions.ts","store/Abilities/types.ts","store/Skills/actions.ts","components/util/StyledCheckbox/StyledCheckbox.tsx","store/Inventory/getters.ts","store/Skills/selectors.ts","components/InvertedBorderRadius/InvertedBorderRadius.tsx","components/DisplaySkills/DisplaySkills.tsx","store/CombatValues/actions.ts","store/CharacterMetaData/selectors.ts","store/CombatValues/selectors.ts","components/DisplayCombatValues/DisplayCombatValues.tsx","store/AppState/selectors.ts","components/LanguageSwitcher.tsx","store/AppState/actions.ts","i18n/en.ts","i18n/de.ts","i18n/i18nSetup.ts","components/TextareaWithLines/TextareaWithLines.tsx","components/DisplayTalents/DisplayTalents.tsx","components/DisplaySpecialAbilities/DisplaySpecialAbilities.tsx","components/util/NumberInput.tsx","components/DisplayInventory/DisplayWeapons.tsx","components/DownloadButton/DownloadButton.tsx","components/DisplayInventory/DisplayGear.tsx","components/DisplayInventory/DisplayArmorItems.tsx","components/CharacterSheet/CharacterSheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SizeCategory","CharacterGender","MetadataSelectTestIds","initialState","level","characterName","sizeCategory","MEDIUM","getModifierFromScore","score","Math","floor","getAbilityModifiers","createSelector","state","abilities","abilitiesState","Object","entries","reduce","modifiers","abilityName","values","temporaryAdjustment","charisma","constitution","dexterity","intelligence","strength","wisdom","quickSkillDefinitions","acrobatics","baseAbility","isTrainedOnly","appraise","bluff","climb","craft","diplomacy","disableDevice","disguise","escapeArtist","fly","handleAnimal","heal","intimidate","knowledgeArcana","knowledgeDungeoneering","knowledgeEngineering","knowledgeGeography","knowledgeHistory","knowledgeLocal","knowledgeNature","knowledgeNobility","knowledgePlanes","knowledgeReligion","linguistics","perception","perform","profession","ride","senseMotive","sleightOfHand","spellcraft","stealth","survival","swim","useMagicDevice","UPDATE_SKILL_RANKS","UPDATE_SKILL_MISC_MODIFIER","UPDATE_SKILL_IS_CLASS_SKILL","SET_INITIATIVE_MISC_MODIFIER","SET_SHIELD_BONUS","SET_NATURAL_ARMOR","SET_DEFLECTION_MODIFIER","SET_MISC_ARMOR_MODIFIER","SET_OTHER_ARMOR_MODIFIERS","SET_BASE_SAVE","SET_SAVING_THROW_MAGIC_MODIFIER","SET_MISC_SAVING_THROW_MODIFIER","SET_TEMPORARY_SAVING_THROW_MODIFIER","SET_BASE_ATTACK_BONUS","SET_SPELL_RESISTANCE","SET_LANGUAGE","lang","updateTalents","createAction","TalentsReducer","createReducer","builder","addCase","action","payload","setSpecialAbilities","SpecialAbilitiesReducer","addWeapon","editWeapon","deleteWeapon","addGearItem","editGearItem","deleteGearItem","insertGearItemAtIndex","gearActions","addArmorItem","editArmorItem","deleteArmorItem","insertArmorItemAtIndex","armorActions","armor","gear","weapons","ammunition","attackBonus","criticalAttackProperties","multiplier","minDieValue","damage","name","range","undefined","type","bludgeoning","piercing","slashing","InventoryReducer","map","weapon","index","oldWeaponIndex","newWeapon","filter","gearItem","oldGearItemIndex","newGearItem","_","newGear","length","arr","currGearItem","armorItem","oldArmorItemIndex","newArmorItem","newArmorItems","properties","currArmorItem","RootReducer","combineReducers","characterMetaData","campaign","age","alignment","className","deity","eyes","gender","hair","height","homeland","race","weight","playerName","ability","modifier","adjustment","skills","skillCopy","skillName","miscModifier","ranks","console","warn","isClassSkill","result","keys","forEach","createInitialState","combatValues","armorClass","shieldBonus","deflectionModifier","naturalArmor","otherModifiers","initiative","attackBonuses","baseAttackBonus","spellResistance","savingThrows","fortitude","baseSave","magicModifier","temporaryModifier","reflex","will","savingThrowType","stateCopy","currentSavingThrow","newBaseSave","newMagicModifier","newMiscModifier","newTemporaryModifier","appState","language","talents","specialAbilities","inventory","persistenceConfig","key","storage","localForage","persistedReducer","persistReducer","store","createStore","devToolsEnhancer","setCharacterName","setCharacterClass","setCharacterRace","setCharacterAlignment","setCharacterLevel","setCharacterDeity","setCharacterSizeCategory","setCharacterGender","setCharacterAge","setCharacterHomeland","setCharacterHeight","setCharacterWeight","setCharacterHair","setCharacterEyes","setPlayerName","setCampaign","Morality","Ethics","MetadataSelect","value","onChange","id","label","options","testIds","useEffect","optionValues","option","includes","error","data-testid","wrapper","event","selectedIndex","currentTarget","selectedOption","JSON","stringify","select","htmlFor","NEUTRAL","GenderInputTestIds","GenderInputOptions","MALE","FEMALE","OTHER","SizeCategoryInputTestIds","SizeCategoryInputOptions","SMALL","LARGE","AlignmentInputTestIds","AlignmentOptions","ethics","LAW","morality","GOOD","BAD","CHAOS","PropTypes","string","func","isRequired","MetadataStringInput","MetadataNumberInput","number","mapDispatchToProps","CharacterMetadataActions","DisplayCharacterMetaData","connect","connector","t","useTranslation","callWithStringValue","useCallback","callback","target","callWithNumberValue","parseInt","Number","isNaN","translatedAlignmentOptions","alignmentOption","newLabel","translatedGenderOptions","genderOption","translatedSizeOptions","sizeOption","BoxInputPropTypes","oneOfType","arrayOf","testId","labelTestId","hideBox","bool","BoxInputDefaultProps","BoxInput","props","readOnly","otherProps","defaultProps","any","BoxNumberInput","changeHandlerFromProps","changeHandler","evt","valueAsNumber","disabled","Boolean","BlackBox","children","propsWithoutChildren","setAbilityScore","newScore","setAbilityTempAdjustment","newAdjustment","DisplayAbilities","onScoreChange","newVal","onTempAdjustmentChange","abilityElements","sort","nameA","nameB","localeCompare","abilityAttributes","setSkillRanks","setSkillMiscMod","setIsSkillClassSkill","StyledCheckbox","checked","getWeapons","getGear","getArmor","getTotalArmorItemBonus","sum","armorBonus","getTotalArmorCheckPenalty","checkPenalty","getTotalArmorSpellFailure","spellFailure","getTotalArmorWeight","getTotalSkillBonuses","abilityModifiers","totalCheckPenalty","totalSkillsBonuses","currSkillName","baseAbilityName","abilityModifier","skill","computeTotalSkillBonus","InvertedBorderRadius","style","filledCornersClasses","useMemo","fillCorners","cornerName","join","enableHalfHeightBorders","UpdateSkillsActions","DisplaySkills","totalSkillBonuses","onSkillRanksChange","onSkillMiscModChange","skillA","skillB","Fragment","setBaseSave","setSavingThrowMagicModifier","setMiscSavingThrowModifier","setTemporarySavingThrowModifier","setInitiativeMiscModifier","setBaseAttackBonus","newBaseAttackBonus","setSpellResistance","newSpellResistance","setShieldBonus","newShieldBonus","setDeflectionModifier","newDeflectionModifier","setMiscArmorModifier","newMiscArmorModifier","setNaturalArmor","newNaturalArmor","setOtherArmorModifiers","newOtherArmorModifiers","getSizeModifier","characterMetadataState","NaN","getCombatValues","getTotalInitiativeBonus","getArmorClass","sizeModifier","totalArmorItemBonus","getTouchArmorClass","getFlatFootedArmorClass","min","getFortitudeBonus","savingThrow","getReflexBonus","getWillBonus","getCombatManeuverBonus","getCombatManeuverDefense","combatManeuverBonus","callIfDefined","param","CombatValueActions","DisplayCombatValues","totalInitiativeBonus","totalArmorClass","touchArmorClass","flatFootedArmorClass","fortitudeBonus","reflexBonus","willBonus","combatManeuverDefense","setForCertainSavingThrow","savingThrowName","setter","newValue","savingThrowBonus","getLanguage","setLanguage","newLanguage","LanguageSwitcher","onClick","en","translation","general","short","long","misc","total","bonus","characterSheet","logo","abilitiesTable","tempAdjustment","tempModifier","skillsTable","title","classSkill","trainedOnly","shield","flatFooted","touch","alignments","neutral","genders","sizeCategories","player","characterClass","criticalHit","item","totalWeight","de","useI18nSetup","useState","hasLoaded","setHasBeenInitialized","i18n","use","initReactI18next","init","resources","lng","fallbackLng","then","useSelector","changeLanguage","catch","bind","TextareaWithLines","minRows","rest","textAreaRef","useRef","current","scrollHeight","ref","draggable","rows","wrap","DisplayTalents","e","DisplaySpecialAbilities","NumberInput","onChangeFromProps","parsedValue","parseFloat","InventoryActions","DisplayWeapons","onCreateNewWeapon","weaponIndex","textTransform","a","b","DownloadButton","downloadState","json","blob","Blob","link","window","URL","webkitURL","createObjectURL","document","createElement","download","sanitize","href","body","appendChild","click","removeChild","DisplayGearItem","onPressEnter","onChangeWeight","newWeight","onChangeName","onKeyPress","DisplayGear","onChangeGearItem","containerRef","el","querySelectorAll","focus","DisplayArmorItem","useStringPropertyChangeHandler","propertyName","useNumberPropertyChangeHandler","emptyArmorItem","DisplayArmorItems","totalArmorBonus","totalSpellFailure","CharacterSheet","i18nHasLoaded","role","aria-label","backgroundImage","process","persistor","persistStore","App","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a714b3b.chunk.js","sourcesContent":["import { Alignment } from './Alignment'\n\nexport type CharacterClass = string\n\n// TODO: add other size categories\n//  http://prd.5footstep.de/Grundregelwerk/Kampf/DieGrundregelndesKampfes/Ruestungsklasse\nexport enum SizeCategory {\n  SMALL = -1,\n  MEDIUM = 0,\n  LARGE = 1,\n}\n\nexport enum CharacterGender {\n  MALE,\n  FEMALE,\n  OTHER,\n}\n\nexport type CharacterRace = string\n\nexport type CharacterMetaData = {\n  characterName: string\n  className?: CharacterClass\n  race?: CharacterRace\n  alignment?: Alignment\n  level?: number\n  deity?: string\n  sizeCategory: SizeCategory\n  gender?: CharacterGender\n  age?: number\n  homeland?: string\n  height?: number\n  weight?: number\n  hair?: string\n  eyes?: string\n\n  playerName?: string\n  campaign?: string\n}\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootActionTypes } from '../root-reducer'\n\nconst initialState: CharacterMetaDataState = {\n  level: 0,\n  characterName: '',\n  sizeCategory: SizeCategory.MEDIUM,\n}\n\nexport const CharacterMetaDataReducer = (\n  state = initialState,\n  action?: RootActionTypes,\n): CharacterMetaDataState => {\n  switch (action?.type) {\n    case 'UPDATE_CHARACTER_NAME':\n      return {\n        ...state,\n        characterName: action.payload,\n      }\n    case 'UPDATE_CAMPAIGN':\n      return {\n        ...state,\n        campaign: action.payload,\n      }\n    case 'UPDATE_CHARACTER_AGE':\n      return {\n        ...state,\n        age: action.payload,\n      }\n    case 'UPDATE_CHARACTER_ALIGNMENT':\n      return {\n        ...state,\n        alignment: action.payload,\n      }\n    case 'UPDATE_CHARACTER_CLASS':\n      return {\n        ...state,\n        className: action.payload,\n      }\n    case 'UPDATE_CHARACTER_DEITY':\n      return {\n        ...state,\n        deity: action.payload,\n      }\n    case 'UPDATE_CHARACTER_EYES':\n      return {\n        ...state,\n        eyes: action.payload,\n      }\n    case 'UPDATE_CHARACTER_GENDER':\n      return {\n        ...state,\n        gender: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HAIR':\n      return {\n        ...state,\n        hair: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HEIGHT':\n      return {\n        ...state,\n        height: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HOMELAND':\n      return {\n        ...state,\n        homeland: action.payload,\n      }\n    case 'UPDATE_CHARACTER_LEVEL':\n      return {\n        ...state,\n        level: action.payload,\n      }\n    case 'UPDATE_CHARACTER_RACE':\n      return {\n        ...state,\n        race: action.payload,\n      }\n    case 'UPDATE_CHARACTER_SIZE_CATEGORY':\n      return {\n        ...state,\n        sizeCategory: action.payload,\n      }\n    case 'UPDATE_CHARACTER_WEIGHT':\n      return {\n        ...state,\n        weight: action.payload,\n      }\n    case 'UPDATE_PLAYER_NAME':\n      return {\n        ...state,\n        playerName: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import React, { ChangeEvent, useEffect } from 'react'\n\nexport enum MetadataSelectTestIds {\n  wrapper = 'metadata-select-wrapper',\n  select = 'metadata-select',\n}\n\ntype PropsType<T> = {\n  onChange: (newValue: T) => void\n  value: T\n  options: Array<{ label?: string; value: T }>\n  label?: string\n  id: string\n  testIds?: { wrapper: string; select: string }\n}\n\nexport const MetadataSelect = <T extends any>({\n  value,\n  onChange,\n  id,\n  label,\n  options,\n  testIds = MetadataSelectTestIds,\n}: PropsType<T>) => {\n  useEffect(() => {\n    const optionValues = options.map((option) => option.value) as Array<unknown>\n\n    if (optionValues.includes(undefined) && optionValues.includes('')) {\n      console.error(\n        `MetadataSelect has recieved both an option with the value undefined and one with the value ''. Due ` +\n          `to React / browser implementation details, undefined is converted to '', so both those options cannot exist at the ` +\n          `same time. Please remove either from the options array!`,\n      )\n    }\n  }, [options])\n\n  const onSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedIndex = event.currentTarget.selectedIndex\n    const selectedOption = options[selectedIndex]\n    onChange(selectedOption.value)\n  }\n\n  return (\n    <div className={`metadata-input-block ${id}`} data-testid={testIds.wrapper}>\n      <select\n        onChange={onSelect}\n        id={id}\n        value={value === undefined ? '' : JSON.stringify(value)}\n        data-testid={testIds.select}\n      >\n        {options.map(({ label, value }, index) => (\n          <option\n            label={label}\n            value={value === undefined ? '' : JSON.stringify(value)}\n            key={index}\n          />\n        ))}\n      </select>\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n","import { AbilityAttributes, abilityName, AbilityState } from './types'\nimport { createSelector } from 'reselect'\nimport { RootState } from '../root-reducer'\n\nexport type AbilityModifiers = {\n  [k in abilityName]: number\n}\n\nexport const getModifierFromScore = (score: number) => Math.floor(score / 2) - 5\n\nexport const getAbilities = (state: RootState) => state.abilities\n\nexport const getCurrentModifiersFromAbilities = (\n  abilitiesState: AbilityState,\n) =>\n  (Object.entries(abilitiesState) as Array<\n    [abilityName, AbilityAttributes]\n  >).reduce((modifiers: AbilityModifiers, [abilityName, values]) => {\n    modifiers[abilityName] = getModifierFromScore(\n      values.score + values.temporaryAdjustment,\n    )\n\n    return modifiers\n  }, {} as AbilityModifiers)\n\nexport const getAbilityModifiers = createSelector(\n  [getAbilities],\n  getCurrentModifiersFromAbilities,\n)\n","import { AbilityState } from './types'\nimport { getModifierFromScore } from './selectors'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createDefaultAbility = () => ({\n  score: 10,\n  temporaryAdjustment: 0,\n})\n\nconst initialState: AbilityState = {\n  charisma: createDefaultAbility(),\n  constitution: createDefaultAbility(),\n  dexterity: createDefaultAbility(),\n  intelligence: createDefaultAbility(),\n  strength: createDefaultAbility(),\n  wisdom: createDefaultAbility(),\n}\n\nexport const AbilitiesReducer = (\n  state: AbilityState = initialState,\n  action?: RootActionTypes,\n): AbilityState => {\n  switch (action?.type) {\n    case 'SET_ABILITY_SCORE':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          score: action.score || 0,\n          modifier: getModifierFromScore(action.score),\n        },\n      }\n    case 'SET_ABILITY_TEMP_ADJUSTMENT':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          temporaryAdjustment: action.adjustment || 0,\n        },\n      }\n    default:\n      return state\n  }\n}\n","import { abilityName } from '../Abilities/types'\n\nexport type SkillName =\n  | 'acrobatics'\n  | 'appraise'\n  | 'bluff'\n  | 'climb'\n  | 'craft'\n  | 'diplomacy'\n  | 'disableDevice'\n  | 'disguise'\n  | 'escapeArtist'\n  | 'fly'\n  | 'handleAnimal'\n  | 'heal'\n  | 'intimidate'\n  | 'knowledgeArcana'\n  | 'knowledgeDungeoneering'\n  | 'knowledgeEngineering'\n  | 'knowledgeGeography'\n  | 'knowledgeHistory'\n  | 'knowledgeLocal'\n  | 'knowledgeNature'\n  | 'knowledgeNobility'\n  | 'knowledgePlanes'\n  | 'knowledgeReligion'\n  | 'linguistics'\n  | 'perception'\n  | 'perform'\n  | 'profession'\n  | 'ride'\n  | 'senseMotive'\n  | 'sleightOfHand'\n  | 'spellcraft'\n  | 'stealth'\n  | 'survival'\n  | 'swim'\n  | 'useMagicDevice'\n\nexport const quickSkillDefinitions: {\n  [k in SkillName]: {\n    baseAbility: abilityName\n    isTrainedOnly: boolean\n  }\n} = {\n  acrobatics: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  appraise: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: false,\n  },\n  bluff: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  climb: {\n    baseAbility: 'strength',\n    isTrainedOnly: false,\n  },\n  craft: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: false,\n  },\n  diplomacy: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  disableDevice: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: true,\n  },\n  disguise: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  escapeArtist: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  fly: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  handleAnimal: {\n    baseAbility: 'charisma',\n    isTrainedOnly: true,\n  },\n  heal: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  intimidate: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  knowledgeArcana: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeDungeoneering: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeEngineering: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeGeography: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeHistory: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeLocal: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeNature: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeNobility: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgePlanes: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeReligion: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  linguistics: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  perception: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  perform: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  profession: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: true,\n  },\n  ride: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  senseMotive: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  sleightOfHand: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: true,\n  },\n  spellcraft: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  stealth: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  survival: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  swim: {\n    baseAbility: 'strength',\n    isTrainedOnly: false,\n  },\n  useMagicDevice: {\n    baseAbility: 'charisma',\n    isTrainedOnly: true,\n  },\n}\n\nexport type Skill = {\n  name: SkillName\n  ranks: number\n  miscModifier: number\n  isClassSkill: boolean\n}\n\nexport type SkillState = {\n  [k in SkillName]: Skill\n}\n\nexport const UPDATE_SKILL_RANKS = 'UPDATE_SKILL_RANKS'\nexport const UPDATE_SKILL_MISC_MODIFIER = 'UPDATE_SKILL_MISC_MODIFIER'\nexport const UPDATE_SKILL_IS_CLASS_SKILL = 'UPDATE_SKILL_IS_CLASS_SKILL'\n\nexport type UpdateSkillRankAction = {\n  type: typeof UPDATE_SKILL_RANKS\n  payload: {\n    skillName: SkillName\n    ranks: number\n  }\n}\n\nexport type UpdateSkillMiscModifierAction = {\n  type: typeof UPDATE_SKILL_MISC_MODIFIER\n  payload: {\n    skillName: SkillName\n    miscModifier: number\n  }\n}\n\nexport type UpdateSkillIsClassSkill = {\n  type: typeof UPDATE_SKILL_IS_CLASS_SKILL\n  payload: {\n    skillName: SkillName\n    isClassSkill: boolean\n  }\n}\n\nexport type UpdateSkillActionTypes =\n  | UpdateSkillRankAction\n  | UpdateSkillMiscModifierAction\n  | UpdateSkillIsClassSkill\n","export type InitiativeState = {\n  miscModifier: number\n}\nexport const SET_INITIATIVE_MISC_MODIFIER = 'SET_INITIATIVE_MISC_MODIFIER'\nexport type SetInitiativeMiscModifierAction = {\n  type: typeof SET_INITIATIVE_MISC_MODIFIER\n  payload: number\n}\n\nexport type ArmorClassState = {\n  shieldBonus: number // aus ruestung tabelle\n  naturalArmor: number // talente / volk\n  deflectionModifier: number // zauber?\n  miscModifier: number\n  otherModifiers: string\n}\nexport const SET_SHIELD_BONUS = 'SET_SHIELD_BONUS'\nexport type SetShieldBonusAction = {\n  type: typeof SET_SHIELD_BONUS\n  payload: number\n}\nexport const SET_NATURAL_ARMOR = 'SET_NATURAL_ARMOR'\nexport type SetNaturalArmorAction = {\n  type: typeof SET_NATURAL_ARMOR\n  payload: number\n}\nexport const SET_DEFLECTION_MODIFIER = 'SET_DEFLECTION_MODIFIER'\nexport type SetDeflectionModifierAction = {\n  type: typeof SET_DEFLECTION_MODIFIER\n  payload: number\n}\nexport const SET_MISC_ARMOR_MODIFIER = 'SET_MISC_ARMOR_MODIFIER'\nexport type SetMiscArmorModifierAction = {\n  type: typeof SET_MISC_ARMOR_MODIFIER\n  payload: number\n}\nexport const SET_OTHER_ARMOR_MODIFIERS = 'SET_OTHER_ARMOR_MODIFIERS'\nexport type SetOtherArmorModifiersAction = {\n  type: typeof SET_OTHER_ARMOR_MODIFIERS\n  payload: string\n}\n\nexport type SavingThrowValues = {\n  baseSave: number // tabellen\n  magicModifier: number // zauber\n  miscModifier: number // talente\n  temporaryModifier: number\n}\nexport const SET_BASE_SAVE = 'SET_BASE_SAVE'\nexport type SetBaseSaveAction = {\n  type: typeof SET_BASE_SAVE\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newBaseSave: number\n  }\n}\nexport const SET_SAVING_THROW_MAGIC_MODIFIER = 'SET_SAVING_THROW_MAGIC_MODIFIER'\nexport type SetSavingThrowMagicModifierAction = {\n  type: typeof SET_SAVING_THROW_MAGIC_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newMagicModifier: number\n  }\n}\nexport const SET_MISC_SAVING_THROW_MODIFIER = 'SET_MISC_SAVING_THROW_MODIFIER'\nexport type SetMiscSavingThrowModifierAction = {\n  type: typeof SET_MISC_SAVING_THROW_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newMiscModifier: number\n  }\n}\nexport const SET_TEMPORARY_SAVING_THROW_MODIFIER =\n  'SET_TEMPORARY_SAVING_THROW_MODIFIER'\nexport type SetTemporarySavingThrowModifierAction = {\n  type: typeof SET_TEMPORARY_SAVING_THROW_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newTemporaryModifier: number\n  }\n}\n\nexport type SavingThrowsState = {\n  fortitude: SavingThrowValues\n  reflex: SavingThrowValues\n  will: SavingThrowValues\n}\n\nexport type AttackBonusesState = {\n  baseAttackBonus: number\n  spellResistance: number // gegenstaende, klassen, voelker\n}\nexport const SET_BASE_ATTACK_BONUS = 'SET_BASE_ATTACK_BONUS'\nexport type SetBaseAttackBonusAction = {\n  type: typeof SET_BASE_ATTACK_BONUS\n  payload: number\n}\nexport const SET_SPELL_RESISTANCE = 'SET_SPELL_RESISTANCE'\nexport type SetSpellResistanceAction = {\n  type: typeof SET_SPELL_RESISTANCE\n  payload: number\n}\n\nexport type CombatValuesState = {\n  initiative: InitiativeState\n  armorClass: ArmorClassState\n  savingThrows: SavingThrowsState\n  attackBonuses: AttackBonusesState\n}\n\nexport type CombatValuesActionTypes =\n  | SetInitiativeMiscModifierAction\n  | SetShieldBonusAction\n  | SetNaturalArmorAction\n  | SetDeflectionModifierAction\n  | SetMiscArmorModifierAction\n  | SetOtherArmorModifiersAction\n  | SetBaseSaveAction\n  | SetSavingThrowMagicModifierAction\n  | SetMiscSavingThrowModifierAction\n  | SetTemporarySavingThrowModifierAction\n  | SetBaseAttackBonusAction\n  | SetSpellResistanceAction\n","export type AppState = {\n  lang: 'en' | 'de'\n}\n\nexport const SET_LANGUAGE = 'SET_LANGUAGE'\n\nexport type SetLanguageAction = {\n  type: typeof SET_LANGUAGE\n  language: AppState['lang']\n}\n\nexport type AppStateActionTypes = SetLanguageAction\n","import { AppState, SET_LANGUAGE } from './types'\nimport { RootActionTypes } from '../root-reducer'\n\nconst initialState: AppState = {\n  lang: 'en',\n}\n\nexport const AppStateReducer = (\n  state: AppState = initialState,\n  action?: RootActionTypes,\n) => {\n  switch (action?.type) {\n    case SET_LANGUAGE:\n      return {\n        ...state,\n        lang: action.language,\n      }\n    default:\n      return state\n  }\n}\n","import { createAction } from '@reduxjs/toolkit'\n\nexport const updateTalents = createAction<string, 'UPDATE_TALENTS'>(\n  'UPDATE_TALENTS',\n)\n\nexport type TalentsActionType = ReturnType<typeof updateTalents>\n","import { createReducer } from '@reduxjs/toolkit'\nimport { updateTalents } from './actions'\n\nexport type TalentsState = string\n\nconst initialState: TalentsState = ''\nexport const TalentsReducer = createReducer(initialState, (builder) => {\n  builder.addCase(updateTalents, (state, action) => action.payload)\n})\n","import { createAction } from '@reduxjs/toolkit'\n\nconst SET_SPECIAL_ABILITIES = 'SET_SPECIAL_ABILITIES' as const\nexport const setSpecialAbilities = createAction<\n  string,\n  typeof SET_SPECIAL_ABILITIES\n>(SET_SPECIAL_ABILITIES)\n\nexport type SpecialAbilitiesActionType = ReturnType<typeof setSpecialAbilities>\n","import { createReducer } from '@reduxjs/toolkit'\nimport { setSpecialAbilities } from './actions'\n\nexport type SpecialAbilitiesState = string\n\nconst initialState: SpecialAbilitiesState = ''\nexport const SpecialAbilitiesReducer = createReducer(\n  initialState,\n  (builder) => {\n    builder.addCase(setSpecialAbilities, (state, action) => action.payload)\n  },\n)\n","import { createAction } from '@reduxjs/toolkit'\nimport { Armor, GearItem, Weapon } from './reducers'\n\nexport const addWeapon = createAction<Weapon, 'ADD_WEAPON'>('ADD_WEAPON')\n\nexport const editWeapon = createAction<\n  { oldWeaponIndex: number; newWeapon: Weapon },\n  'EDIT_WEAPON'\n>('EDIT_WEAPON')\n\nexport const deleteWeapon = createAction<number, 'DELETE_WEAPON'>(\n  'DELETE_WEAPON',\n)\n\nexport const addGearItem = createAction<GearItem, 'ADD_GEAR_ITEM'>(\n  'ADD_GEAR_ITEM',\n)\n\nexport const editGearItem = createAction<\n  { oldGearItemIndex: number; newGearItem: GearItem },\n  'EDIT_GEAR_ITEM'\n>('EDIT_GEAR_ITEM')\n\nexport const deleteGearItem = createAction<number, 'DELETE_GEAR_ITEM'>(\n  'DELETE_GEAR_ITEM',\n)\n\nexport const insertGearItemAtIndex = createAction<number, 'INSERT_GEAR_ITEM'>(\n  'INSERT_GEAR_ITEM',\n)\n\nexport const gearActions = {\n  addGearItem,\n  insertGearItemAtIndex,\n  editGearItem,\n  deleteGearItem,\n}\n\nexport const addArmorItem = createAction<Armor, 'ADD_ARMOR_ITEM'>(\n  'ADD_ARMOR_ITEM',\n)\n\nexport const editArmorItem = createAction<\n  { oldArmorItemIndex: number; newArmorItem: Armor },\n  'EDIT_ARMOR_ITEM'\n>('EDIT_ARMOR_ITEM')\n\nexport const deleteArmorItem = createAction<number, 'DELETE_ARMOR_ITEM'>(\n  'DELETE_ARMOR_ITEM',\n)\n\nexport const insertArmorItemAtIndex = createAction<number, 'INSERT_ARMOR_ITEM'>(\n  'INSERT_ARMOR_ITEM',\n)\n\nexport const armorActions = {\n  addArmorItem,\n  editArmorItem,\n  deleteArmorItem,\n  insertArmorItemAtIndex,\n}\n\nexport type InventoryActionType = ReturnType<\n  | typeof addWeapon\n  | typeof editWeapon\n  | typeof deleteWeapon\n  | typeof addGearItem\n  | typeof insertGearItemAtIndex\n  | typeof editGearItem\n  | typeof deleteGearItem\n  | typeof addArmorItem\n  | typeof insertArmorItemAtIndex\n  | typeof editArmorItem\n  | typeof deleteArmorItem\n>\n","import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addArmorItem,\n  addGearItem,\n  addWeapon,\n  deleteArmorItem,\n  deleteGearItem,\n  deleteWeapon,\n  editArmorItem,\n  editGearItem,\n  editWeapon,\n  insertArmorItemAtIndex,\n  insertGearItemAtIndex,\n} from './actions'\n\nexport type GearItem = {\n  name: string\n  weight?: number\n}\n\nexport type Armor = {\n  name: string\n  armorBonus?: number\n  type: string\n  checkPenalty?: number\n  spellFailure?: number\n  weight?: number\n  properties: string\n}\n\nexport type Weapon = {\n  name: string\n  attackBonus: string\n  criticalAttackProperties: {\n    multiplier?: number\n    minDieValue?: number\n  }\n  type: {\n    slashing: boolean\n    piercing: boolean\n    bludgeoning: boolean\n  }\n  range?: number\n  ammunition: string\n  damage: string\n}\n\nexport type InventoryState = {\n  gear: Array<GearItem>\n  armor: Array<Armor>\n  weapons: Array<Weapon>\n}\n\nexport const generateEmptyWeapon = (): Weapon => ({\n  ammunition: '',\n  attackBonus: '',\n  criticalAttackProperties: {\n    multiplier: 2,\n    minDieValue: 20,\n  },\n  damage: '',\n  name: '',\n  range: undefined,\n  type: {\n    bludgeoning: false,\n    piercing: false,\n    slashing: false,\n  },\n})\n\nconst initialState: InventoryState = {\n  armor: [],\n  gear: [],\n  weapons: [generateEmptyWeapon()],\n}\n\nexport const InventoryReducer = createReducer(initialState, (builder) => {\n  builder\n\n    // Weapon actions\n    .addCase(addWeapon, (state, action) => ({\n      ...state,\n      weapons: [...state.weapons, action.payload],\n    }))\n    .addCase(editWeapon, (state, action) => ({\n      ...state,\n      weapons: state.weapons.map((weapon, index) =>\n        index === action.payload.oldWeaponIndex\n          ? action.payload.newWeapon\n          : weapon,\n      ),\n    }))\n    .addCase(deleteWeapon, (state, action) => ({\n      ...state,\n      weapons: state.weapons.filter(\n        (weapon, index) => index !== action.payload,\n      ),\n    }))\n\n    // Gear actions\n    .addCase(addGearItem, (state, action) => ({\n      ...state,\n      gear: [...state.gear, action.payload],\n    }))\n    .addCase(editGearItem, (state, action) => ({\n      ...state,\n      gear: state.gear.map((gearItem, index) =>\n        index === action.payload.oldGearItemIndex\n          ? action.payload.newGearItem\n          : gearItem,\n      ),\n    }))\n    .addCase(deleteGearItem, (state, action) => ({\n      ...state,\n      gear: state.gear.filter((_, index) => index !== action.payload),\n    }))\n    .addCase(insertGearItemAtIndex, (state, action) => {\n      let newGear: Array<GearItem>\n      const newGearItem = { name: '' }\n\n      if (action.payload >= state.gear.length) {\n        newGear = [...state.gear, newGearItem]\n      } else if (action.payload < 0) {\n        newGear = [newGearItem, ...state.gear]\n      } else {\n        newGear = state.gear.reduce((arr, currGearItem, index) => {\n          if (index === action.payload) {\n            return [...arr, newGearItem, currGearItem]\n          } else {\n            return [...arr, currGearItem]\n          }\n        }, [] as Array<GearItem>)\n      }\n\n      return {\n        ...state,\n        gear: newGear,\n      }\n    })\n\n    // Armor actions\n    .addCase(addArmorItem, (state, action) => ({\n      ...state,\n      armor: [...state.armor, action.payload],\n    }))\n    .addCase(editArmorItem, (state, action) => ({\n      ...state,\n      armor: state.armor.map((armorItem, index) =>\n        index === action.payload.oldArmorItemIndex\n          ? action.payload.newArmorItem\n          : armorItem,\n      ),\n    }))\n    .addCase(deleteArmorItem, (state, action) => ({\n      ...state,\n      armor: state.armor.filter((armorItem, index) => index !== action.payload),\n    }))\n    .addCase(insertArmorItemAtIndex, (state, action) => {\n      let newArmorItems: Array<Armor>\n      const newArmorItem: Armor = { name: '', type: '', properties: '' }\n\n      if (action.payload >= state.armor.length) {\n        newArmorItems = [...state.armor, newArmorItem]\n      } else if (action.payload < 0) {\n        newArmorItems = [newArmorItem, ...state.armor]\n      } else {\n        newArmorItems = state.armor.reduce((arr, currArmorItem, index) => {\n          if (index === action.payload) {\n            return [...arr, newArmorItem, currArmorItem]\n          } else {\n            return [...arr, currArmorItem]\n          }\n        }, [] as Array<Armor>)\n      }\n\n      return {\n        ...state,\n        armor: newArmorItems,\n      }\n    })\n})\n","import { CharacterMetaDataReducer } from './CharacterMetaData/reducers'\nimport { AbilitiesReducer } from './Abilities/reducers'\nimport { SkillsReducer } from './Skills/reducers'\nimport {\n  CharacterMetaDataState,\n  UpdateCharacterMetaDataActionTypes,\n} from './CharacterMetaData/types'\nimport { AbilitiesActionTypes, AbilityState } from './Abilities/types'\nimport { SkillState, UpdateSkillActionTypes } from './Skills/types'\nimport {\n  CombatValuesActionTypes,\n  CombatValuesState,\n} from './CombatValues/types'\nimport { CombatValuesReducer } from './CombatValues/reducers'\nimport { combineReducers } from 'redux'\nimport { AppState, AppStateActionTypes } from './AppState/types'\nimport { AppStateReducer } from './AppState/reducers'\nimport { TalentsReducer, TalentsState } from './Talents/reducers'\nimport { TalentsActionType } from './Talents/actions'\nimport {\n  SpecialAbilitiesReducer,\n  SpecialAbilitiesState,\n} from './SpecialAbilities/reducers'\nimport { SpecialAbilitiesActionType } from './SpecialAbilities/actions'\nimport { InventoryReducer, InventoryState } from './Inventory/reducers'\nimport { InventoryActionType } from './Inventory/actions'\n\nexport type RootState = {\n  characterMetaData: CharacterMetaDataState\n  abilities: AbilityState\n  skills: SkillState\n  combatValues: CombatValuesState\n  appState: AppState\n  talents: TalentsState\n  specialAbilities: SpecialAbilitiesState\n  inventory: InventoryState\n}\n\nexport type EmptyActionType = { type: 'EMPTY_ACTION' }\nexport const EmptyAction: EmptyActionType = {\n  type: 'EMPTY_ACTION',\n}\n\nexport type RootActionTypes =\n  | CombatValuesActionTypes\n  | UpdateCharacterMetaDataActionTypes\n  | AbilitiesActionTypes\n  | UpdateSkillActionTypes\n  | AppStateActionTypes\n  | TalentsActionType\n  | SpecialAbilitiesActionType\n  | InventoryActionType\n  | EmptyActionType\n\n// export const RootReducer = (state?: RootState, action?: RootActionTypes) => (\n//   {\n//     characterMetaData: CharacterMetaDataReducer(state?.characterMetaData, action),\n//     abilities: AbilitiesReducer(state?.abilities, action),\n//     skills: SkillsReducer(state?.skills, action),\n//     combatValues: CombatValuesReducer(state?.combatValues, action),\n//   }\n// )\n\nexport const RootReducer = combineReducers<RootState, RootActionTypes>({\n  characterMetaData: CharacterMetaDataReducer,\n  abilities: AbilitiesReducer,\n  skills: SkillsReducer,\n  combatValues: CombatValuesReducer,\n  appState: AppStateReducer,\n  talents: TalentsReducer,\n  specialAbilities: SpecialAbilitiesReducer,\n  inventory: InventoryReducer,\n})\n","import {\n  quickSkillDefinitions,\n  SkillState,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n} from './types'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createInitialState = () => {\n  const result = {} as SkillState\n\n  ;(Object.keys(quickSkillDefinitions) as Array<keyof SkillState>).forEach(\n    (skillName: keyof SkillState) => {\n      result[skillName] = {\n        name: skillName,\n        isClassSkill: false,\n        miscModifier: 0,\n        ranks: 0,\n      }\n    },\n  )\n\n  return result\n}\n\nexport const SkillsReducer = (\n  state?: SkillState,\n  action?: RootActionTypes,\n): SkillState => {\n  if (!state) {\n    return createInitialState()\n  } else if (\n    action?.type === UPDATE_SKILL_MISC_MODIFIER ||\n    action?.type === UPDATE_SKILL_RANKS ||\n    action?.type === UPDATE_SKILL_IS_CLASS_SKILL\n  ) {\n    const skillCopy = {\n      ...state[action?.payload.skillName],\n    }\n\n    switch (action?.type) {\n      case UPDATE_SKILL_MISC_MODIFIER:\n        skillCopy.miscModifier = action?.payload.miscModifier\n        break\n\n      case UPDATE_SKILL_RANKS:\n        if (action?.payload.ranks < 0) {\n          // TODO: don't accept ranks > character level\n          console.warn('Ranks must be >= 0')\n        } else {\n          skillCopy.ranks = action?.payload.ranks\n        }\n        break\n\n      case UPDATE_SKILL_IS_CLASS_SKILL:\n        skillCopy.isClassSkill = action?.payload.isClassSkill\n\n        break\n    }\n\n    return {\n      ...state,\n      [action?.payload.skillName]: skillCopy,\n    }\n  } else {\n    return state\n  }\n}\n","import {\n  CombatValuesState,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n} from './types'\nimport { getInitialCombatValuesState } from './initialState'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const CombatValuesReducer = (\n  state = getInitialCombatValuesState(),\n  action?: RootActionTypes,\n): CombatValuesState => {\n  // Handle actions that change saving throws\n  if (\n    action?.type === SET_BASE_SAVE ||\n    action?.type === SET_SAVING_THROW_MAGIC_MODIFIER ||\n    action?.type === SET_MISC_SAVING_THROW_MODIFIER ||\n    action?.type === SET_TEMPORARY_SAVING_THROW_MODIFIER\n  ) {\n    const savingThrowType = action?.payload.savingThrowType\n    const stateCopy = {\n      ...state,\n      savingThrows: {\n        ...state.savingThrows,\n        [savingThrowType]: {\n          ...state.savingThrows[savingThrowType],\n        },\n      },\n    }\n    const currentSavingThrow = stateCopy.savingThrows[savingThrowType]\n\n    switch (action.type) {\n      case SET_BASE_SAVE:\n        currentSavingThrow.baseSave = action.payload.newBaseSave\n        break\n      case SET_SAVING_THROW_MAGIC_MODIFIER:\n        currentSavingThrow.magicModifier = action.payload.newMagicModifier\n        break\n      case SET_MISC_SAVING_THROW_MODIFIER:\n        currentSavingThrow.miscModifier = action.payload.newMiscModifier\n        break\n      case SET_TEMPORARY_SAVING_THROW_MODIFIER:\n        currentSavingThrow.temporaryModifier =\n          action.payload.newTemporaryModifier\n    }\n\n    return stateCopy\n  }\n\n  switch (action?.type) {\n    case SET_INITIATIVE_MISC_MODIFIER:\n      return {\n        ...state,\n        initiative: {\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_BASE_ATTACK_BONUS:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          baseAttackBonus: action?.payload,\n        },\n      }\n\n    case SET_SPELL_RESISTANCE:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          spellResistance: action?.payload,\n        },\n      }\n\n    case SET_SHIELD_BONUS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          shieldBonus: action?.payload,\n        },\n      }\n\n    case SET_DEFLECTION_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          deflectionModifier: action?.payload,\n        },\n      }\n\n    case SET_MISC_ARMOR_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_NATURAL_ARMOR:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          naturalArmor: action?.payload,\n        },\n      }\n\n    case SET_OTHER_ARMOR_MODIFIERS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          otherModifiers: action?.payload,\n        },\n      }\n\n    default:\n      return state\n  }\n}\n","import { CombatValuesState } from './types'\n\nexport const getInitialCombatValuesState = (): CombatValuesState => ({\n  armorClass: {\n    shieldBonus: 0,\n    deflectionModifier: 0,\n    miscModifier: 0,\n    naturalArmor: 0,\n    otherModifiers: '',\n  },\n  initiative: {\n    miscModifier: 0,\n  },\n  attackBonuses: {\n    baseAttackBonus: 0,\n    spellResistance: 0,\n  },\n  savingThrows: {\n    fortitude: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n    reflex: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n    will: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n  },\n})\n","import { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { RootReducer } from './root-reducer'\nimport localForage from 'localforage'\nimport { persistReducer } from 'redux-persist'\n\nconst persistenceConfig = {\n  key: 'pathfinder-character-sheet',\n  storage: localForage,\n}\n\nconst persistedReducer = persistReducer(persistenceConfig, RootReducer)\n\nexport const store = createStore(persistedReducer, devToolsEnhancer({}))\n","import {\n  UPDATE_CAMPAIGN,\n  UPDATE_CHARACTER_AGE,\n  UPDATE_CHARACTER_ALIGNMENT,\n  UPDATE_CHARACTER_CLASS,\n  UPDATE_CHARACTER_DEITY,\n  UPDATE_CHARACTER_EYES,\n  UPDATE_CHARACTER_GENDER,\n  UPDATE_CHARACTER_HAIR,\n  UPDATE_CHARACTER_HEIGHT,\n  UPDATE_CHARACTER_HOMELAND,\n  UPDATE_CHARACTER_LEVEL,\n  UPDATE_CHARACTER_NAME,\n  UPDATE_CHARACTER_RACE,\n  UPDATE_CHARACTER_SIZE_CATEGORY,\n  UPDATE_CHARACTER_WEIGHT,\n  UPDATE_PLAYER_NAME,\n  UpdateCharacterMetaDataActionTypes,\n} from './types'\nimport { CharacterGender, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const setCharacterName = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_NAME,\n  payload: name,\n})\n\nexport const setCharacterClass = (\n  className: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_CLASS,\n  payload: className,\n})\n\nexport const setCharacterRace = (\n  race: CharacterRace | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_RACE,\n  payload: race,\n})\n\nexport const setCharacterAlignment = (\n  alignment: Alignment | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_ALIGNMENT,\n  payload: alignment,\n})\n\nexport const setCharacterLevel = (\n  level: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_LEVEL,\n  payload: level,\n})\n\nexport const setCharacterDeity = (\n  deity: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_DEITY,\n  payload: deity,\n})\n\nexport const setCharacterSizeCategory = (\n  sizeCategory: SizeCategory,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_SIZE_CATEGORY,\n  payload: sizeCategory,\n})\n\nexport const setCharacterGender = (\n  gender: CharacterGender | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_GENDER,\n  payload: gender,\n})\n\nexport const setCharacterAge = (\n  age: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_AGE,\n  payload: age,\n})\n\nexport const setCharacterHomeland = (\n  homeland: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HOMELAND,\n  payload: homeland,\n})\n\nexport const setCharacterHeight = (\n  height: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HEIGHT,\n  payload: height,\n})\n\nexport const setCharacterWeight = (\n  weight: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_WEIGHT,\n  payload: weight,\n})\n\nexport const setCharacterHair = (\n  hair: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HAIR,\n  payload: hair,\n})\n\nexport const setCharacterEyes = (\n  eyes: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_EYES,\n  payload: eyes,\n})\n\nexport const setPlayerName = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_PLAYER_NAME,\n  payload: name,\n})\n\nexport const setCampaign = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CAMPAIGN,\n  payload: name,\n})\n","import {\n  CharacterClass,\n  CharacterGender,\n  CharacterMetaData,\n  CharacterRace,\n  SizeCategory,\n} from './Character'\nimport { Alignment } from './Alignment'\n\nexport const UPDATE_CHARACTER_NAME = 'UPDATE_CHARACTER_NAME'\nexport const UPDATE_CHARACTER_CLASS = 'UPDATE_CHARACTER_CLASS'\nexport const UPDATE_CHARACTER_RACE = 'UPDATE_CHARACTER_RACE'\nexport const UPDATE_CHARACTER_ALIGNMENT = 'UPDATE_CHARACTER_ALIGNMENT'\nexport const UPDATE_CHARACTER_LEVEL = 'UPDATE_CHARACTER_LEVEL'\nexport const UPDATE_CHARACTER_DEITY = 'UPDATE_CHARACTER_DEITY'\nexport const UPDATE_CHARACTER_SIZE_CATEGORY = 'UPDATE_CHARACTER_SIZE_CATEGORY'\nexport const UPDATE_CHARACTER_GENDER = 'UPDATE_CHARACTER_GENDER'\nexport const UPDATE_CHARACTER_AGE = 'UPDATE_CHARACTER_AGE'\nexport const UPDATE_CHARACTER_HOMELAND = 'UPDATE_CHARACTER_HOMELAND'\nexport const UPDATE_CHARACTER_HEIGHT = 'UPDATE_CHARACTER_HEIGHT'\nexport const UPDATE_CHARACTER_WEIGHT = 'UPDATE_CHARACTER_WEIGHT'\nexport const UPDATE_CHARACTER_HAIR = 'UPDATE_CHARACTER_HAIR'\nexport const UPDATE_CHARACTER_EYES = 'UPDATE_CHARACTER_EYES'\nexport const UPDATE_PLAYER_NAME = 'UPDATE_PLAYER_NAME'\nexport const UPDATE_CAMPAIGN = 'UPDATE_CAMPAIGN'\n\ntype UpdateCharacterNameAction = {\n  type: typeof UPDATE_CHARACTER_NAME\n  payload: string\n}\n\ntype UpdateCharacterClassAction = {\n  type: typeof UPDATE_CHARACTER_CLASS\n  payload: CharacterClass | undefined\n}\n\ntype UpdateCharacterRaceAction = {\n  type: typeof UPDATE_CHARACTER_RACE\n  payload: CharacterRace | undefined\n}\n\ntype UpdateCharacterAlignmentAction = {\n  type: typeof UPDATE_CHARACTER_ALIGNMENT\n  payload: Alignment | undefined\n}\n\ntype UpdateCharacterLevelAction = {\n  type: typeof UPDATE_CHARACTER_LEVEL\n  payload: number | undefined\n}\n\ntype UpdateCharacterDeityTypeAction = {\n  type: typeof UPDATE_CHARACTER_DEITY\n  payload: string\n}\n\ntype UpdateCharacterSizeCategoryAction = {\n  type: typeof UPDATE_CHARACTER_SIZE_CATEGORY\n  payload: SizeCategory\n}\n\ntype UpdateCharacterGenderAction = {\n  type: typeof UPDATE_CHARACTER_GENDER\n  payload: CharacterGender | undefined\n}\n\ntype UpdateCharacterAgeAction = {\n  type: typeof UPDATE_CHARACTER_AGE\n  payload: number | undefined\n}\n\ntype UpdateCharacterHomelandAction = {\n  type: typeof UPDATE_CHARACTER_HOMELAND\n  payload: string\n}\n\ntype UpdateCharacterHeightAction = {\n  type: typeof UPDATE_CHARACTER_HEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterWeightAction = {\n  type: typeof UPDATE_CHARACTER_WEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterHAIRAction = {\n  type: typeof UPDATE_CHARACTER_HAIR\n  payload: string\n}\n\ntype UpdateCharacterEYESAction = {\n  type: typeof UPDATE_CHARACTER_EYES\n  payload: string\n}\n\ntype UpdatePlayerNameAction = {\n  type: typeof UPDATE_PLAYER_NAME\n  payload: string\n}\n\ntype UpdateCampaignAction = {\n  type: typeof UPDATE_CAMPAIGN\n  payload: string\n}\n\nexport type UpdateCharacterMetaDataActionTypes =\n  | UpdateCharacterNameAction\n  | UpdateCharacterClassAction\n  | UpdateCharacterRaceAction\n  | UpdateCharacterAlignmentAction\n  | UpdateCharacterLevelAction\n  | UpdateCharacterDeityTypeAction\n  | UpdateCharacterSizeCategoryAction\n  | UpdateCharacterGenderAction\n  | UpdateCharacterAgeAction\n  | UpdateCharacterHomelandAction\n  | UpdateCharacterHeightAction\n  | UpdateCharacterWeightAction\n  | UpdateCharacterHAIRAction\n  | UpdateCharacterEYESAction\n  | UpdatePlayerNameAction\n  | UpdateCampaignAction\n\nexport type CharacterMetaDataState = CharacterMetaData\n","export enum Morality {\n  GOOD,\n  NEUTRAL,\n  BAD,\n}\n\nexport enum Ethics {\n  LAW,\n  NEUTRAL,\n  CHAOS,\n}\n\nexport type Alignment = {\n  morality: Morality\n  ethics: Ethics\n}\n\nexport const NeutralAlignment = {\n  morality: Morality.NEUTRAL,\n  ethics: Ethics.NEUTRAL,\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport * as CharacterMetadataActions from '../../store/CharacterMetaData/actions'\nimport PropTypes from 'prop-types'\n\nimport './DisplayCharacterMetaData.scss'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../../store/CharacterMetaData/Character'\nimport { MetadataSelect } from './MetadataSelect/MetadataSelect'\nimport { Ethics, Morality } from '../../store/CharacterMetaData/Alignment'\n\nimport { useTranslation } from 'react-i18next'\n\nconst GenderInputOptions = [\n  { label: undefined, value: undefined },\n  { label: 'Male', value: CharacterGender.MALE },\n  { label: 'Female', value: CharacterGender.FEMALE },\n  { label: 'Other', value: CharacterGender.OTHER },\n]\n\nexport enum GenderInputTestIds {\n  wrapper = 'gender-input-wrapper',\n  select = 'gender-input-select',\n}\n\nconst SizeCategoryInputOptions = [\n  { label: 'Small', value: SizeCategory.SMALL },\n  { label: 'Medium', value: SizeCategory.MEDIUM },\n  { label: 'large', value: SizeCategory.LARGE },\n]\n\nexport enum SizeCategoryInputTestIds {\n  wrapper = 'size-category-input-wrapper',\n  select = 'size-category-input-select',\n}\n\nconst AlignmentOptions = [\n  { label: undefined, value: undefined },\n  { label: 'LG', value: { ethics: Ethics.LAW, morality: Morality.GOOD } },\n  { label: 'LN', value: { ethics: Ethics.LAW, morality: Morality.NEUTRAL } },\n  { label: 'LB', value: { ethics: Ethics.LAW, morality: Morality.BAD } },\n\n  { label: 'NG', value: { ethics: Ethics.NEUTRAL, morality: Morality.GOOD } },\n  { label: 'N', value: { ethics: Ethics.NEUTRAL, morality: Morality.NEUTRAL } },\n  { label: 'NB', value: { ethics: Ethics.NEUTRAL, morality: Morality.BAD } },\n\n  { label: 'CG', value: { ethics: Ethics.CHAOS, morality: Morality.GOOD } },\n  { label: 'CN', value: { ethics: Ethics.CHAOS, morality: Morality.NEUTRAL } },\n  { label: 'CB', value: { ethics: Ethics.CHAOS, morality: Morality.BAD } },\n]\n\nexport enum AlignmentInputTestIds {\n  wrapper = 'alignment-input-wrapper',\n  select = 'alignment-input-select',\n}\n\nconst StringInputPropTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataStringInput: React.FC<\n  PropTypes.InferProps<typeof StringInputPropTypes>\n> = ({ value, onChange, id, label }) => {\n  return (\n    <div className={`metadata-input-block ${id}`}>\n      <input value={value ?? ''} onChange={onChange} id={id} />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n\nconst NumberInputPropTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataNumberInput: React.FC<\n  PropTypes.InferProps<typeof NumberInputPropTypes>\n> = ({ value, onChange, id, label }) => {\n  return (\n    <div className={`metadata-input-block ${id}`}>\n      <input\n        value={value ?? undefined}\n        onChange={onChange}\n        id={id}\n        type={'number'}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n\nconst mapState = (state: RootState) => state.characterMetaData\n\nconst mapDispatchToProps = CharacterMetadataActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCharacterMetaData = connector(\n  ({\n    characterName,\n    setCharacterName,\n    playerName,\n    setPlayerName,\n    deity,\n    setCharacterDeity,\n    homeland,\n    setCharacterHomeland,\n    race,\n    setCharacterRace,\n    hair,\n    setCharacterHair,\n    eyes,\n    setCharacterEyes,\n    level,\n    setCharacterLevel,\n    className,\n    setCharacterClass,\n    campaign,\n    setCampaign,\n    age,\n    setCharacterAge,\n    height,\n    setCharacterHeight,\n    weight,\n    setCharacterWeight,\n    alignment,\n    setCharacterAlignment,\n    sizeCategory,\n    setCharacterSizeCategory,\n    gender,\n    setCharacterGender,\n  }: Props) => {\n    const { t } = useTranslation()\n\n    const callWithStringValue = useCallback(\n      (callback: (value: string) => any) =>\n        useCallback(\n          (event: ChangeEvent<HTMLInputElement>) =>\n            callback(event.target.value),\n          [callback],\n        ),\n      [],\n    )\n\n    const callWithNumberValue = useCallback(\n      (callback: (value: number | undefined) => any) =>\n        useCallback(\n          (event: ChangeEvent<HTMLInputElement>) => {\n            const value = parseInt(event.target.value)\n            callback(Number.isNaN(value) ? undefined : value)\n          },\n          [callback],\n        ),\n      [],\n    )\n\n    const translatedAlignmentOptions = AlignmentOptions.map(\n      (alignmentOption) => {\n        const ethics = alignmentOption.value?.ethics\n        const morality = alignmentOption.value?.morality\n\n        let newLabel =\n          t(`alignments.ethics.${ethics}.long`) +\n          ' ' +\n          t(`alignments.morality.${morality}.long`)\n\n        if (ethics === Ethics.NEUTRAL && morality === Morality.NEUTRAL) {\n          newLabel = t('alignments.neutral.long')\n        } else if (ethics === undefined && morality === undefined) {\n          newLabel = ''\n        }\n\n        return {\n          ...alignmentOption,\n          label: newLabel,\n        }\n      },\n    )\n\n    const translatedGenderOptions = GenderInputOptions.map((genderOption) => ({\n      ...genderOption,\n      label:\n        genderOption.value !== undefined\n          ? t(`genders.${genderOption.value}`)\n          : '',\n    }))\n\n    const translatedSizeOptions = SizeCategoryInputOptions.map(\n      (sizeOption) => ({\n        ...sizeOption,\n        label:\n          sizeOption.value !== undefined\n            ? t(`sizeCategories.${sizeOption.value}`)\n            : '',\n      }),\n    )\n\n    return (\n      <div className={'character-meta-data'}>\n        <MetadataStringInput\n          id={'character-name'}\n          value={characterName}\n          label={t('characterMetaData.characterName')}\n          onChange={callWithStringValue(setCharacterName)}\n        />\n        <MetadataSelect\n          onChange={setCharacterAlignment}\n          options={translatedAlignmentOptions}\n          id={'alignment'}\n          label={t('characterMetaData.alignment')}\n          value={alignment}\n          testIds={AlignmentInputTestIds}\n        />\n        <MetadataStringInput\n          id={'player-name'}\n          value={playerName}\n          label={t('characterMetaData.player')}\n          onChange={callWithStringValue(setPlayerName)}\n        />\n        <MetadataStringInput\n          id={'class-name'}\n          value={className}\n          label={t('characterMetaData.characterClass')}\n          onChange={callWithStringValue(setCharacterClass)}\n        />\n        <MetadataNumberInput\n          id={'level'}\n          value={level}\n          label={t('characterMetaData.level')}\n          onChange={callWithNumberValue(setCharacterLevel)}\n        />\n        <MetadataStringInput\n          id={'race'}\n          value={race}\n          label={t('characterMetaData.race')}\n          onChange={callWithStringValue(setCharacterRace)}\n        />\n        <MetadataStringInput\n          id={'campaign'}\n          value={campaign}\n          label={t('characterMetaData.campaign')}\n          onChange={callWithStringValue(setCampaign)}\n        />\n        <MetadataStringInput\n          id={'homeland'}\n          value={homeland}\n          label={t('characterMetaData.homeland')}\n          onChange={callWithStringValue(setCharacterHomeland)}\n        />\n        <MetadataStringInput\n          id={'deity'}\n          value={deity}\n          label={t('characterMetaData.deity')}\n          onChange={callWithStringValue(setCharacterDeity)}\n        />\n        <MetadataSelect\n          testIds={SizeCategoryInputTestIds}\n          onChange={setCharacterSizeCategory}\n          options={translatedSizeOptions}\n          id={'size-category'}\n          value={sizeCategory}\n          label={t('characterMetaData.sizeCategory')}\n        />\n        <MetadataSelect\n          testIds={GenderInputTestIds}\n          onChange={setCharacterGender}\n          options={translatedGenderOptions}\n          id={'gender'}\n          value={gender}\n          label={t('characterMetaData.gender')}\n        />\n        <MetadataNumberInput\n          id={'age'}\n          value={age}\n          label={t('characterMetaData.age')}\n          onChange={callWithNumberValue(setCharacterAge)}\n        />\n        <MetadataNumberInput\n          id={'height'}\n          value={height}\n          label={t('characterMetaData.height')}\n          onChange={callWithNumberValue(setCharacterHeight)}\n        />\n        <MetadataNumberInput\n          id={'weight'}\n          value={weight}\n          label={t('characterMetaData.weight')}\n          onChange={callWithNumberValue(setCharacterWeight)}\n        />\n        <MetadataStringInput\n          id={'hair'}\n          value={hair}\n          label={t('characterMetaData.hair')}\n          onChange={callWithStringValue(setCharacterHair)}\n        />\n        <MetadataStringInput\n          id={'eyes'}\n          value={eyes}\n          label={t('characterMetaData.eyes')}\n          onChange={callWithStringValue(setCharacterEyes)}\n        />\n      </div>\n    )\n  },\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './BoxInput.scss'\n\nexport const BoxInputPropTypes = {\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(PropTypes.string.isRequired),\n  ]).isRequired,\n  testId: PropTypes.string,\n  labelTestId: PropTypes.string,\n  hideBox: PropTypes.bool.isRequired,\n}\n\nexport const BoxInputDefaultProps = {\n  value: '',\n  hideBox: false,\n}\n\ntype PropType = PropTypes.InferProps<typeof BoxInputPropTypes> &\n  React.HTMLProps<HTMLInputElement>\n\nexport const BoxInput = (props: PropType) => {\n  const {\n    hideBox,\n    className,\n    labelTestId,\n    testId,\n    readOnly,\n    ...otherProps\n  } = props\n  return (\n    <label\n      className={`box-input ${hideBox ? 'hide-box' : ''} ${className}`}\n      data-testid={labelTestId}\n    >\n      <input\n        {...otherProps}\n        readOnly={readOnly ?? otherProps.onChange === undefined}\n        data-testid={testId}\n      />\n      {props.label ? <span className={'label'}>{props.label}</span> : null}\n    </label>\n  )\n}\n\nBoxInput.propTypes = BoxInputPropTypes\nBoxInput.defaultProps = BoxInputDefaultProps\n","import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { BoxInput, BoxInputDefaultProps, BoxInputPropTypes } from './BoxInput'\nimport { Overwrite } from '../../types/util'\n\nconst propTypes = {\n  ...BoxInputPropTypes,\n  value: PropTypes.number,\n  type: PropTypes.any,\n  onChange: PropTypes.func,\n}\n\nconst defaultProps = {\n  ...BoxInputDefaultProps,\n  type: undefined,\n  onChange: undefined,\n}\n\ntype PropTypes = Overwrite<\n  PropTypes.InferProps<typeof propTypes> & React.HTMLProps<HTMLInputElement>,\n  {\n    value?: number | null\n    onChange?: (\n      value: number | undefined,\n      evt: React.ChangeEvent<HTMLInputElement>,\n    ) => void\n  }\n>\n\nexport const BoxNumberInput = (props: PropTypes) => {\n  const changeHandlerFromProps = props.onChange\n  const changeHandler = useCallback(\n    (evt: React.ChangeEvent<HTMLInputElement>) => {\n      let valueAsNumber = parseInt(evt.target.value)\n      changeHandlerFromProps?.(\n        Number.isNaN(valueAsNumber) ? undefined : valueAsNumber,\n        evt,\n      )\n    },\n    [changeHandlerFromProps],\n  )\n\n  return (\n    <BoxInput\n      {...props}\n      value={props.value === null ? undefined : props.value}\n      onChange={changeHandler}\n      type={'number'}\n      disabled={!Boolean(props.onChange)}\n    />\n  )\n}\nBoxNumberInput.propTypes = propTypes\nBoxNumberInput.defaultProps = defaultProps\n","import React from 'react'\nimport './BlackBox.scss'\n\ntype Props = {\n  [key: string]: any\n  className?: string\n}\n\nexport const BlackBox: React.FC<Props> = (props) => {\n  const { children, className, ...propsWithoutChildren } = props\n  return (\n    <div {...propsWithoutChildren} className={`black-box ${className}`}>\n      {props.children}\n    </div>\n  )\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React from 'react'\nimport {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n} from '../../store/Abilities/actions'\nimport {\n  AbilityAttributes,\n  abilityName,\n  AbilityState,\n} from '../../store/Abilities/types'\nimport { getModifierFromScore } from '../../store/Abilities/selectors'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport './DisplayAbilities.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\nimport { useTranslation } from 'react-i18next'\n\nconst mapState = (state: RootState) => ({\n  abilities: state.abilities,\n})\n\nconst mapDispatchToProps = {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayAbilities = connector(\n  ({ abilities, setAbilityScore, setAbilityTempAdjustment }: Props) => {\n    const { t } = useTranslation()\n\n    const onScoreChange = (abilityName: keyof AbilityState) => (\n      newVal?: number,\n    ) => {\n      if (newVal !== undefined) {\n        setAbilityScore(abilityName, newVal)\n      }\n    }\n    const onTempAdjustmentChange = (abilityName: keyof AbilityState) => (\n      newVal?: number,\n    ) => {\n      if (newVal !== undefined) {\n        setAbilityTempAdjustment(abilityName, newVal)\n      }\n    }\n\n    const abilityNames = Object.keys(abilities) as Array<abilityName>\n    const abilityElements = abilityNames\n      .sort((nameA, nameB) =>\n        t(`abilities.${nameA}.short`).localeCompare(\n          t(`abilities.${nameB}.short`),\n        ),\n      )\n      .map((abilityName) => {\n        const abilityAttributes: AbilityAttributes = abilities[abilityName]\n\n        return (\n          <tr key={abilityName}>\n            <td>\n              <BlackBox>\n                {t(`abilities.${abilityName}.short`)}\n                <aside>{t(`abilities.${abilityName}.long`)}</aside>\n              </BlackBox>\n            </td>\n            <td>\n              <BoxNumberInput\n                value={abilityAttributes.score}\n                onChange={onScoreChange(abilityName)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={getModifierFromScore(abilityAttributes.score)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={abilityAttributes.temporaryAdjustment || null}\n                onChange={onTempAdjustmentChange(abilityName)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={\n                  abilityAttributes.temporaryAdjustment\n                    ? getModifierFromScore(\n                        abilityAttributes.score +\n                          abilityAttributes.temporaryAdjustment,\n                      )\n                    : null\n                }\n              />\n            </td>\n          </tr>\n        )\n      })\n    return (\n      <table className={'abilities'}>\n        <thead>\n          <tr>\n            <td>{t('abilitiesTable.abilityName')}</td>\n            <td>{t('abilitiesTable.score')}</td>\n            <td>{t('abilitiesTable.modifier')}</td>\n            <td>{t('abilitiesTable.tempAdjustment')}</td>\n            <td>{t('abilitiesTable.tempModifier')}</td>\n          </tr>\n        </thead>\n        <tbody>{abilityElements}</tbody>\n      </table>\n    )\n  },\n)\n","import {\n  abilityName,\n  SET_ABILITY_SCORE,\n  SET_ABILITY_TEMP_ADJUSTMENT,\n  SetAbilityScoreAction,\n  SetAbilityTempAdjustmentAction,\n} from './types'\n\nexport const setAbilityScore = (\n  ability: abilityName,\n  newScore: number,\n): SetAbilityScoreAction => {\n  return {\n    type: SET_ABILITY_SCORE,\n    ability: ability,\n    score: newScore,\n  }\n}\n\nexport const setAbilityTempAdjustment = (\n  ability: abilityName,\n  newAdjustment: number,\n): SetAbilityTempAdjustmentAction => {\n  return {\n    type: SET_ABILITY_TEMP_ADJUSTMENT,\n    ability: ability,\n    adjustment: newAdjustment,\n  }\n}\n","export type abilityName =\n  | 'strength'\n  | 'dexterity'\n  | 'constitution'\n  | 'intelligence'\n  | 'wisdom'\n  | 'charisma'\n\nexport type AbilityAttributes = {\n  score: number\n  temporaryAdjustment: number\n}\n\nexport type AbilityState = {\n  [k in abilityName]: AbilityAttributes\n}\n\nexport const SET_ABILITY_SCORE = 'SET_ABILITY_SCORE'\nexport const SET_ABILITY_TEMP_ADJUSTMENT = 'SET_ABILITY_TEMP_ADJUSTMENT'\n\nexport type SetAbilityScoreAction = {\n  type: typeof SET_ABILITY_SCORE\n  ability: keyof AbilityState\n  score: number\n}\n\nexport type SetAbilityTempAdjustmentAction = {\n  type: typeof SET_ABILITY_TEMP_ADJUSTMENT\n  ability: keyof AbilityState\n  adjustment: number\n}\n\nexport type AbilitiesActionTypes =\n  | SetAbilityTempAdjustmentAction\n  | SetAbilityScoreAction\n","import {\n  SkillName,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n  UpdateSkillActionTypes,\n} from './types'\n\nexport const setSkillRanks = (\n  skillName: SkillName,\n  ranks: number,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_RANKS,\n    payload: {\n      skillName,\n      ranks,\n    },\n  }\n}\n\nexport const setSkillMiscMod = (\n  skillName: SkillName,\n  miscModifier: number,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_MISC_MODIFIER,\n    payload: {\n      skillName,\n      miscModifier,\n    },\n  }\n}\n\nexport const setIsSkillClassSkill = (\n  skillName: SkillName,\n  isClassSkill: boolean,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_IS_CLASS_SKILL,\n    payload: {\n      skillName,\n      isClassSkill,\n    },\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './StyledCheckbox.scss'\n\nconst propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool.isRequired,\n}\n\nexport const StyledCheckbox = (\n  props: PropTypes.InferProps<typeof propTypes>,\n) => {\n  return (\n    <input\n      className={`styled-checkbox ${props.className}`}\n      type={'checkbox'}\n      checked={props.checked ?? false}\n      onChange={props.onChange!}\n      disabled={props.disabled}\n    />\n  )\n}\n\nStyledCheckbox.propTypes = propTypes\nStyledCheckbox.defaultProps = {\n  checked: false,\n  className: '',\n  onChange: () => {},\n  disabled: false,\n}\n","import { RootState } from '../root-reducer'\n\nexport const getWeapons = (state: RootState) => state.inventory.weapons\n\nexport const getGear = (state: RootState) => state.inventory.gear\n\nexport const getArmor = (state: RootState) => state.inventory.armor\n\nexport const getTotalArmorItemBonus = (state: RootState) =>\n  state.inventory.armor.reduce(\n    (sum, { armorBonus }) => sum + (armorBonus ?? 0),\n    0,\n  )\n\nexport const getTotalArmorCheckPenalty = (state: RootState) =>\n  state.inventory.armor.reduce(\n    (sum, { checkPenalty }) => sum + (checkPenalty ?? 0),\n    0,\n  )\n\nexport const getTotalArmorSpellFailure = (state: RootState) =>\n  state.inventory.armor.reduce(\n    (sum, { spellFailure }) => sum + (spellFailure ?? 0),\n    0,\n  )\n\nexport const getTotalArmorWeight = (state: RootState) =>\n  state.inventory.armor.reduce((sum, { weight }) => sum + (weight ?? 0), 0)\n","import { quickSkillDefinitions, Skill, SkillState } from './types'\nimport { createSelector } from 'reselect'\nimport { getAbilityModifiers } from '../Abilities/selectors'\nimport { abilityName } from '../Abilities/types'\nimport { RootState } from '../root-reducer'\nimport { getTotalArmorCheckPenalty } from '../Inventory/getters'\n\nexport const getSkills = (state: RootState) => state.skills\nexport type TotalSkillBonuses = {\n  [k in keyof SkillState]: number\n}\n\nexport const computeTotalSkillBonus = (\n  skill: Skill,\n  abilityModifier: number,\n): number => {\n  return (\n    abilityModifier +\n    skill.ranks +\n    skill.miscModifier +\n    (skill.isClassSkill && skill.ranks >= 1 ? 3 : 0)\n  )\n}\n\nexport const getTotalSkillBonuses = createSelector(\n  [getSkills, getAbilityModifiers, getTotalArmorCheckPenalty],\n  (skills, abilityModifiers, totalCheckPenalty) => {\n    const skillNames = Object.keys(skills) as Array<keyof SkillState>\n    return skillNames.reduce((totalSkillsBonuses, currSkillName) => {\n      const baseAbilityName = quickSkillDefinitions[currSkillName]\n        .baseAbility as abilityName\n\n      let abilityModifier = abilityModifiers[baseAbilityName]\n\n      // Certain armor items can add a penalty to STR and DEX checks\n      // See German pathfinder documentation:\n      // http://prd.5footstep.de/Grundregelwerk/Ausruestung/Ruestungen/Ruestungseigenschaften\n      if (baseAbilityName === 'strength' || baseAbilityName === 'dexterity') {\n        abilityModifier -= totalCheckPenalty\n      }\n\n      return {\n        ...totalSkillsBonuses,\n        [currSkillName]: computeTotalSkillBonus(\n          skills[currSkillName],\n          abilityModifier,\n        ),\n      }\n    }, {} as TotalSkillBonuses)\n  },\n)\n","import React, { useMemo } from 'react'\nimport './invertedBorderRadius.scss'\n\nexport const InvertedBorderRadius: React.FC<\n  React.HTMLProps<HTMLDivElement> & {\n    fillCorners?: {\n      'top-left'?: boolean\n      'bottom-left'?: boolean\n      'top-right'?: boolean\n      'bottom-right'?: boolean\n    }\n    enableHalfHeightBorders?: boolean\n  }\n> = (\n  props = {\n    className: '',\n    style: {},\n  },\n) => {\n  const filledCornersClasses = useMemo(() => {\n    const keys = Object.keys(props.fillCorners ?? {}) as Array<\n      keyof typeof props['fillCorners']\n    >\n    return keys\n      .filter((key) => props.fillCorners?.[key] === true)\n      .map((cornerName) => `fill-${cornerName}`)\n      .join(' ')\n  }, [props.fillCorners])\n\n  return (\n    <div\n      className={`inverted-rounded-corners ${filledCornersClasses} ${\n        props.className ?? ''\n      } ${props.enableHalfHeightBorders ? 'half-height-borders' : ''}`}\n      style={{\n        ...(props.style ?? {}),\n      }}\n    >\n      <div className={'corners'}>\n        <div className={'corner-container left'} />\n        <div className={'corner-container right'} />\n      </div>\n      <div className={'content'}>{props.children}</div>\n    </div>\n  )\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent } from 'react'\nimport {\n  quickSkillDefinitions,\n  Skill,\n  SkillName,\n} from '../../store/Skills/types'\nimport * as UpdateSkillsActions from '../../store/Skills/actions'\n\nimport './DisplaySkills.scss'\nimport { StyledCheckbox } from '../util/StyledCheckbox/StyledCheckbox'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getTotalSkillBonuses } from '../../store/Skills/selectors'\nimport { useTranslation } from 'react-i18next'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\n\nconst mapState = (state: RootState) => ({\n  skills: state.skills,\n  abilityModifiers: getAbilityModifiers(state),\n  totalSkillBonuses: getTotalSkillBonuses(state),\n})\n\nconst mapDispatchToProps = UpdateSkillsActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplaySkills = connector(\n  ({\n    skills,\n    setIsSkillClassSkill,\n    setSkillMiscMod,\n    setSkillRanks,\n    abilityModifiers,\n    totalSkillBonuses,\n  }: Props) => {\n    const { t } = useTranslation()\n    const onSkillRanksChange = (skillName: SkillName) => (\n      event: ChangeEvent<HTMLInputElement>,\n    ) => {\n      setSkillRanks(skillName, parseInt(event.target.value))\n    }\n\n    const onSkillMiscModChange = (skillName: SkillName) => (\n      event: ChangeEvent<HTMLInputElement>,\n    ) => {\n      setSkillMiscMod(skillName, parseInt(event.target.value))\n    }\n\n    return (\n      <div className={'skills'}>\n        <InvertedBorderRadius className={'title'}>\n          {t('skillsTable.title')}\n        </InvertedBorderRadius>\n        <div className={'skills-table'}>\n          <span className={'header skill-name'}>\n            {t('skillsTable.skillName')}\n          </span>\n          <span className={'header'}>\n            {t('general.total')} {t('general.bonus')}\n          </span>\n          <span className={'header'}> {/* Base ability name */} </span>\n          <span className={'header'}>\n            {t('general.ability.short')}.-{t('general.modifier.short')}.\n          </span>\n          <span className={'header'}> {/* + */} </span>\n          <span className={'header'}>{t('skillsTable.ranks')}</span>\n          <span className={'header'}> {/* + */} </span>\n          <span className={'header'}>\n            {t('general.misc.short')}. {t('general.modifier.short')}.\n          </span>\n          {(Object.entries(skills) as Array<[SkillName, Skill]>)\n            .sort(([skillA], [skillB]) =>\n              t(`skills.${skillA}`).localeCompare(t(`skills.${skillB}`)),\n            )\n            .map(([skillName, skill], index) => {\n              const {\n                baseAbility: abilityName,\n                isTrainedOnly,\n              } = quickSkillDefinitions[skillName]\n              return (\n                <React.Fragment key={index}>\n                  <label className={'skill-name'}>\n                    <StyledCheckbox\n                      checked={skill.isClassSkill}\n                      onChange={() =>\n                        setIsSkillClassSkill(skillName, !skill.isClassSkill)\n                      }\n                    />\n                    {t(`skills.${skillName}`)}\n                    {isTrainedOnly ? ' *' : ''}\n                  </label>\n                  <span>{totalSkillBonuses[skillName]}</span>\n                  <span className={'base-ability-name'}>\n                    ={t(`abilities.${abilityName}.short`)}\n                  </span>\n                  <span>{abilityModifiers[abilityName]}</span>\n                  <span>+</span>\n                  <input\n                    type={'number'}\n                    value={skill.ranks}\n                    onChange={onSkillRanksChange(skillName)}\n                  />\n                  <span>+</span>\n                  <input\n                    type={'number'}\n                    value={skill.miscModifier}\n                    onChange={onSkillMiscModChange(skillName)}\n                  />\n                </React.Fragment>\n              )\n            })}\n          <div className={'legend'}>\n            <StyledCheckbox checked={true} disabled />\n            {t('skillsTable.classSkill')} &nbsp; &nbsp; *{' '}\n            {t('skillsTable.trainedOnly')}\n          </div>\n        </div>\n      </div>\n    )\n  },\n)\n","import {\n  SavingThrowsState,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  SetBaseAttackBonusAction,\n  SetBaseSaveAction,\n  SetDeflectionModifierAction,\n  SetInitiativeMiscModifierAction,\n  SetMiscArmorModifierAction,\n  SetMiscSavingThrowModifierAction,\n  SetNaturalArmorAction,\n  SetOtherArmorModifiersAction,\n  SetSavingThrowMagicModifierAction,\n  SetShieldBonusAction,\n  SetSpellResistanceAction,\n  SetTemporarySavingThrowModifierAction,\n} from './types'\n\nexport const setBaseSave = (\n  newBaseSave: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetBaseSaveAction => ({\n  type: SET_BASE_SAVE,\n  payload: { savingThrowType, newBaseSave },\n})\n\nexport const setSavingThrowMagicModifier = (\n  newMagicModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetSavingThrowMagicModifierAction => ({\n  type: SET_SAVING_THROW_MAGIC_MODIFIER,\n  payload: {\n    savingThrowType,\n    newMagicModifier,\n  },\n})\n\nexport const setMiscSavingThrowModifier = (\n  newMiscModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetMiscSavingThrowModifierAction => ({\n  type: SET_MISC_SAVING_THROW_MODIFIER,\n  payload: {\n    savingThrowType,\n    newMiscModifier,\n  },\n})\n\nexport const setTemporarySavingThrowModifier = (\n  newTemporaryModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetTemporarySavingThrowModifierAction => ({\n  type: SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  payload: {\n    newTemporaryModifier,\n    savingThrowType,\n  },\n})\n\nexport const setInitiativeMiscModifier = (\n  newMiscModifier: number,\n): SetInitiativeMiscModifierAction => ({\n  type: SET_INITIATIVE_MISC_MODIFIER,\n  payload: newMiscModifier,\n})\n\nexport const setBaseAttackBonus = (\n  newBaseAttackBonus: number,\n): SetBaseAttackBonusAction => ({\n  type: SET_BASE_ATTACK_BONUS,\n  payload: newBaseAttackBonus,\n})\n\nexport const setSpellResistance = (\n  newSpellResistance: number,\n): SetSpellResistanceAction => ({\n  type: SET_SPELL_RESISTANCE,\n  payload: newSpellResistance,\n})\n\nexport const setShieldBonus = (\n  newShieldBonus: number,\n): SetShieldBonusAction => ({\n  type: SET_SHIELD_BONUS,\n  payload: newShieldBonus,\n})\n\nexport const setDeflectionModifier = (\n  newDeflectionModifier: number,\n): SetDeflectionModifierAction => ({\n  type: SET_DEFLECTION_MODIFIER,\n  payload: newDeflectionModifier,\n})\n\nexport const setMiscArmorModifier = (\n  newMiscArmorModifier: number,\n): SetMiscArmorModifierAction => ({\n  type: SET_MISC_ARMOR_MODIFIER,\n  payload: newMiscArmorModifier,\n})\n\nexport const setNaturalArmor = (\n  newNaturalArmor: number,\n): SetNaturalArmorAction => ({\n  type: SET_NATURAL_ARMOR,\n  payload: newNaturalArmor,\n})\n\nexport const setOtherArmorModifiers = (\n  newOtherArmorModifiers: string,\n): SetOtherArmorModifiersAction => ({\n  type: SET_OTHER_ARMOR_MODIFIERS,\n  payload: newOtherArmorModifiers,\n})\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\n\nexport const getCharacterMetadata = (state: RootState) =>\n  state.characterMetaData\n\nexport const getSizeModifier = createSelector(\n  [getCharacterMetadata],\n  (characterMetadataState: CharacterMetaDataState) => {\n    switch (characterMetadataState.sizeCategory) {\n      case SizeCategory.LARGE:\n        return -1\n      case SizeCategory.MEDIUM:\n        return 0\n      case SizeCategory.SMALL:\n        return 1\n      default:\n        return NaN\n    }\n  },\n)\n","import { CombatValuesState } from './types'\nimport { AbilityModifiers, getAbilityModifiers } from '../Abilities/selectors'\nimport { getSizeModifier } from '../CharacterMetaData/selectors'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\nimport { getTotalArmorItemBonus } from '../Inventory/getters'\n\nexport const getCombatValues = (state: RootState) => state.combatValues\n\nexport const getTotalInitiativeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) =>\n    state.initiative.miscModifier + abilityModifiers.dexterity,\n)\n\nexport const getArmorClass = createSelector(\n  [\n    getCombatValues,\n    getAbilityModifiers,\n    getSizeModifier,\n    getTotalArmorItemBonus,\n  ],\n  (state, abilityModifiers, sizeModifier, totalArmorItemBonus) =>\n    10 +\n    totalArmorItemBonus +\n    state.armorClass.shieldBonus +\n    abilityModifiers.dexterity +\n    sizeModifier +\n    state.armorClass.naturalArmor +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getTouchArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 +\n    abilityModifiers.dexterity +\n    sizeModifier +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFlatFootedArmorClass = createSelector(\n  [\n    getCombatValues,\n    getAbilityModifiers,\n    getSizeModifier,\n    getTotalArmorItemBonus,\n  ],\n  (state, abilityModifiers, sizeModifier, totalArmorItemBonus) =>\n    10 +\n    totalArmorItemBonus +\n    state.armorClass.shieldBonus +\n    Math.min(0, abilityModifiers.dexterity) +\n    sizeModifier +\n    state.armorClass.naturalArmor +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFortitudeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.fortitude\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.constitution +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getReflexBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.reflex\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.dexterity +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getWillBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.will\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.wisdom +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getCombatManeuverBonus = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    state.attackBonuses.baseAttackBonus +\n    abilityModifiers.strength -\n    sizeModifier,\n)\n\nexport const getCombatManeuverDefense = createSelector(\n  [getCombatManeuverBonus, getAbilityModifiers],\n  (combatManeuverBonus: number, abilityModifiers: AbilityModifiers) =>\n    combatManeuverBonus + abilityModifiers.dexterity + 10,\n)\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport * as CombatValueActions from '../../store/CombatValues/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport {\n  getArmorClass,\n  getCombatManeuverBonus,\n  getCombatManeuverDefense,\n  getCombatValues,\n  getFlatFootedArmorClass,\n  getFortitudeBonus,\n  getReflexBonus,\n  getTotalInitiativeBonus,\n  getTouchArmorClass,\n  getWillBonus,\n} from '../../store/CombatValues/selectors'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getSizeModifier } from '../../store/CharacterMetaData/selectors'\nimport { SavingThrowsState } from '../../store/CombatValues/types'\nimport { abilityName } from '../../store/Abilities/types'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport './DisplayCombatValues.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\nimport { useTranslation } from 'react-i18next'\nimport { getTotalArmorItemBonus } from '../../store/Inventory/getters'\n\nconst callIfDefined: <T>(\n  callback: (param: T) => void,\n) => (param?: T) => void = (callback) => {\n  return (param) => {\n    if (param !== undefined) {\n      callback(param)\n    }\n  }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  combatValues: getCombatValues(state),\n  totalInitiativeBonus: getTotalInitiativeBonus(state),\n  abilityModifiers: getAbilityModifiers(state),\n  totalArmorClass: getArmorClass(state),\n  sizeModifier: getSizeModifier(state),\n  touchArmorClass: getTouchArmorClass(state),\n  flatFootedArmorClass: getFlatFootedArmorClass(state),\n  fortitudeBonus: getFortitudeBonus(state),\n  reflexBonus: getReflexBonus(state),\n  willBonus: getWillBonus(state),\n  combatManeuverBonus: getCombatManeuverBonus(state),\n  combatManeuverDefense: getCombatManeuverDefense(state),\n  armorBonus: getTotalArmorItemBonus(state),\n})\nconst mapDispatchToProps = CombatValueActions\nconst connector = connect(mapStateToProps, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCombatValues = connector(\n  ({\n    combatValues,\n    setInitiativeMiscModifier,\n    totalInitiativeBonus,\n    abilityModifiers,\n    totalArmorClass,\n    setShieldBonus,\n    setNaturalArmor,\n    setDeflectionModifier,\n    setMiscArmorModifier,\n    sizeModifier,\n    touchArmorClass,\n    flatFootedArmorClass,\n    fortitudeBonus,\n    reflexBonus,\n    willBonus,\n    armorBonus,\n    combatManeuverBonus,\n    combatManeuverDefense,\n    setBaseSave,\n    setSavingThrowMagicModifier,\n    setMiscSavingThrowModifier,\n    setTemporarySavingThrowModifier,\n    setBaseAttackBonus,\n    setSpellResistance,\n  }: Props) => {\n    const { t } = useTranslation()\n    const setForCertainSavingThrow = useCallback(\n      (\n        savingThrowName: keyof SavingThrowsState,\n        setter: (val: number, savingThrowName: keyof SavingThrowsState) => void,\n      ) =>\n        useCallback(\n          (newValue?: number) => {\n            if (newValue !== undefined) {\n              setter(newValue, savingThrowName)\n            }\n          },\n          [savingThrowName, setter],\n        ),\n      [],\n    )\n\n    return (\n      <>\n        <div className={'initiative'} data-testid={'initiative-container'}>\n          <BlackBox>\n            {t('combatValues.initiative.long')}\n            <aside>{t('general.modifier.long')}</aside>\n          </BlackBox>\n          <BoxNumberInput\n            value={totalInitiativeBonus}\n            label={t('general.total')}\n            testId={'initiative-total-bonus'}\n          />\n          =\n          <BoxNumberInput\n            value={abilityModifiers.dexterity}\n            label={`${t('abilities.dexterity.short')}. ${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'initiative-dexterity-modifier'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setInitiativeMiscModifier)}\n            value={combatValues.initiative.miscModifier}\n            label={`${t('general.misc.short')}. ${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'initiative-misc-modifier'}\n          />\n        </div>\n        <div className={'combat-values-wrapper'}>\n          <div className={'armor-class'}>\n            <BlackBox>\n              {t('combatValues.armorClass.short')}\n              <aside>{t('combatValues.armorClass.long')}</aside>\n            </BlackBox>\n            <BoxNumberInput\n              value={totalArmorClass}\n              testId={'total-armor-class'}\n            />\n            =\n            <BoxNumberInput\n              value={10}\n              testId={'armor-class-general-bonus'}\n              hideBox={true}\n              readOnly\n            />\n            +\n            <BoxNumberInput\n              value={armorBonus}\n              readOnly\n              label={`${t('combatValues.armorBonus')}-${t('general.bonus')}`}\n              testId={'armor-class-armor-bonus'}\n            />\n            +\n            <BoxNumberInput\n              onChange={callIfDefined(setShieldBonus)}\n              value={combatValues.armorClass.shieldBonus}\n              label={`${t('combatValues.shield')}-${t('general.bonus')}`}\n              testId={'armor-class-shield-bonus'}\n            />\n            +\n            <BoxNumberInput\n              value={abilityModifiers.dexterity}\n              label={`${t('abilities.dexterity.short')}-${t(\n                'general.modifier.short',\n              )}.`}\n              testId={'armor-class-dexterity-mod'}\n            />\n            +\n            <BoxNumberInput\n              value={sizeModifier}\n              label={`${t('combatValues.sizeModifier')}-${t(\n                'general.modifier.short',\n              )}.`}\n              testId={'armor-class-size-modifier'}\n            />\n            +\n            <BoxNumberInput\n              onChange={callIfDefined(setNaturalArmor)}\n              value={combatValues.armorClass.naturalArmor}\n              label={t('combatValues.naturalArmor')}\n              testId={'armor-class-natural-armor'}\n            />\n            +\n            <BoxNumberInput\n              onChange={callIfDefined(setDeflectionModifier)}\n              value={combatValues.armorClass.deflectionModifier}\n              label={`${t('combatValues.deflectionModifier')}.-${t(\n                'general.modifier.short',\n              )}.`}\n              testId={'armor-class-deflection-modifier'}\n            />\n            +\n            <BoxNumberInput\n              onChange={callIfDefined(setMiscArmorModifier)}\n              value={combatValues.armorClass.miscModifier}\n              label={`${t('general.misc.short')}.-${t(\n                'general.modifier.short',\n              )}.`}\n              testId={'armor-class-misc-modifier'}\n            />\n          </div>\n          <div className={'touch-armor-class'}>\n            <BlackBox>\n              {t('combatValues.touch')}\n              <aside>{t('combatValues.armorClass.long')}</aside>\n            </BlackBox>\n            <BoxNumberInput\n              value={touchArmorClass}\n              testId={'touch-armor-class'}\n            />\n          </div>\n          <div className={'flat-footed-armor-class'}>\n            <BlackBox>\n              {t('combatValues.flatFooted')}\n              <aside>{t('combatValues.armorClass.long')}</aside>\n            </BlackBox>\n            <BoxNumberInput\n              value={flatFootedArmorClass}\n              testId={'flat-footed-class'}\n            />\n          </div>\n          <div className={'saving-throws'}>\n            {(Object.keys(combatValues.savingThrows) as Array<\n              keyof SavingThrowsState\n            >)\n              .sort((nameA, nameB) =>\n                t(`combatValues.savingThrows.${nameA}`).localeCompare(\n                  t(`combatValues.savingThrows.${nameB}`),\n                ),\n              )\n              .map((savingThrowName, index) => {\n                const savingThrow = combatValues.savingThrows[savingThrowName]\n                let baseAbilityName: abilityName\n                let savingThrowBonus: number\n\n                switch (savingThrowName) {\n                  case 'fortitude':\n                    baseAbilityName = 'constitution'\n                    savingThrowBonus = fortitudeBonus\n                    break\n                  case 'reflex':\n                    baseAbilityName = 'dexterity'\n                    savingThrowBonus = reflexBonus\n                    break\n                  case 'will':\n                    savingThrowBonus = willBonus\n                    baseAbilityName = 'wisdom'\n                    break\n                }\n\n                const abilityModifier = abilityModifiers[baseAbilityName]\n\n                return (\n                  <React.Fragment key={index}>\n                    <BlackBox>\n                      {t(`combatValues.savingThrows.${savingThrowName}`)}\n                      <aside>({t(`abilities.${baseAbilityName}.long`)})</aside>\n                    </BlackBox>\n                    <BoxNumberInput value={savingThrowBonus} />\n                    =\n                    <BoxNumberInput\n                      value={savingThrow.baseSave}\n                      onChange={setForCertainSavingThrow(\n                        savingThrowName,\n                        setBaseSave,\n                      )}\n                    />\n                    +\n                    <BoxNumberInput value={abilityModifier} />\n                    +\n                    <BoxNumberInput\n                      value={savingThrow.magicModifier}\n                      onChange={setForCertainSavingThrow(\n                        savingThrowName,\n                        setSavingThrowMagicModifier,\n                      )}\n                    />\n                    +\n                    <BoxNumberInput\n                      value={savingThrow.miscModifier}\n                      onChange={setForCertainSavingThrow(\n                        savingThrowName,\n                        setMiscSavingThrowModifier,\n                      )}\n                    />\n                    +\n                    <BoxNumberInput\n                      value={savingThrow.temporaryModifier}\n                      onChange={setForCertainSavingThrow(\n                        savingThrowName,\n                        setTemporarySavingThrowModifier,\n                      )}\n                    />\n                  </React.Fragment>\n                )\n              })}\n          </div>\n          <label className={'base-attack-bonus'}>\n            <InvertedBorderRadius>\n              {t('combatValues.baseAttackBonus.long')}\n            </InvertedBorderRadius>\n            <BoxNumberInput\n              value={combatValues.attackBonuses.baseAttackBonus}\n              onChange={callIfDefined(setBaseAttackBonus)}\n            />\n          </label>\n          <label className={'spell-resistance'}>\n            <BlackBox>{t('combatValues.spellResistance')}</BlackBox>\n            <BoxNumberInput\n              value={combatValues.attackBonuses.spellResistance}\n              onChange={callIfDefined(setSpellResistance)}\n            />\n          </label>\n          <div className={'combat-values'}>\n            <div className={'combat-bonus'}>\n              <InvertedBorderRadius>\n                {t('combatValues.combatManeuverBonus.short')}\n              </InvertedBorderRadius>\n              <BoxNumberInput\n                value={combatManeuverBonus}\n                label={t('general.total')}\n              />\n              =\n              <BoxNumberInput\n                value={combatValues.attackBonuses.baseAttackBonus}\n                label={t('combatValues.baseAttackBonus.short')}\n              />\n              +\n              <BoxNumberInput\n                value={abilityModifiers.strength}\n                label={`${t('abilities.strength.short')}.-${t(\n                  'general.modifier.short',\n                )}.`}\n              />\n              +\n              <BoxNumberInput\n                value={-sizeModifier}\n                label={`${t('combatValues.sizeModifier')}-${t(\n                  'general.modifier.short',\n                )}.`}\n              />\n            </div>\n            <div className={'combat-defense'}>\n              <InvertedBorderRadius>\n                {t('combatValues.combatManeuverDefense.short')}\n              </InvertedBorderRadius>\n              <BoxNumberInput\n                value={combatManeuverDefense}\n                label={t('general.total')}\n              />\n              =\n              <BoxNumberInput\n                value={combatValues.attackBonuses.baseAttackBonus}\n                label={t('combatValues.baseAttackBonus.short')}\n              />\n              +\n              <BoxNumberInput\n                value={abilityModifiers.strength}\n                label={`${t('abilities.strength.short')}.-${t(\n                  'general.modifier.short',\n                )}.`}\n              />\n              +\n              <BoxNumberInput\n                value={abilityModifiers.dexterity}\n                label={`${t('abilities.dexterity.short')}.-${t(\n                  'general.modifier.short',\n                )}.`}\n              />\n              +\n              <BoxNumberInput\n                value={-sizeModifier}\n                label={`${t('combatValues.sizeModifier')}-${t(\n                  'general.modifier.short',\n                )}.`}\n              />\n              +\n              <BoxNumberInput value={10} hideBox={true} />\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  },\n)\n","import { RootState } from '../root-reducer'\n\nexport const getLanguage = (state: RootState) => state.appState.lang\n","import React from 'react'\nimport { RootState } from '../store/root-reducer'\nimport { getLanguage } from '../store/AppState/selectors'\nimport { setLanguage } from '../store/AppState/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport 'flag-icon-css/sass/flag-icon.scss'\nimport './LanguageSwitcher.scss'\n\nconst mapState = (state: RootState) => ({\n  language: getLanguage(state),\n})\n\nconst mapDispatchToProps = {\n  setLanguage,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const LanguageSwitcher = connector(({ setLanguage }: Props) => {\n  return (\n    <div className={'language-switcher'}>\n      <span\n        className={'flag-icon flag-icon-de'}\n        onClick={() => setLanguage('de')}\n      />\n      <span\n        className={'flag-icon flag-icon-us'}\n        onClick={() => setLanguage('en')}\n      />\n    </div>\n  )\n})\n","import { AppState, SET_LANGUAGE, SetLanguageAction } from './types'\n\nexport const setLanguage = (\n  newLanguage: AppState['lang'],\n): SetLanguageAction => ({\n  type: SET_LANGUAGE,\n  language: newLanguage,\n})\n","import { TranslationResource } from './i18nSetup'\nimport { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\n\nexport const en: TranslationResource = {\n  translation: {\n    general: {\n      modifier: {\n        short: 'Mod',\n        long: 'Modifier',\n      },\n      misc: {\n        short: 'Misc',\n        long: 'Miscellaneous',\n      },\n      ability: {\n        short: 'Abil',\n        long: 'Ability',\n      },\n      total: 'Total',\n      bonus: 'Bonus',\n      characterSheet: 'Character sheet',\n      logo: 'Pathfinder Logo',\n    },\n    abilities: {\n      charisma: {\n        short: 'CHA',\n        long: 'charisma',\n      },\n      constitution: {\n        short: 'CON',\n        long: 'constitution',\n      },\n      dexterity: {\n        short: 'DEX',\n        long: 'dexterity',\n      },\n      intelligence: {\n        short: 'INT',\n        long: 'intelligence',\n      },\n      strength: {\n        short: 'STR',\n        long: 'strength',\n      },\n      wisdom: {\n        short: 'WIS',\n        long: 'wisdom',\n      },\n    },\n    abilitiesTable: {\n      abilityName: 'Ability name',\n      score: 'Score',\n      modifier: 'Mod.',\n      tempAdjustment: 'Temp. Adjustment',\n      tempModifier: 'Temp. Mod.',\n    },\n    skills: {\n      acrobatics: 'acrobatics',\n      appraise: 'appraise',\n      bluff: 'bluff',\n      climb: 'climb',\n      craft: 'craft',\n      diplomacy: 'diplomacy',\n      disableDevice: 'disable Device',\n      disguise: 'disguise',\n      escapeArtist: 'escape artist',\n      fly: 'fly',\n      handleAnimal: 'handle animal',\n      heal: 'heal',\n      intimidate: 'intimidate',\n      knowledgeArcana: 'knowledge arcana',\n      knowledgeDungeoneering: 'knowledge dungeoneering',\n      knowledgeEngineering: 'knowledge engineering',\n      knowledgeGeography: 'knowledge geography',\n      knowledgeHistory: 'knowledge history',\n      knowledgeLocal: 'knowledge local',\n      knowledgeNature: 'knowledge nature',\n      knowledgeNobility: 'knowledge nobility',\n      knowledgePlanes: 'knowledge planes',\n      knowledgeReligion: 'knowledge religion',\n      linguistics: 'linguistics',\n      perception: 'perception',\n      perform: 'perform',\n      profession: 'profession',\n      ride: 'ride',\n      senseMotive: 'sense motive',\n      sleightOfHand: 'sleight of hand',\n      spellcraft: 'spellcraft',\n      stealth: 'stealth',\n      survival: 'survival',\n      swim: 'swim',\n      useMagicDevice: 'use magic device',\n    },\n    skillsTable: {\n      title: 'Skills',\n      ranks: 'Ranks',\n      skillName: 'Skill names',\n      classSkill: 'Class skill',\n      trainedOnly: 'Trained only',\n    },\n    combatValues: {\n      savingThrows: {\n        fortitude: 'fortitude',\n        reflex: 'reflex',\n        will: 'will',\n      },\n      initiative: {\n        short: 'INI',\n        long: 'Initiative',\n      },\n      armorClass: {\n        short: 'AC',\n        long: 'Armor class',\n      },\n      armorBonus: 'Armor',\n      shield: 'Shield',\n      sizeModifier: 'Size',\n      naturalArmor: 'Natural armor',\n      deflectionModifier: 'Deflection',\n      flatFooted: 'Flat-footed',\n      touch: 'Touch',\n      baseAttackBonus: {\n        short: 'BAB',\n        long: 'Base attack bonus',\n      },\n      spellResistance: 'Spell resistance',\n      combatManeuverBonus: {\n        short: 'CMB',\n        long: 'Combat Maneuver Bonus',\n      },\n      combatManeuverDefense: {\n        short: 'CMD',\n        long: 'Combat Maneuver Defense',\n      },\n    },\n    alignments: {\n      ethics: {\n        [Ethics.LAW]: {\n          long: 'Lawful',\n          short: 'L',\n        },\n        [Ethics.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Ethics.CHAOS]: {\n          long: 'Chaos',\n          short: 'C',\n        },\n      },\n      morality: {\n        [Morality.GOOD]: {\n          long: 'Good',\n          short: 'G',\n        },\n        [Morality.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Morality.BAD]: {\n          long: 'Bad',\n          short: 'B',\n        },\n      },\n      neutral: {\n        long: 'Neutral',\n        short: 'N',\n      },\n    },\n    genders: {\n      [CharacterGender.MALE]: 'Male',\n      [CharacterGender.FEMALE]: 'Female',\n      [CharacterGender.OTHER]: 'Other',\n    },\n    sizeCategories: {\n      [SizeCategory.SMALL]: 'Small',\n      [SizeCategory.MEDIUM]: 'Normal',\n      [SizeCategory.LARGE]: 'Large',\n    },\n    characterMetaData: {\n      characterName: 'character name',\n      alignment: 'alignment',\n      player: 'player',\n      characterClass: 'character class',\n      level: 'level',\n      race: 'race',\n      campaign: 'campaign',\n      homeland: 'homeland',\n      deity: 'deity',\n      sizeCategory: 'size category',\n      gender: 'gender',\n      age: 'age',\n      height: 'height',\n      weight: 'weight',\n      hair: 'hair',\n      eyes: 'eyes',\n    },\n    talents: {\n      title: 'Talents',\n    },\n    specialAbilities: {\n      title: 'Besondere Fähigkeiten',\n    },\n    inventory: {\n      weapons: {\n        title: 'Weapon',\n        attackBonus: 'Attack bonus',\n        criticalHit: 'Critical hit',\n        multiplier: 'Multiplier',\n        minDieValue: 'Min. die value',\n        type: {\n          title: 'Type',\n          bludgeoning: {\n            long: 'Bludgeoning',\n            short: 'B',\n          },\n          piercing: {\n            long: 'Piercing',\n            short: 'P',\n          },\n          slashing: {\n            long: 'Slashing',\n            short: 'S',\n          },\n        },\n        range: 'Range',\n        ammunition: 'Ammunition',\n        damage: 'Damage',\n      },\n      gear: {\n        title: 'Gear',\n        item: 'Item',\n        weight: 'WT.',\n        totalWeight: 'Total weight',\n      },\n      armor: {\n        title: 'AC Items',\n        bonus: 'Bonus',\n        type: 'Type',\n        checkPenalty: 'Check penalty',\n        spellFailure: 'Spell failure',\n        weight: 'Weight',\n        properties: 'Properties',\n      },\n    },\n  },\n}\n","import { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport { TranslationResource } from './i18nSetup'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\n\nexport const de: TranslationResource = {\n  translation: {\n    general: {\n      modifier: {\n        short: 'Mod',\n        long: 'Modifikator',\n      },\n      misc: {\n        short: 'Sonst',\n        long: 'Sonstig',\n      },\n      ability: {\n        short: 'Attr',\n        long: 'Attribut',\n      },\n      total: 'Gesamt',\n      bonus: 'Bonus',\n      characterSheet: 'Charakterbogen',\n      logo: 'Pathfinder Logo',\n    },\n    abilities: {\n      charisma: {\n        short: 'CH',\n        long: 'Charisma',\n      },\n      constitution: {\n        short: 'KO',\n        long: 'Konstitution',\n      },\n      dexterity: {\n        short: 'GE',\n        long: 'Geschicklichkeit',\n      },\n      intelligence: {\n        short: 'IN',\n        long: 'Intelligenz',\n      },\n      strength: {\n        short: 'ST',\n        long: 'Stärke',\n      },\n      wisdom: {\n        short: 'WE',\n        long: 'Weisheit',\n      },\n    },\n    abilitiesTable: {\n      abilityName: 'Attribut',\n      score: 'Attributs­wert',\n      modifier: 'Attributs­mod.',\n      tempAdjustment: 'Temp. Wert',\n      tempModifier: 'Temp. Mod.',\n    },\n    skills: {\n      acrobatics: 'Akrobatik',\n      appraise: 'Schätzen',\n      bluff: 'Bluffen',\n      climb: 'Klettern',\n      craft: 'Handwerk',\n      diplomacy: 'Diplomatie',\n      disableDevice: 'Mechanismus Ausschalten',\n      disguise: 'Verkleiden',\n      escapeArtist: 'Entfesslungskunst',\n      fly: 'Fliegen',\n      handleAnimal: 'Mit Tieren umgehen',\n      heal: 'Heilkunde',\n      intimidate: 'Einschüchtern',\n      knowledgeArcana: 'Wissen (Arkanes)',\n      knowledgeDungeoneering: 'Wissen (Gewölbekunde)',\n      knowledgeEngineering: 'Wissen (Baukunst)',\n      knowledgeGeography: 'Wissen (Geographie)',\n      knowledgeHistory: 'Wissen (Geschichte)',\n      knowledgeLocal: 'Wissen (Lokales)',\n      knowledgeNature: 'Wissen (Natur)',\n      knowledgeNobility: 'Wissen (Adel und Königshäuser)',\n      knowledgePlanes: 'Wissen (Die Ebenen)',\n      knowledgeReligion: 'Wissen (Religion)',\n      linguistics: 'Sprachenkunde',\n      perception: 'Wahrnehmung',\n      perform: 'Auftreten',\n      profession: 'Beruf',\n      ride: 'Reiten',\n      senseMotive: 'Motiv erkennen',\n      sleightOfHand: 'Fingerfertigkeit',\n      spellcraft: 'Zauberkunde',\n      stealth: 'Heimlichkeit',\n      survival: 'Überlebenskunst',\n      swim: 'Schwimmen',\n      useMagicDevice: 'Magischen Gegenstand benutzen',\n    },\n    skillsTable: {\n      title: 'Fertigkeiten',\n      ranks: 'Ränge',\n      skillName: 'Fertigkeit',\n      classSkill: 'Klassenfertigkeit',\n      trainedOnly: 'Nur geübt',\n    },\n    combatValues: {\n      savingThrows: {\n        fortitude: 'Zähigkeit',\n        reflex: 'Reflex',\n        will: 'Wille',\n      },\n      initiative: {\n        short: 'INI',\n        long: 'Initiative',\n      },\n      armorClass: {\n        short: 'RK',\n        long: 'Rüstungs­klasse',\n      },\n      armorBonus: 'Rüstungs',\n      shield: 'Schild',\n      sizeModifier: 'Größen',\n      naturalArmor: 'Natürl. Rüstung',\n      deflectionModifier: 'Ablenkungs',\n      flatFooted: 'Auf dem falschen Fuß',\n      touch: 'Berührung',\n      baseAttackBonus: {\n        short: 'GAB',\n        long: 'Grund-Angriffsbonus',\n      },\n      spellResistance: 'Zauber­resistenz',\n      combatManeuverBonus: {\n        short: 'KMB',\n        long: 'Kampfmaneuverbonus',\n      },\n      combatManeuverDefense: {\n        short: 'KMV',\n        long: 'Kampfmaneuververteidigung',\n      },\n    },\n    alignments: {\n      ethics: {\n        [Ethics.LAW]: {\n          long: 'Rechtschaffend',\n          short: 'R',\n        },\n        [Ethics.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Ethics.CHAOS]: {\n          long: 'Chaotisch',\n          short: 'C',\n        },\n      },\n      morality: {\n        [Morality.GOOD]: {\n          long: 'Gut',\n          short: 'G',\n        },\n        [Morality.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Morality.BAD]: {\n          long: 'Böse',\n          short: 'B',\n        },\n      },\n      neutral: {\n        long: 'Neutral',\n        short: 'N',\n      },\n    },\n    genders: {\n      [CharacterGender.MALE]: 'Männlich',\n      [CharacterGender.FEMALE]: 'Weiblich',\n      [CharacterGender.OTHER]: 'Sonstige',\n    },\n    sizeCategories: {\n      [SizeCategory.SMALL]: 'Klein',\n      [SizeCategory.MEDIUM]: 'Normal',\n      [SizeCategory.LARGE]: 'Groß',\n    },\n    characterMetaData: {\n      characterName: 'Charaktername',\n      alignment: 'Gesinnung',\n      player: 'Spieler',\n      characterClass: 'Klasse',\n      level: 'Stufe',\n      race: 'Volk',\n      campaign: 'Kampagne',\n      homeland: 'Heimat',\n      deity: 'Gottheit',\n      sizeCategory: 'Größenkategorie',\n      gender: 'Geschlecht',\n      age: 'Alter',\n      height: 'Größe',\n      weight: 'Gewicht',\n      hair: 'Haarfarbe',\n      eyes: 'Augenfarbe',\n    },\n    talents: {\n      title: 'Talente',\n    },\n    specialAbilities: {\n      title: 'Besondere Fähigkeiten',\n    },\n    inventory: {\n      weapons: {\n        title: 'Waffe',\n        attackBonus: 'Angriffsbonus',\n        criticalHit: 'Kritischer Treffer',\n        multiplier: 'Multiplikator',\n        minDieValue: 'Min. Würfelergebnis',\n        type: {\n          title: 'Art',\n          bludgeoning: {\n            long: 'Wucht',\n            short: 'W',\n          },\n          piercing: {\n            long: 'Stich',\n            short: 'S',\n          },\n          slashing: {\n            long: 'Hieb',\n            short: 'H',\n          },\n        },\n        range: 'Reichweite',\n        ammunition: 'Munition',\n        damage: 'Schaden',\n      },\n      gear: {\n        title: 'Ausrüstung',\n        item: 'Gegenstand',\n        weight: 'GEW.',\n        totalWeight: 'Gesamtgewicht',\n      },\n      armor: {\n        title: 'Rüs­tungs­ge­gen­stän­de',\n        bonus: 'Bonus',\n        type: 'Art',\n        checkPenalty: 'Rüstungsmalus',\n        spellFailure: 'Zauberpatzer',\n        weight: 'Gewicht',\n        properties: 'Eigenschaften',\n      },\n    },\n  },\n}\n","import i18n, { Resource } from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport { abilityName } from '../store/Abilities/types'\nimport { en } from './en'\nimport { de } from './de'\nimport { SkillName } from '../store/Skills/types'\nimport { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\nimport { useEffect, useState } from 'react'\nimport { getLanguage } from '../store/AppState/selectors'\nimport { useSelector } from 'react-redux'\n\nexport type TranslationResource = Resource & {\n  translation: {\n    general: {\n      modifier: {\n        short: string\n        long: string\n      }\n      misc: {\n        short: string\n        long: string\n      }\n      ability: {\n        short: string\n        long: string\n      }\n      total: string\n      bonus: string\n      characterSheet: string\n      logo: string\n    }\n    abilities: {\n      [key in abilityName]: {\n        short: string\n        long: string\n      }\n    }\n    abilitiesTable: {\n      abilityName: string\n      score: string\n      modifier: string\n      tempAdjustment: string\n      tempModifier: string\n    }\n    skills: {\n      [key in SkillName]: string\n    }\n    skillsTable: {\n      title: string\n      skillName: string\n      ranks: string\n      classSkill: string\n      trainedOnly: string\n    }\n    combatValues: {\n      savingThrows: {\n        fortitude: string\n        reflex: string\n        will: string\n      }\n      initiative: {\n        short: string\n        long: string\n      }\n      armorClass: {\n        short: string\n        long: string\n      }\n      armorBonus: string\n      shield: string\n      sizeModifier: string\n      naturalArmor: string\n      deflectionModifier: string\n      touch: string\n      flatFooted: string\n      baseAttackBonus: {\n        short: string\n        long: string\n      }\n      spellResistance: string\n      combatManeuverBonus: {\n        short: string\n        long: string\n      }\n      combatManeuverDefense: {\n        short: string\n        long: string\n      }\n    }\n    alignments: {\n      ethics: {\n        [key in Ethics]: {\n          long: string\n          short: string\n        }\n      }\n      morality: {\n        [key in Morality]: {\n          long: string\n          short: string\n        }\n      }\n      neutral: {\n        long: string\n        short: string\n      }\n    }\n    genders: {\n      [key in CharacterGender]: string\n    }\n    sizeCategories: {\n      [key in SizeCategory]: string\n    }\n    characterMetaData: {\n      characterName: string\n      alignment: string\n      player: string\n      characterClass: string\n      level: string\n      race: string\n      campaign: string\n      homeland: string\n      deity: string\n      sizeCategory: string\n      gender: string\n      age: string\n      height: string\n      weight: string\n      hair: string\n      eyes: string\n    }\n    talents: {\n      title: string\n    }\n    specialAbilities: {\n      title: string\n    }\n    inventory: {\n      weapons: {\n        title: string\n        attackBonus: string\n        criticalHit: string\n        multiplier: string\n        minDieValue: string\n        type: {\n          title: string\n          bludgeoning: {\n            long: string\n            short: string\n          }\n          piercing: {\n            long: string\n            short: string\n          }\n          slashing: {\n            long: string\n            short: string\n          }\n        }\n        range: string\n        ammunition: string\n        damage: string\n      }\n      gear: {\n        title: string\n        item: string\n        weight: string\n        totalWeight: string\n      }\n      armor: {\n        title: string\n        bonus: string\n        type: string\n        checkPenalty: string\n        spellFailure: string\n        weight: string\n        properties: string\n      }\n    }\n  }\n}\n\nexport const initializeI18n = () => {\n  return i18n.use(initReactI18next).init({\n    resources: {\n      en,\n      de,\n    },\n    lng: 'en',\n    fallbackLng: 'en',\n  })\n}\n\nexport const useI18nSetup = () => {\n  const [hasLoaded, setHasBeenInitialized] = useState(false)\n  useEffect(() => {\n    initializeI18n().then(() => setHasBeenInitialized(true))\n  }, [])\n\n  const language = useSelector(getLanguage)\n  useEffect(() => {\n    if (hasLoaded) {\n      i18n.changeLanguage(language).catch(console.error)\n    }\n  }, [language, hasLoaded])\n\n  return { hasLoaded, t: hasLoaded ? i18n.t.bind(i18n) : null }\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport './TextareaWithLines.scss'\n\nexport const TextareaWithLines = ({\n  minRows = 10,\n  ...rest\n}: { minRows?: number } & React.HTMLProps<HTMLTextAreaElement>) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = ``\n      textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`\n    }\n  }, [rest.value])\n\n  return (\n    <textarea\n      {...rest}\n      ref={textAreaRef}\n      draggable={'false'}\n      rows={minRows}\n      wrap={'true'}\n      className={'textarea-with-lines'}\n    />\n  )\n}\n","import React, { useCallback } from 'react'\nimport { TextareaWithLines } from '../TextareaWithLines/TextareaWithLines'\nimport { RootState } from '../../store/root-reducer'\nimport { updateTalents } from '../../store/Talents/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport { useTranslation } from 'react-i18next'\nimport './DisplayTalents.scss'\n\nconst mapStateToProps = (state: RootState) => ({\n  talents: state.talents,\n})\nconst mapDispatchToProps = { updateTalents }\nconst connector = connect(mapStateToProps, mapDispatchToProps)\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayTalents = connector(({ talents, updateTalents }: Props) => {\n  const { t } = useTranslation()\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      updateTalents(e.target.value)\n    },\n    [updateTalents],\n  )\n\n  return (\n    <div className={'talents'}>\n      <InvertedBorderRadius className={'title'}>\n        {t('talents.title')}\n      </InvertedBorderRadius>\n      <TextareaWithLines minRows={12} value={talents} onChange={onChange} />\n    </div>\n  )\n})\n","import React, { useCallback } from 'react'\nimport { TextareaWithLines } from '../TextareaWithLines/TextareaWithLines'\nimport { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport { useTranslation } from 'react-i18next'\nimport './DisplaySpecialAbilities.scss'\nimport { setSpecialAbilities } from '../../store/SpecialAbilities/actions'\n\nconst mapStateToProps = (state: RootState) => ({\n  specialAbilities: state.specialAbilities,\n})\nconst mapDispatchToProps = { setSpecialAbilities }\nconst connector = connect(mapStateToProps, mapDispatchToProps)\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplaySpecialAbilities = connector(\n  ({ specialAbilities, setSpecialAbilities }: Props) => {\n    const { t } = useTranslation()\n\n    const onChange = useCallback(\n      (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setSpecialAbilities(e.target.value)\n      },\n      [setSpecialAbilities],\n    )\n\n    return (\n      <div className={'special-abilities'}>\n        <InvertedBorderRadius className={'title'}>\n          {t('specialAbilities.title')}\n        </InvertedBorderRadius>\n        <TextareaWithLines\n          minRows={20}\n          value={specialAbilities}\n          onChange={onChange}\n        />\n      </div>\n    )\n  },\n)\n","import React, { useCallback } from 'react'\n\nexport const NumberInput = ({\n  value,\n  type = 'integer',\n  onChange: onChangeFromProps,\n  ...otherProps\n}: Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'type' | 'value'> & {\n  onChange?: (value: number | undefined) => void\n  type?: 'integer' | 'float'\n  value: number | undefined\n}) => {\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const parsedValue =\n        type === 'integer'\n          ? parseInt(e.target.value)\n          : parseFloat(e.target.value)\n      onChangeFromProps?.(isNaN(parsedValue) ? undefined : parsedValue)\n    },\n    [onChangeFromProps, type],\n  )\n  return (\n    <input\n      type={'number'}\n      value={value === undefined || isNaN(value) ? '' : value}\n      onChange={onChange}\n      {...otherProps}\n    />\n  )\n}\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport * as InventoryActions from '../../store/Inventory/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { getWeapons } from '../../store/Inventory/getters'\nimport { useTranslation } from 'react-i18next'\nimport { generateEmptyWeapon, Weapon } from '../../store/Inventory/reducers'\nimport './DisplayWeapons.scss'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport { NumberInput } from '../util/NumberInput'\nimport { StyledCheckbox } from '../util/StyledCheckbox/StyledCheckbox'\n\nconst mapStateToProps = (state: RootState) => ({\n  weapons: getWeapons(state),\n})\n\nconst mapDispatchToProps = InventoryActions\nconst connector = connect(mapStateToProps, mapDispatchToProps)\n\nexport const DisplayWeapons = connector(\n  ({\n    weapons,\n    addWeapon,\n    editWeapon,\n    deleteWeapon,\n  }: ConnectedProps<typeof connector>) => {\n    const { t } = useTranslation()\n\n    const onCreateNewWeapon = useCallback(() => {\n      addWeapon(generateEmptyWeapon())\n    }, [addWeapon])\n\n    return (\n      <div className={'weapons'}>\n        {weapons.map((weapon, weaponIndex) => (\n          <div className={'weapon'} key={weaponIndex}>\n            <div className={'header-container'}>\n              <InvertedBorderRadius\n                className={'header'}\n                fillCorners={{\n                  'bottom-right': true,\n                }}\n                enableHalfHeightBorders\n              >\n                {t('inventory.weapons.title')}\n                <span\n                  className={'delete-weapon'}\n                  onClick={() => deleteWeapon(weaponIndex)}\n                >\n                  ❌\n                </span>\n              </InvertedBorderRadius>\n            </div>\n            <input\n              className={'input name-input'}\n              value={weapon.name}\n              onChange={(e) =>\n                editWeapon({\n                  oldWeaponIndex: weaponIndex,\n                  newWeapon: { ...weapon, name: e.target.value },\n                })\n              }\n            />\n            <span className={'title attack-bonus-title'}>\n              {t('inventory.weapons.attackBonus')}\n            </span>\n            <input\n              className={'input attack-bonus-input'}\n              value={weapon.attackBonus}\n              onChange={(e) =>\n                editWeapon({\n                  oldWeaponIndex: weaponIndex,\n                  newWeapon: {\n                    ...weapon,\n                    attackBonus: e.target.value,\n                  },\n                })\n              }\n            />\n            <span className={'title critical-hit-title'}>\n              {t('inventory.weapons.criticalHit')}\n            </span>\n            <div className=\"input critical-hit-input\">\n              <label>\n                <span style={{ textTransform: 'lowercase' }}>x</span>\n                <NumberInput\n                  value={weapon.criticalAttackProperties.multiplier}\n                  onChange={(value) =>\n                    editWeapon({\n                      oldWeaponIndex: weaponIndex,\n                      newWeapon: {\n                        ...weapon,\n                        criticalAttackProperties: {\n                          ...weapon.criticalAttackProperties,\n                          multiplier: value,\n                        },\n                      },\n                    })\n                  }\n                />\n              </label>\n              &nbsp;/ &nbsp;\n              <label>\n                <NumberInput\n                  value={weapon.criticalAttackProperties.minDieValue}\n                  onChange={(value) =>\n                    editWeapon({\n                      oldWeaponIndex: weaponIndex,\n                      newWeapon: {\n                        ...weapon,\n                        criticalAttackProperties: {\n                          ...weapon.criticalAttackProperties,\n                          minDieValue: value,\n                        },\n                      },\n                    })\n                  }\n                />\n                - 20\n              </label>\n            </div>\n            <span className={'title type-title'}>\n              {t('inventory.weapons.type.title')}\n            </span>\n            <div className=\"input type-input\">\n              {(['bludgeoning', 'slashing', 'piercing'] as Array<\n                keyof Weapon['type']\n              >)\n                .sort((a, b) =>\n                  t(`inventory.weapons.type.${a}.short`).localeCompare(\n                    t(`inventory.weapons.type.${b}.short`),\n                  ),\n                )\n                .map((key) => (\n                  <label\n                    key={key}\n                    title={t(`inventory.weapons.type.${key}.long`)}\n                  >\n                    {t(`inventory.weapons.type.${key}.short`)}&nbsp;\n                    <StyledCheckbox\n                      checked={weapon.type[key]}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        editWeapon({\n                          oldWeaponIndex: weaponIndex,\n                          newWeapon: {\n                            ...weapon,\n                            type: {\n                              ...weapon.type,\n                              [key]: e.target.checked,\n                            },\n                          },\n                        })\n                      }\n                    />\n                  </label>\n                ))}\n            </div>\n            <span className={'title range-title'}>\n              {t('inventory.weapons.range')}\n            </span>\n            <NumberInput\n              className={'input range-input'}\n              value={weapon.range}\n              onChange={(value) =>\n                editWeapon({\n                  oldWeaponIndex: weaponIndex,\n                  newWeapon: {\n                    ...weapon,\n                    range: value,\n                  },\n                })\n              }\n            />\n            <span className={'title ammunition-title'}>\n              {t('inventory.weapons.ammunition')}\n            </span>\n            <input\n              className={'input ammunition-input'}\n              value={weapon.ammunition}\n              onChange={(e) =>\n                editWeapon({\n                  oldWeaponIndex: weaponIndex,\n                  newWeapon: { ...weapon, ammunition: e.target.value },\n                })\n              }\n            />\n            <span className={'title damage-title'}>\n              {t('inventory.weapons.damage')}\n            </span>\n            <input\n              className={'input damage-input'}\n              value={weapon.damage}\n              onChange={(e) =>\n                editWeapon({\n                  oldWeaponIndex: weaponIndex,\n                  newWeapon: { ...weapon, damage: e.target.value },\n                })\n              }\n            />\n          </div>\n        ))}\n        <button className={'new-weapon'} onClick={onCreateNewWeapon}>\n          Neue Waffe\n        </button>\n      </div>\n    )\n  },\n)\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport sanitize from 'sanitize-filename'\nimport { useTranslation } from 'react-i18next'\n\nconst mapStateDoProps = (state: RootState) => ({\n  state,\n})\nconst mapDispatchToProps = {}\nconst connector = connect(mapStateDoProps, mapDispatchToProps)\n\nexport const DownloadButton = connector(\n  ({ state }: ConnectedProps<typeof connector>) => {\n    const { t } = useTranslation()\n\n    const downloadState = useCallback(() => {\n      const json = JSON.stringify(state, null, 2)\n      const blob = new Blob([json], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL || window.webkitURL\n      const link = url.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.download = sanitize(\n        `${t('general.characterSheet')} ${\n          state.characterMetaData.characterName\n        }.json`,\n      )\n      a.href = link\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    }, [state, t])\n\n    return (\n      <>\n        <button onClick={downloadState}>⬇</button>\n      </>\n    )\n  },\n)\n","import React, { useCallback, useRef } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport { getGear } from '../../store/Inventory/getters'\nimport { gearActions } from '../../store/Inventory/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { NumberInput } from '../util/NumberInput'\nimport { GearItem } from '../../store/Inventory/reducers'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport './DisplayGear.scss'\n\nexport const gearNameInputTestID = 'gear-name-input'\nexport const gearWeightInputTestID = 'gear-weight-input'\n\nconst DisplayGearItem = ({\n  index,\n  gearItem,\n  onChange,\n  onPressEnter,\n}: {\n  index: number\n  gearItem: GearItem\n  onChange: (index: number, newGearItem: GearItem) => void\n  onPressEnter?: (index: number) => void\n}) => {\n  const onChangeWeight = useCallback(\n    (newWeight: number | undefined) => {\n      onChange(index, {\n        ...gearItem,\n        weight: newWeight,\n      })\n    },\n    [gearItem, index, onChange],\n  )\n  const onChangeName = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(index, {\n        ...gearItem,\n        name: event.target.value,\n      })\n    },\n    [gearItem, index, onChange],\n  )\n\n  const onKeyPress = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        onPressEnter?.(index)\n      }\n    },\n    [index, onPressEnter],\n  )\n\n  return (\n    <>\n      <input\n        className={'name-input'}\n        value={gearItem.name}\n        onChange={onChangeName}\n        data-testid={gearNameInputTestID}\n        onKeyPress={onKeyPress}\n      />\n      <NumberInput\n        className={'weight-input'}\n        onChange={onChangeWeight}\n        value={gearItem.weight}\n        data-testid={gearWeightInputTestID}\n        onKeyPress={onKeyPress}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  gear: getGear(state),\n})\nconst connector = connect(mapStateToProps, gearActions)\n\nexport const DisplayGear = connector(\n  ({\n    addGearItem,\n    insertGearItemAtIndex,\n    editGearItem,\n    deleteGearItem,\n    gear,\n  }: ConnectedProps<typeof connector>) => {\n    const { t } = useTranslation()\n    const onChangeGearItem = useCallback(\n      (index: number, newGearItem: GearItem) => {\n        if (index === gear.length) {\n          addGearItem(newGearItem)\n        } else if (\n          index === gear.length - 1 &&\n          newGearItem.name === '' &&\n          newGearItem.weight === undefined\n        ) {\n          deleteGearItem(index)\n        } else {\n          editGearItem({\n            oldGearItemIndex: index,\n            newGearItem,\n          })\n        }\n      },\n      [addGearItem, deleteGearItem, editGearItem, gear.length],\n    )\n\n    const containerRef = useRef<HTMLDivElement>(null)\n    const onPressEnter = useCallback(\n      (index: number) => {\n        // Insert after item, where enter was pressed\n        insertGearItemAtIndex(index + 1)\n        const el = containerRef.current?.querySelectorAll(`.name-input`)[\n          index + 1\n        ] as HTMLInputElement | undefined\n        el?.focus()\n      },\n      [insertGearItemAtIndex],\n    )\n\n    return (\n      <div ref={containerRef} className={'gear-items'}>\n        <InvertedBorderRadius className={'title'} enableHalfHeightBorders>\n          {t('inventory.gear.title')}\n        </InvertedBorderRadius>\n        <span className={'header name'}>{t('inventory.gear.item')}</span>\n        <span className={'header weight'}>{t('inventory.gear.weight')}</span>\n        {[...gear, { name: '' }].map((gearItem, index) => (\n          <DisplayGearItem\n            key={index}\n            index={index}\n            gearItem={gearItem}\n            onChange={onChangeGearItem}\n            onPressEnter={onPressEnter}\n          />\n        ))}\n      </div>\n    )\n  },\n)\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport {\n  getArmor,\n  getTotalArmorCheckPenalty,\n  getTotalArmorItemBonus,\n  getTotalArmorSpellFailure,\n  getTotalArmorWeight,\n} from '../../store/Inventory/getters'\nimport { armorActions } from '../../store/Inventory/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { NumberInput } from '../util/NumberInput'\nimport { Armor } from '../../store/Inventory/reducers'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport './DisplayArmorItems.scss'\n\nconst DisplayArmorItem = ({\n  index,\n  armorItem,\n  onChange,\n}: {\n  index: number\n  armorItem: Armor\n  onChange: (index: number, newArmorItem: Armor) => void\n}) => {\n  const useStringPropertyChangeHandler = (propertyName: keyof Armor) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    onChange(index, {\n      ...armorItem,\n      [propertyName]: event.target.value,\n    })\n  }\n  const useNumberPropertyChangeHandler = (propertyName: keyof Armor) => (\n    newValue: number | undefined,\n  ) => {\n    onChange(index, {\n      ...armorItem,\n      [propertyName]: newValue,\n    })\n  }\n\n  return (\n    <>\n      <input\n        className={'input name'}\n        value={armorItem.name ?? ''}\n        onChange={useStringPropertyChangeHandler('name')}\n      />\n      <NumberInput\n        className={'input bonus'}\n        onChange={useNumberPropertyChangeHandler('armorBonus')}\n        value={armorItem.armorBonus}\n      />\n      <input\n        className={'input type'}\n        value={armorItem.type ?? ''}\n        onChange={useStringPropertyChangeHandler('type')}\n      />\n      <NumberInput\n        className={'input check-penalty'}\n        onChange={useNumberPropertyChangeHandler('checkPenalty')}\n        value={armorItem.checkPenalty}\n      />\n      <NumberInput\n        className={'input spell-failure'}\n        onChange={useNumberPropertyChangeHandler('spellFailure')}\n        value={armorItem.spellFailure}\n      />\n      <NumberInput\n        className={'input weight'}\n        onChange={useNumberPropertyChangeHandler('weight')}\n        value={armorItem.weight}\n      />\n      <input\n        className={'input properties'}\n        value={armorItem.properties ?? ''}\n        onChange={useStringPropertyChangeHandler('properties')}\n      />\n    </>\n  )\n}\n\nconst emptyArmorItem: Armor = {\n  name: '',\n  properties: '',\n  type: '',\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  armor: getArmor(state),\n  totalArmorBonus: getTotalArmorItemBonus(state),\n  totalCheckPenalty: getTotalArmorCheckPenalty(state),\n  totalSpellFailure: getTotalArmorSpellFailure(state),\n  totalWeight: getTotalArmorWeight(state),\n})\nconst connector = connect(mapStateToProps, armorActions)\n\nexport const DisplayArmorItems = connector(\n  ({\n    armor,\n    addArmorItem,\n    editArmorItem,\n    deleteArmorItem,\n    insertArmorItemAtIndex,\n    totalArmorBonus,\n    totalCheckPenalty,\n    totalSpellFailure,\n    totalWeight,\n  }: ConnectedProps<typeof connector>) => {\n    const { t } = useTranslation()\n    const onChangeGearItem = useCallback(\n      (index: number, newArmorItem: Armor) => {\n        if (index === armor.length) {\n          addArmorItem(newArmorItem)\n        } else if (\n          index === armor.length - 1 &&\n          newArmorItem.name === '' &&\n          newArmorItem.armorBonus === undefined &&\n          newArmorItem.type === '' &&\n          newArmorItem.checkPenalty === undefined &&\n          newArmorItem.spellFailure === undefined &&\n          newArmorItem.weight === undefined &&\n          newArmorItem.properties === ''\n        ) {\n          deleteArmorItem(index)\n        } else {\n          editArmorItem({ newArmorItem, oldArmorItemIndex: index })\n        }\n      },\n      [addArmorItem, armor.length, deleteArmorItem, editArmorItem],\n    )\n\n    return (\n      <div className={'armor-items'}>\n        <div className={'spacer'} />\n        <InvertedBorderRadius\n          className={'title'}\n          enableHalfHeightBorders\n          fillCorners={{ 'bottom-right': true }}\n        >\n          {t('inventory.armor.title')}\n        </InvertedBorderRadius>\n        <span className={'header bonus'}>{t('inventory.armor.bonus')}</span>\n        <span className={'header type'}>{t('inventory.armor.type')}</span>\n        <span className={'header check-penalty'}>\n          {t('inventory.armor.checkPenalty')}\n        </span>\n        <span className={'header spell-failure'}>\n          {t('inventory.armor.spellFailure')}\n        </span>\n        <span className={'header weight'}>{t('inventory.armor.weight')}</span>\n        <span className={'header properties'}>\n          {t('inventory.armor.properties')}\n        </span>\n        {[...armor, emptyArmorItem].map((armorItem, index) => (\n          <DisplayArmorItem\n            key={index}\n            index={index}\n            armorItem={armorItem}\n            onChange={onChangeGearItem}\n          />\n        ))}\n        <span className={'header total'}>{t('general.total')}</span>\n        <NumberInput\n          className={'input armor-bonus'}\n          value={totalArmorBonus}\n          readOnly\n          disabled\n        />\n        <input className={'input type'} value={''} readOnly disabled />\n        <NumberInput\n          className={'input check-penalty'}\n          value={totalCheckPenalty}\n          readOnly\n          disabled\n        />\n        <NumberInput\n          className={'input spell-failure'}\n          value={totalSpellFailure}\n          readOnly\n          disabled\n        />\n        <NumberInput\n          className={'input weight'}\n          value={totalWeight}\n          readOnly\n          disabled\n        />\n        <input className={'input properties'} value={''} readOnly disabled />\n      </div>\n    )\n  },\n)\n","import React from 'react'\nimport { DisplayCharacterMetaData } from '../DisplayCharacterMetaData/DisplayCharacterMetaData'\nimport { DisplayAbilities } from '../DisplayAbilities/DisplayAbilities'\nimport { DisplaySkills } from '../DisplaySkills/DisplaySkills'\nimport { DisplayCombatValues } from '../DisplayCombatValues/DisplayCombatValues'\nimport { LanguageSwitcher } from '../LanguageSwitcher'\nimport { useI18nSetup } from '../../i18n/i18nSetup'\nimport { DisplayTalents } from '../DisplayTalents/DisplayTalents'\nimport { DisplaySpecialAbilities } from '../DisplaySpecialAbilities/DisplaySpecialAbilities'\nimport { DisplayWeapons } from '../DisplayInventory/DisplayWeapons'\nimport { DownloadButton } from '../DownloadButton/DownloadButton'\nimport { DisplayGear } from '../DisplayInventory/DisplayGear'\nimport { DisplayArmorItems } from '../DisplayInventory/DisplayArmorItems'\nimport './CharacterSheet.scss'\n\nexport const CharacterSheet: React.FC = () => {\n  const { hasLoaded: i18nHasLoaded, t } = useI18nSetup()\n\n  return i18nHasLoaded ? (\n    <div className={'character-sheet'}>\n      <header>\n        <div className={'other-controls'}>\n          <DownloadButton />\n          <LanguageSwitcher />\n        </div>\n        <div\n          className={'logo'}\n          role={'img'}\n          aria-label={t?.('general.logo')}\n          style={{\n            backgroundImage: `url(${\n              process.env.PUBLIC_URL + '/pathfinderDE-logo.png'\n            })`,\n          }}\n        />\n        <h1>{t?.('general.characterSheet')}</h1>\n\n        <DisplayCharacterMetaData />\n      </header>\n      <div className={'first-page'}>\n        <div className={'left-column'}>\n          <DisplayAbilities />\n          <DisplayCombatValues />\n          <DisplayWeapons />\n        </div>\n        <div className={'right-column'}>\n          <DisplaySkills />\n        </div>\n      </div>\n      <div className={'second-page'}>\n        <DisplayArmorItems />\n        <DisplayGear />\n        <DisplayTalents />\n        <DisplaySpecialAbilities />\n      </div>\n    </div>\n  ) : null\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport { CharacterSheet } from './components/CharacterSheet/CharacterSheet'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst persistor = persistStore(store)\n\nconst App: React.FC = () => {\n  return (\n    <PersistGate persistor={persistor}>\n      <Provider store={store}>\n        <CharacterSheet />\n      </Provider>\n    </PersistGate>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}