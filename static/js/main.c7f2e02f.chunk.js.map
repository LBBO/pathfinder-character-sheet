{"version":3,"sources":["store/CharacterMetaData/Character.ts","store/CharacterMetaData/reducers.ts","components/DisplayCharacterMetaData/MetadataSelect/MetadataSelect.tsx","store/Abilities/selectors.ts","store/Abilities/reducers.ts","store/Skills/types.ts","store/CombatValues/types.ts","store/AppState/types.ts","store/AppState/reducers.ts","store/root-reducer.ts","store/Skills/reducers.ts","store/CombatValues/reducers.ts","store/CombatValues/initialState.ts","store/index.ts","store/CharacterMetaData/actions.ts","store/CharacterMetaData/types.ts","store/CharacterMetaData/Alignment.ts","components/DisplayCharacterMetaData/DisplayCharacterMetaData.tsx","components/BoxInput/BoxInput.tsx","components/BoxInput/BoxNumberInput.tsx","components/BlackBox/BlackBox.tsx","components/DisplayAbilities/DisplayAbilities.tsx","store/Abilities/actions.ts","store/Abilities/types.ts","store/Skills/actions.ts","components/StyledCheckbox/StyledCheckbox.tsx","store/Skills/selectors.ts","components/DisplaySkills/DisplaySkills.tsx","store/CombatValues/actions.ts","store/CharacterMetaData/selectors.ts","store/CombatValues/selectors.ts","components/InvertedBorderRadius/InvertedBorderRadius.tsx","components/DisplayCombatValues/DisplayCombatValues.tsx","store/AppState/selectors.ts","components/LanguageSwitcher.tsx","store/AppState/actions.ts","i18n/en.ts","i18n/de.ts","i18n/i18nSetup.ts","components/CharacterSheet/CharacterSheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SizeCategory","CharacterGender","MetadataSelectTestIds","initialState","level","characterName","sizeCategory","MEDIUM","getModifierFromScore","score","Math","floor","getAbilityModifiers","createSelector","state","abilities","abilitiesState","Object","entries","reduce","modifiers","abilityName","values","temporaryAdjustment","charisma","constitution","dexterity","intelligence","strength","wisdom","quickSkillDefinitions","acrobatics","baseAbility","isTrainedOnly","appraise","bluff","climb","craft","diplomacy","disableDevice","disguise","escapeArtist","fly","handleAnimal","heal","intimidate","knowledgeArcana","knowledgeDungeoneering","knowledgeEngineering","knowledgeGeography","knowledgeHistory","knowledgeLocal","knowledgeNature","knowledgeNobility","knowledgePlanes","knowledgeReligion","linguistics","perception","perform","profession","ride","senseMotive","sleightOfHand","spellcraft","stealth","survival","swim","useMagicDevice","UPDATE_SKILL_RANKS","UPDATE_SKILL_MISC_MODIFIER","UPDATE_SKILL_IS_CLASS_SKILL","SET_INITIATIVE_MISC_MODIFIER","SET_ARMOR_BONUS","SET_SHIELD_BONUS","SET_NATURAL_ARMOR","SET_DEFLECTION_MODIFIER","SET_MISC_ARMOR_MODIFIER","SET_OTHER_ARMOR_MODIFIERS","SET_BASE_SAVE","SET_SAVING_THROW_MAGIC_MODIFIER","SET_MISC_SAVING_THROW_MODIFIER","SET_TEMPORARY_SAVING_THROW_MODIFIER","SET_BASE_ATTACK_BONUS","SET_SPELL_RESISTANCE","SET_LANGUAGE","lang","RootReducer","combineReducers","characterMetaData","action","type","payload","campaign","age","alignment","className","deity","eyes","gender","hair","height","homeland","race","weight","playerName","ability","modifier","adjustment","skills","skillCopy","skillName","miscModifier","ranks","console","warn","isClassSkill","result","keys","forEach","name","createInitialState","combatValues","armorClass","shieldBonus","armorBonus","deflectionModifier","naturalArmor","otherModifiers","initiative","attackBonuses","baseAttackBonus","spellResistance","savingThrows","fortitude","baseSave","magicModifier","temporaryModifier","reflex","will","savingThrowType","stateCopy","currentSavingThrow","newBaseSave","newMagicModifier","newMiscModifier","newTemporaryModifier","appState","language","persistenceConfig","key","storage","localForage","persistedReducer","persistReducer","store","createStore","devToolsEnhancer","setCharacterName","setCharacterClass","setCharacterRace","setCharacterAlignment","setCharacterLevel","setCharacterDeity","setCharacterSizeCategory","setCharacterGender","setCharacterAge","setCharacterHomeland","setCharacterHeight","setCharacterWeight","setCharacterHair","setCharacterEyes","setPlayerName","setCampaign","Morality","Ethics","MetadataSelect","value","onChange","id","label","options","testIds","useEffect","optionValues","map","option","includes","undefined","error","data-testid","wrapper","event","selectedIndex","currentTarget","selectedOption","JSON","stringify","select","index","htmlFor","NEUTRAL","GenderInputTestIds","GenderInputOptions","MALE","FEMALE","OTHER","SizeCategoryInputTestIds","SizeCategoryInputOptions","SMALL","LARGE","AlignmentInputTestIds","AlignmentOptions","ethics","LAW","morality","GOOD","BAD","CHAOS","PropTypes","string","func","isRequired","MetadataStringInput","MetadataNumberInput","number","mapDispatchToProps","CharacterMetadataActions","DisplayCharacterMetaData","connect","connector","t","useTranslation","callWithStringValue","useCallback","callback","target","callWithNumberValue","parseInt","Number","isNaN","translatedAlignmentOptions","alignmentOption","newLabel","translatedGenderOptions","genderOption","translatedSizeOptions","sizeOption","BoxInputPropTypes","oneOfType","arrayOf","testId","labelTestId","hideBox","bool","disabled","BoxInputDefaultProps","BoxInput","props","defaultProps","any","BoxNumberInput","changeHandlerFromProps","changeHandler","evt","valueAsNumber","Boolean","BlackBox","children","propsWithoutChildren","setAbilityScore","newScore","setAbilityTempAdjustment","newAdjustment","DisplayAbilities","onScoreChange","newVal","onTempAdjustmentChange","log","abilityElements","sort","nameA","nameB","localeCompare","abilityAttributes","setSkillRanks","setSkillMiscMod","setIsSkillClassSkill","StyledCheckbox","checked","getTotalSkillBonuses","abilityModifiers","totalSkillsBonuses","currSkillName","skill","baseAbilityName","UpdateSkillsActions","DisplaySkills","totalSkillBonuses","onSkillRanksChange","onSkillMiscModChange","skillA","skillB","setBaseSave","setSavingThrowMagicModifier","setMiscSavingThrowModifier","setTemporarySavingThrowModifier","setInitiativeMiscModifier","setBaseAttackBonus","newBaseAttackBonus","setSpellResistance","newSpellResistance","setShieldBonus","newShieldBonus","setArmorBonus","newArmorBonus","setDeflectionModifier","newDeflectionModifier","setMiscArmorModifier","newMiscArmorModifier","setNaturalArmor","newNaturalArmor","setOtherArmorModifiers","newOtherArmorModifiers","getSizeModifier","characterMetadataState","NaN","getCombatValues","getTotalInitiativeBonus","getArmorClass","sizeModifier","getTouchArmorClass","getFlatFootedArmorClass","min","getFortitudeBonus","savingThrow","getReflexBonus","getWillBonus","getCombatManeuverBonus","getCombatManeuverDefense","combatManeuverBonus","InvertedBorderRadius","object","style","callIfDefined","param","CombatValueActions","DisplayCombatValues","totalInitiativeBonus","totalArmorClass","touchArmorClass","flatFootedArmorClass","fortitudeBonus","reflexBonus","willBonus","combatManeuverDefense","setForCertainSavingThrow","savingThrowName","setter","newValue","savingThrowBonus","abilityModifier","Fragment","getLanguage","setLanguage","newLanguage","LanguageSwitcher","onClick","en","translation","general","short","long","misc","total","bonus","abilitiesTable","tempAdjustment","tempModifier","skillsTable","title","classSkill","trainedOnly","shield","flatFooted","touch","alignments","neutral","genders","sizeCategories","player","characterClass","de","useI18nSetup","useState","hasLoaded","setHasBeenInitialized","i18n","use","initReactI18next","init","resources","lng","fallbackLng","then","useSelector","changeLanguage","catch","CharacterSheet","alt","src","persistor","persistStore","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7f2e02f.chunk.js","sourcesContent":["import { Alignment } from './Alignment'\n\nexport type CharacterClass = string\n\n// TODO: add other size categories\n//  http://prd.5footstep.de/Grundregelwerk/Kampf/DieGrundregelndesKampfes/Ruestungsklasse\nexport enum SizeCategory {\n  SMALL = -1,\n  MEDIUM = 0,\n  LARGE = 1,\n}\n\nexport enum CharacterGender {\n  MALE,\n  FEMALE,\n  OTHER,\n}\n\nexport type CharacterRace = string\n\nexport type CharacterMetaData = {\n  characterName: string\n  className?: CharacterClass\n  race?: CharacterRace\n  alignment?: Alignment\n  level?: number\n  deity?: string\n  sizeCategory: SizeCategory\n  gender?: CharacterGender\n  age?: number\n  homeland?: string\n  height?: number\n  weight?: number\n  hair?: string\n  eyes?: string\n\n  playerName?: string\n  campaign?: string\n}\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootActionTypes } from '../root-reducer'\n\nconst initialState: CharacterMetaDataState = {\n  level: 0,\n  characterName: '',\n  sizeCategory: SizeCategory.MEDIUM,\n}\n\nexport const CharacterMetaDataReducer = (\n  state = initialState,\n  action?: RootActionTypes,\n): CharacterMetaDataState => {\n  switch (action?.type) {\n    case 'UPDATE_CHARACTER_NAME':\n      return {\n        ...state,\n        characterName: action.payload,\n      }\n    case 'UPDATE_CAMPAIGN':\n      return {\n        ...state,\n        campaign: action.payload,\n      }\n    case 'UPDATE_CHARACTER_AGE':\n      return {\n        ...state,\n        age: action.payload,\n      }\n    case 'UPDATE_CHARACTER_ALIGNMENT':\n      return {\n        ...state,\n        alignment: action.payload,\n      }\n    case 'UPDATE_CHARACTER_CLASS':\n      return {\n        ...state,\n        className: action.payload,\n      }\n    case 'UPDATE_CHARACTER_DEITY':\n      return {\n        ...state,\n        deity: action.payload,\n      }\n    case 'UPDATE_CHARACTER_EYES':\n      return {\n        ...state,\n        eyes: action.payload,\n      }\n    case 'UPDATE_CHARACTER_GENDER':\n      return {\n        ...state,\n        gender: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HAIR':\n      return {\n        ...state,\n        hair: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HEIGHT':\n      return {\n        ...state,\n        height: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HOMELAND':\n      return {\n        ...state,\n        homeland: action.payload,\n      }\n    case 'UPDATE_CHARACTER_LEVEL':\n      return {\n        ...state,\n        level: action.payload,\n      }\n    case 'UPDATE_CHARACTER_RACE':\n      return {\n        ...state,\n        race: action.payload,\n      }\n    case 'UPDATE_CHARACTER_SIZE_CATEGORY':\n      return {\n        ...state,\n        sizeCategory: action.payload,\n      }\n    case 'UPDATE_CHARACTER_WEIGHT':\n      return {\n        ...state,\n        weight: action.payload,\n      }\n    case 'UPDATE_PLAYER_NAME':\n      return {\n        ...state,\n        playerName: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import React, { ChangeEvent, useEffect } from 'react'\n\nexport enum MetadataSelectTestIds {\n  wrapper = 'metadata-select-wrapper',\n  select = 'metadata-select',\n}\n\ntype PropsType<T> = {\n  onChange: (newValue: T) => void\n  value: T\n  options: Array<{ label?: string; value: T }>\n  label?: string\n  id: string\n  testIds?: { wrapper: string; select: string }\n}\n\nexport const MetadataSelect = <T extends any>({\n  value,\n  onChange,\n  id,\n  label,\n  options,\n  testIds = MetadataSelectTestIds,\n}: PropsType<T>) => {\n  useEffect(() => {\n    const optionValues = options.map((option) => option.value) as Array<unknown>\n\n    if (optionValues.includes(undefined) && optionValues.includes('')) {\n      console.error(\n        `MetadataSelect has recieved both an option with the value undefined and one with the value ''. Due ` +\n          `to React / browser implementation details, undefined is converted to '', so both those options cannot exist at the ` +\n          `same time. Please remove either from the options array!`,\n      )\n    }\n  }, [options])\n\n  const onSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedIndex = event.currentTarget.selectedIndex\n    const selectedOption = options[selectedIndex]\n    onChange(selectedOption.value)\n  }\n\n  return (\n    <div className={`metadata-input-block ${id}`} data-testid={testIds.wrapper}>\n      <select\n        onChange={onSelect}\n        id={id}\n        value={value === undefined ? '' : JSON.stringify(value)}\n        data-testid={testIds.select}\n      >\n        {options.map(({ label, value }, index) => (\n          <option\n            label={label}\n            value={value === undefined ? '' : JSON.stringify(value)}\n            key={index}\n          />\n        ))}\n      </select>\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n","import { AbilityAttributes, abilityName, AbilityState } from './types'\nimport { createSelector } from 'reselect'\nimport { RootState } from '../root-reducer'\n\nexport type AbilityModifiers = {\n  [k in abilityName]: number\n}\n\nexport const getModifierFromScore = (score: number) => Math.floor(score / 2) - 5\n\nexport const getAbilities = (state: RootState) => state.abilities\n\nexport const getCurrentModifiersFromAbilities = (\n  abilitiesState: AbilityState,\n) =>\n  (Object.entries(abilitiesState) as Array<\n    [abilityName, AbilityAttributes]\n  >).reduce((modifiers: AbilityModifiers, [abilityName, values]) => {\n    modifiers[abilityName] = getModifierFromScore(\n      values.score + values.temporaryAdjustment,\n    )\n\n    return modifiers\n  }, {} as AbilityModifiers)\n\nexport const getAbilityModifiers = createSelector(\n  [getAbilities],\n  getCurrentModifiersFromAbilities,\n)\n","import { AbilityState } from './types'\nimport { getModifierFromScore } from './selectors'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createDefaultAbility = () => ({\n  score: 10,\n  temporaryAdjustment: 0,\n})\n\nconst initialState: AbilityState = {\n  charisma: createDefaultAbility(),\n  constitution: createDefaultAbility(),\n  dexterity: createDefaultAbility(),\n  intelligence: createDefaultAbility(),\n  strength: createDefaultAbility(),\n  wisdom: createDefaultAbility(),\n}\n\nexport const AbilitiesReducer = (\n  state: AbilityState = initialState,\n  action?: RootActionTypes,\n): AbilityState => {\n  switch (action?.type) {\n    case 'SET_ABILITY_SCORE':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          score: action.score || 0,\n          modifier: getModifierFromScore(action.score),\n        },\n      }\n    case 'SET_ABILITY_TEMP_ADJUSTMENT':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          temporaryAdjustment: action.adjustment || 0,\n        },\n      }\n    default:\n      return state\n  }\n}\n","import { abilityName } from '../Abilities/types'\n\nexport type SkillName =\n  | 'acrobatics'\n  | 'appraise'\n  | 'bluff'\n  | 'climb'\n  | 'craft'\n  | 'diplomacy'\n  | 'disableDevice'\n  | 'disguise'\n  | 'escapeArtist'\n  | 'fly'\n  | 'handleAnimal'\n  | 'heal'\n  | 'intimidate'\n  | 'knowledgeArcana'\n  | 'knowledgeDungeoneering'\n  | 'knowledgeEngineering'\n  | 'knowledgeGeography'\n  | 'knowledgeHistory'\n  | 'knowledgeLocal'\n  | 'knowledgeNature'\n  | 'knowledgeNobility'\n  | 'knowledgePlanes'\n  | 'knowledgeReligion'\n  | 'linguistics'\n  | 'perception'\n  | 'perform'\n  | 'profession'\n  | 'ride'\n  | 'senseMotive'\n  | 'sleightOfHand'\n  | 'spellcraft'\n  | 'stealth'\n  | 'survival'\n  | 'swim'\n  | 'useMagicDevice'\n\nexport const quickSkillDefinitions: {\n  [k in SkillName]: {\n    baseAbility: abilityName\n    isTrainedOnly: boolean\n  }\n} = {\n  acrobatics: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  appraise: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: false,\n  },\n  bluff: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  climb: {\n    baseAbility: 'strength',\n    isTrainedOnly: false,\n  },\n  craft: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: false,\n  },\n  diplomacy: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  disableDevice: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: true,\n  },\n  disguise: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  escapeArtist: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  fly: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  handleAnimal: {\n    baseAbility: 'charisma',\n    isTrainedOnly: true,\n  },\n  heal: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  intimidate: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  knowledgeArcana: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeDungeoneering: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeEngineering: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeGeography: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeHistory: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeLocal: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeNature: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeNobility: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgePlanes: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  knowledgeReligion: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  linguistics: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  perception: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  perform: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false,\n  },\n  profession: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: true,\n  },\n  ride: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  senseMotive: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  sleightOfHand: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: true,\n  },\n  spellcraft: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: true,\n  },\n  stealth: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  survival: {\n    baseAbility: 'wisdom',\n    isTrainedOnly: false,\n  },\n  swim: {\n    baseAbility: 'strength',\n    isTrainedOnly: false,\n  },\n  useMagicDevice: {\n    baseAbility: 'charisma',\n    isTrainedOnly: true,\n  },\n}\n\nexport type Skill = {\n  name: SkillName\n  ranks: number\n  miscModifier: number\n  isClassSkill: boolean\n}\n\nexport type SkillState = {\n  [k in SkillName]: Skill\n}\n\nexport const UPDATE_SKILL_RANKS = 'UPDATE_SKILL_RANKS'\nexport const UPDATE_SKILL_MISC_MODIFIER = 'UPDATE_SKILL_MISC_MODIFIER'\nexport const UPDATE_SKILL_IS_CLASS_SKILL = 'UPDATE_SKILL_IS_CLASS_SKILL'\n\nexport type UpdateSkillRankAction = {\n  type: typeof UPDATE_SKILL_RANKS\n  payload: {\n    skillName: SkillName\n    ranks: number\n  }\n}\n\nexport type UpdateSkillMiscModifierAction = {\n  type: typeof UPDATE_SKILL_MISC_MODIFIER\n  payload: {\n    skillName: SkillName\n    miscModifier: number\n  }\n}\n\nexport type UpdateSkillIsClassSkill = {\n  type: typeof UPDATE_SKILL_IS_CLASS_SKILL\n  payload: {\n    skillName: SkillName\n    isClassSkill: boolean\n  }\n}\n\nexport type UpdateSkillActionTypes =\n  | UpdateSkillRankAction\n  | UpdateSkillMiscModifierAction\n  | UpdateSkillIsClassSkill\n","export type InitiativeState = {\n  miscModifier: number\n}\nexport const SET_INITIATIVE_MISC_MODIFIER = 'SET_INITIATIVE_MISC_MODIFIER'\nexport type SetInitiativeMiscModifierAction = {\n  type: typeof SET_INITIATIVE_MISC_MODIFIER\n  payload: number\n}\n\nexport type ArmorClassState = {\n  armorBonus: number // aus ruestung tabelle\n  shieldBonus: number // aus ruestung tabelle\n  naturalArmor: number // talente / volk\n  deflectionModifier: number // zauber?\n  miscModifier: number\n  otherModifiers: string\n}\nexport const SET_ARMOR_BONUS = 'SET_ARMOR_BONUS'\nexport type SetArmorBonusAction = {\n  type: typeof SET_ARMOR_BONUS\n  payload: number\n}\nexport const SET_SHIELD_BONUS = 'SET_SHIELD_BONUS'\nexport type SetShieldBonusAction = {\n  type: typeof SET_SHIELD_BONUS\n  payload: number\n}\nexport const SET_NATURAL_ARMOR = 'SET_NATURAL_ARMOR'\nexport type SetNaturalArmorAction = {\n  type: typeof SET_NATURAL_ARMOR\n  payload: number\n}\nexport const SET_DEFLECTION_MODIFIER = 'SET_DEFLECTION_MODIFIER'\nexport type SetDeflectionModifierAction = {\n  type: typeof SET_DEFLECTION_MODIFIER\n  payload: number\n}\nexport const SET_MISC_ARMOR_MODIFIER = 'SET_MISC_ARMOR_MODIFIER'\nexport type SetMiscArmorModifierAction = {\n  type: typeof SET_MISC_ARMOR_MODIFIER\n  payload: number\n}\nexport const SET_OTHER_ARMOR_MODIFIERS = 'SET_OTHER_ARMOR_MODIFIERS'\nexport type SetOtherArmorModifiersAction = {\n  type: typeof SET_OTHER_ARMOR_MODIFIERS\n  payload: string\n}\n\nexport type SavingThrowValues = {\n  baseSave: number // tabellen\n  magicModifier: number // zauber\n  miscModifier: number // talente\n  temporaryModifier: number\n}\nexport const SET_BASE_SAVE = 'SET_BASE_SAVE'\nexport type SetBaseSaveAction = {\n  type: typeof SET_BASE_SAVE\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newBaseSave: number\n  }\n}\nexport const SET_SAVING_THROW_MAGIC_MODIFIER = 'SET_SAVING_THROW_MAGIC_MODIFIER'\nexport type SetSavingThrowMagicModifierAction = {\n  type: typeof SET_SAVING_THROW_MAGIC_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newMagicModifier: number\n  }\n}\nexport const SET_MISC_SAVING_THROW_MODIFIER = 'SET_MISC_SAVING_THROW_MODIFIER'\nexport type SetMiscSavingThrowModifierAction = {\n  type: typeof SET_MISC_SAVING_THROW_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newMiscModifier: number\n  }\n}\nexport const SET_TEMPORARY_SAVING_THROW_MODIFIER =\n  'SET_TEMPORARY_SAVING_THROW_MODIFIER'\nexport type SetTemporarySavingThrowModifierAction = {\n  type: typeof SET_TEMPORARY_SAVING_THROW_MODIFIER\n  payload: {\n    savingThrowType: keyof SavingThrowsState\n    newTemporaryModifier: number\n  }\n}\n\nexport type SavingThrowsState = {\n  fortitude: SavingThrowValues\n  reflex: SavingThrowValues\n  will: SavingThrowValues\n}\n\nexport type AttackBonusesState = {\n  baseAttackBonus: number\n  spellResistance: number // gegenstaende, klassen, voelker\n}\nexport const SET_BASE_ATTACK_BONUS = 'SET_BASE_ATTACK_BONUS'\nexport type SetBaseAttackBonusAction = {\n  type: typeof SET_BASE_ATTACK_BONUS\n  payload: number\n}\nexport const SET_SPELL_RESISTANCE = 'SET_SPELL_RESISTANCE'\nexport type SetSpellResistanceAction = {\n  type: typeof SET_SPELL_RESISTANCE\n  payload: number\n}\n\nexport type CombatValuesState = {\n  initiative: InitiativeState\n  armorClass: ArmorClassState\n  savingThrows: SavingThrowsState\n  attackBonuses: AttackBonusesState\n}\n\nexport type CombatValuesActionTypes =\n  | SetInitiativeMiscModifierAction\n  | SetArmorBonusAction\n  | SetShieldBonusAction\n  | SetNaturalArmorAction\n  | SetDeflectionModifierAction\n  | SetMiscArmorModifierAction\n  | SetOtherArmorModifiersAction\n  | SetBaseSaveAction\n  | SetSavingThrowMagicModifierAction\n  | SetMiscSavingThrowModifierAction\n  | SetTemporarySavingThrowModifierAction\n  | SetBaseAttackBonusAction\n  | SetSpellResistanceAction\n","export type AppState = {\n  lang: 'en' | 'de'\n}\n\nexport const SET_LANGUAGE = 'SET_LANGUAGE'\n\nexport type SetLanguageAction = {\n  type: typeof SET_LANGUAGE\n  language: AppState['lang']\n}\n\nexport type AppStateActionTypes = SetLanguageAction\n","import { AppState, SET_LANGUAGE } from './types'\nimport { RootActionTypes } from '../root-reducer'\n\nconst initialState: AppState = {\n  lang: 'en',\n}\n\nexport const AppStateReducer = (\n  state: AppState = initialState,\n  action?: RootActionTypes,\n) => {\n  switch (action?.type) {\n    case SET_LANGUAGE:\n      return {\n        ...state,\n        lang: action.language,\n      }\n    default:\n      return state\n  }\n}\n","import { CharacterMetaDataReducer } from './CharacterMetaData/reducers'\nimport { AbilitiesReducer } from './Abilities/reducers'\nimport { SkillsReducer } from './Skills/reducers'\nimport {\n  CharacterMetaDataState,\n  UpdateCharacterMetaDataActionTypes,\n} from './CharacterMetaData/types'\nimport { AbilitiesActionTypes, AbilityState } from './Abilities/types'\nimport { SkillState, UpdateSkillActionTypes } from './Skills/types'\nimport {\n  CombatValuesActionTypes,\n  CombatValuesState,\n} from './CombatValues/types'\nimport { CombatValuesReducer } from './CombatValues/reducers'\nimport { combineReducers } from 'redux'\nimport { AppState, AppStateActionTypes } from './AppState/types'\nimport { AppStateReducer } from './AppState/reducers'\n\nexport type RootState = {\n  characterMetaData: CharacterMetaDataState\n  abilities: AbilityState\n  skills: SkillState\n  combatValues: CombatValuesState\n  appState: AppState\n}\n\nexport type EmptyActionType = { type: 'EMPTY_ACTION' }\nexport const EmptyAction: EmptyActionType = {\n  type: 'EMPTY_ACTION',\n}\n\nexport type RootActionTypes =\n  | CombatValuesActionTypes\n  | UpdateCharacterMetaDataActionTypes\n  | AbilitiesActionTypes\n  | UpdateSkillActionTypes\n  | AppStateActionTypes\n  | EmptyActionType\n\n// export const RootReducer = (state?: RootState, action?: RootActionTypes) => (\n//   {\n//     characterMetaData: CharacterMetaDataReducer(state?.characterMetaData, action),\n//     abilities: AbilitiesReducer(state?.abilities, action),\n//     skills: SkillsReducer(state?.skills, action),\n//     combatValues: CombatValuesReducer(state?.combatValues, action),\n//   }\n// )\n\nexport const RootReducer = combineReducers<RootState, RootActionTypes>({\n  characterMetaData: CharacterMetaDataReducer,\n  abilities: AbilitiesReducer,\n  skills: SkillsReducer,\n  combatValues: CombatValuesReducer,\n  appState: AppStateReducer,\n})\n","import {\n  quickSkillDefinitions,\n  SkillState,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n} from './types'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createInitialState = () => {\n  const result = {} as SkillState\n\n  ;(Object.keys(quickSkillDefinitions) as Array<keyof SkillState>).forEach(\n    (skillName: keyof SkillState) => {\n      result[skillName] = {\n        name: skillName,\n        isClassSkill: false,\n        miscModifier: 0,\n        ranks: 0,\n      }\n    },\n  )\n\n  return result\n}\n\nexport const SkillsReducer = (\n  state?: SkillState,\n  action?: RootActionTypes,\n): SkillState => {\n  if (!state) {\n    return createInitialState()\n  } else if (\n    action?.type === UPDATE_SKILL_MISC_MODIFIER ||\n    action?.type === UPDATE_SKILL_RANKS ||\n    action?.type === UPDATE_SKILL_IS_CLASS_SKILL\n  ) {\n    const skillCopy = {\n      ...state[action?.payload.skillName],\n    }\n\n    switch (action?.type) {\n      case UPDATE_SKILL_MISC_MODIFIER:\n        skillCopy.miscModifier = action?.payload.miscModifier\n        break\n\n      case UPDATE_SKILL_RANKS:\n        if (action?.payload.ranks < 0) {\n          // TODO: don't accept ranks > character level\n          console.warn('Ranks must be >= 0')\n        } else {\n          skillCopy.ranks = action?.payload.ranks\n        }\n        break\n\n      case UPDATE_SKILL_IS_CLASS_SKILL:\n        skillCopy.isClassSkill = action?.payload.isClassSkill\n\n        break\n    }\n\n    return {\n      ...state,\n      [action?.payload.skillName]: skillCopy,\n    }\n  } else {\n    return state\n  }\n}\n","import {\n  CombatValuesState,\n  SET_ARMOR_BONUS,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n} from './types'\nimport { getInitialCombatValuesState } from './initialState'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const CombatValuesReducer = (\n  state = getInitialCombatValuesState(),\n  action?: RootActionTypes,\n): CombatValuesState => {\n  // Handle actions that change saving throws\n  if (\n    action?.type === SET_BASE_SAVE ||\n    action?.type === SET_SAVING_THROW_MAGIC_MODIFIER ||\n    action?.type === SET_MISC_SAVING_THROW_MODIFIER ||\n    action?.type === SET_TEMPORARY_SAVING_THROW_MODIFIER\n  ) {\n    const savingThrowType = action?.payload.savingThrowType\n    const stateCopy = {\n      ...state,\n      savingThrows: {\n        ...state.savingThrows,\n        [savingThrowType]: {\n          ...state.savingThrows[savingThrowType],\n        },\n      },\n    }\n    const currentSavingThrow = stateCopy.savingThrows[savingThrowType]\n\n    switch (action.type) {\n      case SET_BASE_SAVE:\n        currentSavingThrow.baseSave = action.payload.newBaseSave\n        break\n      case SET_SAVING_THROW_MAGIC_MODIFIER:\n        currentSavingThrow.magicModifier = action.payload.newMagicModifier\n        break\n      case SET_MISC_SAVING_THROW_MODIFIER:\n        currentSavingThrow.miscModifier = action.payload.newMiscModifier\n        break\n      case SET_TEMPORARY_SAVING_THROW_MODIFIER:\n        currentSavingThrow.temporaryModifier =\n          action.payload.newTemporaryModifier\n    }\n\n    return stateCopy\n  }\n\n  switch (action?.type) {\n    case SET_INITIATIVE_MISC_MODIFIER:\n      return {\n        ...state,\n        initiative: {\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_BASE_ATTACK_BONUS:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          baseAttackBonus: action?.payload,\n        },\n      }\n\n    case SET_SPELL_RESISTANCE:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          spellResistance: action?.payload,\n        },\n      }\n\n    case SET_SHIELD_BONUS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          shieldBonus: action?.payload,\n        },\n      }\n\n    case SET_ARMOR_BONUS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          armorBonus: action?.payload,\n        },\n      }\n\n    case SET_DEFLECTION_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          deflectionModifier: action?.payload,\n        },\n      }\n\n    case SET_MISC_ARMOR_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_NATURAL_ARMOR:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          naturalArmor: action?.payload,\n        },\n      }\n\n    case SET_OTHER_ARMOR_MODIFIERS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          otherModifiers: action?.payload,\n        },\n      }\n\n    default:\n      return state\n  }\n}\n","import { CombatValuesState } from './types'\n\nexport const getInitialCombatValuesState = (): CombatValuesState => ({\n  armorClass: {\n    shieldBonus: 0,\n    armorBonus: 0,\n    deflectionModifier: 0,\n    miscModifier: 0,\n    naturalArmor: 0,\n    otherModifiers: '',\n  },\n  initiative: {\n    miscModifier: 0,\n  },\n  attackBonuses: {\n    baseAttackBonus: 0,\n    spellResistance: 0,\n  },\n  savingThrows: {\n    fortitude: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n    reflex: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n    will: {\n      baseSave: 0,\n      magicModifier: 0,\n      miscModifier: 0,\n      temporaryModifier: 0,\n    },\n  },\n})\n","import { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { RootReducer } from './root-reducer'\nimport localForage from 'localforage'\nimport { persistReducer } from 'redux-persist'\n\nconst persistenceConfig = {\n  key: 'pathfinder-character-sheet',\n  storage: localForage,\n}\n\nconst persistedReducer = persistReducer(persistenceConfig, RootReducer)\n\nexport const store = createStore(persistedReducer, devToolsEnhancer({}))\n","import {\n  UPDATE_CAMPAIGN,\n  UPDATE_CHARACTER_AGE,\n  UPDATE_CHARACTER_ALIGNMENT,\n  UPDATE_CHARACTER_CLASS,\n  UPDATE_CHARACTER_DEITY,\n  UPDATE_CHARACTER_EYES,\n  UPDATE_CHARACTER_GENDER,\n  UPDATE_CHARACTER_HAIR,\n  UPDATE_CHARACTER_HEIGHT,\n  UPDATE_CHARACTER_HOMELAND,\n  UPDATE_CHARACTER_LEVEL,\n  UPDATE_CHARACTER_NAME,\n  UPDATE_CHARACTER_RACE,\n  UPDATE_CHARACTER_SIZE_CATEGORY,\n  UPDATE_CHARACTER_WEIGHT,\n  UPDATE_PLAYER_NAME,\n  UpdateCharacterMetaDataActionTypes,\n} from './types'\nimport { CharacterGender, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const setCharacterName = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_NAME,\n  payload: name,\n})\n\nexport const setCharacterClass = (\n  className: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_CLASS,\n  payload: className,\n})\n\nexport const setCharacterRace = (\n  race: CharacterRace | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_RACE,\n  payload: race,\n})\n\nexport const setCharacterAlignment = (\n  alignment: Alignment | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_ALIGNMENT,\n  payload: alignment,\n})\n\nexport const setCharacterLevel = (\n  level: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_LEVEL,\n  payload: level,\n})\n\nexport const setCharacterDeity = (\n  deity: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_DEITY,\n  payload: deity,\n})\n\nexport const setCharacterSizeCategory = (\n  sizeCategory: SizeCategory,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_SIZE_CATEGORY,\n  payload: sizeCategory,\n})\n\nexport const setCharacterGender = (\n  gender: CharacterGender | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_GENDER,\n  payload: gender,\n})\n\nexport const setCharacterAge = (\n  age: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_AGE,\n  payload: age,\n})\n\nexport const setCharacterHomeland = (\n  homeland: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HOMELAND,\n  payload: homeland,\n})\n\nexport const setCharacterHeight = (\n  height: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HEIGHT,\n  payload: height,\n})\n\nexport const setCharacterWeight = (\n  weight: number | undefined,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_WEIGHT,\n  payload: weight,\n})\n\nexport const setCharacterHair = (\n  hair: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_HAIR,\n  payload: hair,\n})\n\nexport const setCharacterEyes = (\n  eyes: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CHARACTER_EYES,\n  payload: eyes,\n})\n\nexport const setPlayerName = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_PLAYER_NAME,\n  payload: name,\n})\n\nexport const setCampaign = (\n  name: string,\n): UpdateCharacterMetaDataActionTypes => ({\n  type: UPDATE_CAMPAIGN,\n  payload: name,\n})\n","import {\n  CharacterClass,\n  CharacterGender,\n  CharacterMetaData,\n  CharacterRace,\n  SizeCategory,\n} from './Character'\nimport { Alignment } from './Alignment'\n\nexport const UPDATE_CHARACTER_NAME = 'UPDATE_CHARACTER_NAME'\nexport const UPDATE_CHARACTER_CLASS = 'UPDATE_CHARACTER_CLASS'\nexport const UPDATE_CHARACTER_RACE = 'UPDATE_CHARACTER_RACE'\nexport const UPDATE_CHARACTER_ALIGNMENT = 'UPDATE_CHARACTER_ALIGNMENT'\nexport const UPDATE_CHARACTER_LEVEL = 'UPDATE_CHARACTER_LEVEL'\nexport const UPDATE_CHARACTER_DEITY = 'UPDATE_CHARACTER_DEITY'\nexport const UPDATE_CHARACTER_SIZE_CATEGORY = 'UPDATE_CHARACTER_SIZE_CATEGORY'\nexport const UPDATE_CHARACTER_GENDER = 'UPDATE_CHARACTER_GENDER'\nexport const UPDATE_CHARACTER_AGE = 'UPDATE_CHARACTER_AGE'\nexport const UPDATE_CHARACTER_HOMELAND = 'UPDATE_CHARACTER_HOMELAND'\nexport const UPDATE_CHARACTER_HEIGHT = 'UPDATE_CHARACTER_HEIGHT'\nexport const UPDATE_CHARACTER_WEIGHT = 'UPDATE_CHARACTER_WEIGHT'\nexport const UPDATE_CHARACTER_HAIR = 'UPDATE_CHARACTER_HAIR'\nexport const UPDATE_CHARACTER_EYES = 'UPDATE_CHARACTER_EYES'\nexport const UPDATE_PLAYER_NAME = 'UPDATE_PLAYER_NAME'\nexport const UPDATE_CAMPAIGN = 'UPDATE_CAMPAIGN'\n\ntype UpdateCharacterNameAction = {\n  type: typeof UPDATE_CHARACTER_NAME\n  payload: string\n}\n\ntype UpdateCharacterClassAction = {\n  type: typeof UPDATE_CHARACTER_CLASS\n  payload: CharacterClass | undefined\n}\n\ntype UpdateCharacterRaceAction = {\n  type: typeof UPDATE_CHARACTER_RACE\n  payload: CharacterRace | undefined\n}\n\ntype UpdateCharacterAlignmentAction = {\n  type: typeof UPDATE_CHARACTER_ALIGNMENT\n  payload: Alignment | undefined\n}\n\ntype UpdateCharacterLevelAction = {\n  type: typeof UPDATE_CHARACTER_LEVEL\n  payload: number | undefined\n}\n\ntype UpdateCharacterDeityTypeAction = {\n  type: typeof UPDATE_CHARACTER_DEITY\n  payload: string\n}\n\ntype UpdateCharacterSizeCategoryAction = {\n  type: typeof UPDATE_CHARACTER_SIZE_CATEGORY\n  payload: SizeCategory\n}\n\ntype UpdateCharacterGenderAction = {\n  type: typeof UPDATE_CHARACTER_GENDER\n  payload: CharacterGender | undefined\n}\n\ntype UpdateCharacterAgeAction = {\n  type: typeof UPDATE_CHARACTER_AGE\n  payload: number | undefined\n}\n\ntype UpdateCharacterHomelandAction = {\n  type: typeof UPDATE_CHARACTER_HOMELAND\n  payload: string\n}\n\ntype UpdateCharacterHeightAction = {\n  type: typeof UPDATE_CHARACTER_HEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterWeightAction = {\n  type: typeof UPDATE_CHARACTER_WEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterHAIRAction = {\n  type: typeof UPDATE_CHARACTER_HAIR\n  payload: string\n}\n\ntype UpdateCharacterEYESAction = {\n  type: typeof UPDATE_CHARACTER_EYES\n  payload: string\n}\n\ntype UpdatePlayerNameAction = {\n  type: typeof UPDATE_PLAYER_NAME\n  payload: string\n}\n\ntype UpdateCampaignAction = {\n  type: typeof UPDATE_CAMPAIGN\n  payload: string\n}\n\nexport type UpdateCharacterMetaDataActionTypes =\n  | UpdateCharacterNameAction\n  | UpdateCharacterClassAction\n  | UpdateCharacterRaceAction\n  | UpdateCharacterAlignmentAction\n  | UpdateCharacterLevelAction\n  | UpdateCharacterDeityTypeAction\n  | UpdateCharacterSizeCategoryAction\n  | UpdateCharacterGenderAction\n  | UpdateCharacterAgeAction\n  | UpdateCharacterHomelandAction\n  | UpdateCharacterHeightAction\n  | UpdateCharacterWeightAction\n  | UpdateCharacterHAIRAction\n  | UpdateCharacterEYESAction\n  | UpdatePlayerNameAction\n  | UpdateCampaignAction\n\nexport type CharacterMetaDataState = CharacterMetaData\n","export enum Morality {\n  GOOD,\n  NEUTRAL,\n  BAD,\n}\n\nexport enum Ethics {\n  LAW,\n  NEUTRAL,\n  CHAOS,\n}\n\nexport type Alignment = {\n  morality: Morality\n  ethics: Ethics\n}\n\nexport const NeutralAlignment = {\n  morality: Morality.NEUTRAL,\n  ethics: Ethics.NEUTRAL,\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport * as CharacterMetadataActions from '../../store/CharacterMetaData/actions'\nimport PropTypes from 'prop-types'\n\nimport './DisplayCharacterMetaData.scss'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../../store/CharacterMetaData/Character'\nimport { MetadataSelect } from './MetadataSelect/MetadataSelect'\nimport { Ethics, Morality } from '../../store/CharacterMetaData/Alignment'\n\nimport { useTranslation } from 'react-i18next'\n\nconst GenderInputOptions = [\n  { label: undefined, value: undefined },\n  { label: 'Male', value: CharacterGender.MALE },\n  { label: 'Female', value: CharacterGender.FEMALE },\n  { label: 'Other', value: CharacterGender.OTHER },\n]\n\nexport enum GenderInputTestIds {\n  wrapper = 'gender-input-wrapper',\n  select = 'gender-input-select',\n}\n\nconst SizeCategoryInputOptions = [\n  { label: 'Small', value: SizeCategory.SMALL },\n  { label: 'Medium', value: SizeCategory.MEDIUM },\n  { label: 'large', value: SizeCategory.LARGE },\n]\n\nexport enum SizeCategoryInputTestIds {\n  wrapper = 'size-category-input-wrapper',\n  select = 'size-category-input-select',\n}\n\nconst AlignmentOptions = [\n  { label: undefined, value: undefined },\n  { label: 'LG', value: { ethics: Ethics.LAW, morality: Morality.GOOD } },\n  { label: 'LN', value: { ethics: Ethics.LAW, morality: Morality.NEUTRAL } },\n  { label: 'LB', value: { ethics: Ethics.LAW, morality: Morality.BAD } },\n\n  { label: 'NG', value: { ethics: Ethics.NEUTRAL, morality: Morality.GOOD } },\n  { label: 'N', value: { ethics: Ethics.NEUTRAL, morality: Morality.NEUTRAL } },\n  { label: 'NB', value: { ethics: Ethics.NEUTRAL, morality: Morality.BAD } },\n\n  { label: 'CG', value: { ethics: Ethics.CHAOS, morality: Morality.GOOD } },\n  { label: 'CN', value: { ethics: Ethics.CHAOS, morality: Morality.NEUTRAL } },\n  { label: 'CB', value: { ethics: Ethics.CHAOS, morality: Morality.BAD } },\n]\n\nexport enum AlignmentInputTestIds {\n  wrapper = 'alignment-input-wrapper',\n  select = 'alignment-input-select',\n}\n\nconst StringInputPropTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataStringInput: React.FC<\n  PropTypes.InferProps<typeof StringInputPropTypes>\n> = ({ value, onChange, id, label }) => {\n  return (\n    <div className={`metadata-input-block ${id}`}>\n      <input value={value ?? ''} onChange={onChange} id={id} />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n\nconst NumberInputPropTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataNumberInput: React.FC<\n  PropTypes.InferProps<typeof NumberInputPropTypes>\n> = ({ value, onChange, id, label }) => {\n  return (\n    <div className={`metadata-input-block ${id}`}>\n      <input\n        value={value ?? undefined}\n        onChange={onChange}\n        id={id}\n        type={'number'}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n\nconst mapState = (state: RootState) => state.characterMetaData\n\nconst mapDispatchToProps = CharacterMetadataActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCharacterMetaData = connector(\n  ({\n    characterName,\n    setCharacterName,\n    playerName,\n    setPlayerName,\n    deity,\n    setCharacterDeity,\n    homeland,\n    setCharacterHomeland,\n    race,\n    setCharacterRace,\n    hair,\n    setCharacterHair,\n    eyes,\n    setCharacterEyes,\n    level,\n    setCharacterLevel,\n    className,\n    setCharacterClass,\n    campaign,\n    setCampaign,\n    age,\n    setCharacterAge,\n    height,\n    setCharacterHeight,\n    weight,\n    setCharacterWeight,\n    alignment,\n    setCharacterAlignment,\n    sizeCategory,\n    setCharacterSizeCategory,\n    gender,\n    setCharacterGender,\n  }: Props) => {\n    const { t } = useTranslation()\n\n    const callWithStringValue = useCallback(\n      (callback: (value: string) => any) =>\n        useCallback(\n          (event: ChangeEvent<HTMLInputElement>) =>\n            callback(event.target.value),\n          [callback],\n        ),\n      [],\n    )\n\n    const callWithNumberValue = useCallback(\n      (callback: (value: number | undefined) => any) =>\n        useCallback(\n          (event: ChangeEvent<HTMLInputElement>) => {\n            const value = parseInt(event.target.value)\n            callback(Number.isNaN(value) ? undefined : value)\n          },\n          [callback],\n        ),\n      [],\n    )\n\n    const translatedAlignmentOptions = AlignmentOptions.map(\n      (alignmentOption) => {\n        const ethics = alignmentOption.value?.ethics\n        const morality = alignmentOption.value?.morality\n\n        let newLabel =\n          t(`alignments.ethics.${ethics}.long`) +\n          ' ' +\n          t(`alignments.morality.${morality}.long`)\n\n        if (ethics === Ethics.NEUTRAL && morality === Morality.NEUTRAL) {\n          newLabel = t('alignments.neutral.long')\n        } else if (ethics === undefined && morality === undefined) {\n          newLabel = ''\n        }\n\n        return {\n          ...alignmentOption,\n          label: newLabel,\n        }\n      },\n    )\n\n    const translatedGenderOptions = GenderInputOptions.map((genderOption) => ({\n      ...genderOption,\n      label:\n        genderOption.value !== undefined\n          ? t(`genders.${genderOption.value}`)\n          : '',\n    }))\n\n    const translatedSizeOptions = SizeCategoryInputOptions.map(\n      (sizeOption) => ({\n        ...sizeOption,\n        label:\n          sizeOption.value !== undefined\n            ? t(`sizeCategories.${sizeOption.value}`)\n            : '',\n      }),\n    )\n\n    return (\n      <div className={'character-meta-data'}>\n        <MetadataStringInput\n          id={'character-name'}\n          value={characterName}\n          label={t('characterMetaData.characterName')}\n          onChange={callWithStringValue(setCharacterName)}\n        />\n        <MetadataSelect\n          onChange={setCharacterAlignment}\n          options={translatedAlignmentOptions}\n          id={'alignment'}\n          label={t('characterMetaData.alignment')}\n          value={alignment}\n          testIds={AlignmentInputTestIds}\n        />\n        <MetadataStringInput\n          id={'player-name'}\n          value={playerName}\n          label={t('characterMetaData.player')}\n          onChange={callWithStringValue(setPlayerName)}\n        />\n        <MetadataStringInput\n          id={'class-name'}\n          value={className}\n          label={t('characterMetaData.characterClass')}\n          onChange={callWithStringValue(setCharacterClass)}\n        />\n        <MetadataNumberInput\n          id={'level'}\n          value={level}\n          label={t('characterMetaData.level')}\n          onChange={callWithNumberValue(setCharacterLevel)}\n        />\n        <MetadataStringInput\n          id={'deity'}\n          value={deity}\n          label={t('characterMetaData.deity')}\n          onChange={callWithStringValue(setCharacterDeity)}\n        />\n        <MetadataSelect\n          testIds={SizeCategoryInputTestIds}\n          onChange={setCharacterSizeCategory}\n          options={translatedSizeOptions}\n          id={'size-category'}\n          value={sizeCategory}\n          label={t('characterMetaData.sizeCategory')}\n        />\n        <MetadataSelect\n          testIds={GenderInputTestIds}\n          onChange={setCharacterGender}\n          options={translatedGenderOptions}\n          id={'gender'}\n          value={gender}\n          label={t('characterMetaData.gender')}\n        />\n        <MetadataStringInput\n          id={'campaign'}\n          value={campaign}\n          label={t('characterMetaData.campaign')}\n          onChange={callWithStringValue(setCampaign)}\n        />\n        <MetadataStringInput\n          id={'homeland'}\n          value={homeland}\n          label={t('characterMetaData.homeland')}\n          onChange={callWithStringValue(setCharacterHomeland)}\n        />\n        <MetadataStringInput\n          id={'race'}\n          value={race}\n          label={t('characterMetaData.race')}\n          onChange={callWithStringValue(setCharacterRace)}\n        />\n        <MetadataStringInput\n          id={'hair'}\n          value={hair}\n          label={t('characterMetaData.hair')}\n          onChange={callWithStringValue(setCharacterHair)}\n        />\n        <MetadataStringInput\n          id={'eyes'}\n          value={eyes}\n          label={t('characterMetaData.eyes')}\n          onChange={callWithStringValue(setCharacterEyes)}\n        />\n        <MetadataNumberInput\n          id={'age'}\n          value={age}\n          label={t('characterMetaData.age')}\n          onChange={callWithNumberValue(setCharacterAge)}\n        />\n        <MetadataNumberInput\n          id={'height'}\n          value={height}\n          label={t('characterMetaData.height')}\n          onChange={callWithNumberValue(setCharacterHeight)}\n        />\n        <MetadataNumberInput\n          id={'weight'}\n          value={weight}\n          label={t('characterMetaData.weight')}\n          onChange={callWithNumberValue(setCharacterWeight)}\n        />\n      </div>\n    )\n  },\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Overwrite } from '../../types/util'\nimport './BoxInput.scss'\n\nexport const BoxInputPropTypes = {\n  className: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(PropTypes.string.isRequired),\n  ]).isRequired,\n  testId: PropTypes.string,\n  labelTestId: PropTypes.string,\n  hideBox: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n}\n\nexport const BoxInputDefaultProps = {\n  onChange: () => {},\n  className: '',\n  value: '',\n  hideBox: false,\n  type: '',\n  disabled: false,\n}\n\ntype PropType = Overwrite<\n  PropTypes.InferProps<typeof BoxInputPropTypes>,\n  {\n    onChange?: React.EventHandler<React.ChangeEvent>\n  }\n>\n\nexport const BoxInput = (props: PropType) => {\n  return (\n    <label\n      className={`box-input ${props.hideBox ? 'hide-box' : ''} ${\n        props.className\n      }`}\n      data-testid={props.labelTestId}\n    >\n      <input\n        onChange={props.onChange}\n        value={props.value}\n        data-testid={props.testId}\n        type={props.type}\n        disabled={props.disabled}\n      />\n      {props.label ? <span className={'label'}>{props.label}</span> : null}\n    </label>\n  )\n}\n\nBoxInput.propTypes = BoxInputPropTypes\nBoxInput.defaultProps = BoxInputDefaultProps\n","import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { BoxInput, BoxInputDefaultProps, BoxInputPropTypes } from './BoxInput'\nimport { Overwrite } from '../../types/util'\n\nconst propTypes = {\n  ...BoxInputPropTypes,\n  value: PropTypes.number,\n  type: PropTypes.any,\n  onChange: PropTypes.func,\n}\n\nconst defaultProps = {\n  ...BoxInputDefaultProps,\n  type: undefined,\n  onChange: undefined,\n}\n\ntype PropTypes = Overwrite<\n  PropTypes.InferProps<typeof propTypes>,\n  {\n    onChange?: (\n      value: number | undefined,\n      evt: React.ChangeEvent<HTMLInputElement>,\n    ) => void\n  }\n>\n\nexport const BoxNumberInput = (props: PropTypes) => {\n  const changeHandlerFromProps = props.onChange\n  const changeHandler = useCallback(\n    (evt: React.ChangeEvent<HTMLInputElement>) => {\n      let valueAsNumber = parseInt(evt.target.value)\n      changeHandlerFromProps?.(\n        Number.isNaN(valueAsNumber) ? undefined : valueAsNumber,\n        evt,\n      )\n    },\n    [changeHandlerFromProps],\n  )\n\n  return (\n    <BoxInput\n      {...props}\n      value={props.value === null ? undefined : props.value}\n      onChange={changeHandler}\n      type={'number'}\n      disabled={!Boolean(props.onChange)}\n    />\n  )\n}\nBoxNumberInput.propTypes = propTypes\nBoxNumberInput.defaultProps = defaultProps\n","import React from 'react'\nimport './BlackBox.scss'\n\ntype Props = {\n  [key: string]: any\n  className?: string\n}\n\nexport const BlackBox: React.FC<Props> = (props) => {\n  const { children, className, ...propsWithoutChildren } = props\n  return (\n    <div {...propsWithoutChildren} className={`black-box ${className}`}>\n      {props.children}\n    </div>\n  )\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n} from '../../store/Abilities/actions'\nimport {\n  AbilityAttributes,\n  abilityName,\n  AbilityState,\n} from '../../store/Abilities/types'\nimport { getModifierFromScore } from '../../store/Abilities/selectors'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport './DisplayAbilities.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\nimport { useTranslation } from 'react-i18next'\n\nconst mapState = (state: RootState) => ({\n  abilities: state.abilities,\n})\n\nconst mapDispatchToProps = {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayAbilities = connector(\n  ({ abilities, setAbilityScore, setAbilityTempAdjustment }: Props) => {\n    const { t } = useTranslation()\n\n    const onScoreChange = (abilityName: keyof AbilityState) => (\n      newVal?: number,\n    ) => {\n      if (newVal !== undefined) {\n        setAbilityScore(abilityName, newVal)\n      }\n    }\n    const onTempAdjustmentChange = (abilityName: keyof AbilityState) => (\n      newVal?: number,\n    ) => {\n      if (newVal !== undefined) {\n        setAbilityTempAdjustment(abilityName, newVal)\n      }\n    }\n\n    useEffect(() => {\n      console.log('first render')\n    }, [])\n\n    const abilityNames = Object.keys(abilities) as Array<abilityName>\n    const abilityElements = abilityNames\n      .sort((nameA, nameB) =>\n        t(`abilities.${nameA}.short`).localeCompare(\n          t(`abilities.${nameB}.short`),\n        ),\n      )\n      .map((abilityName) => {\n        const abilityAttributes: AbilityAttributes = abilities[abilityName]\n\n        return (\n          <tr key={abilityName}>\n            <td>\n              <BlackBox>\n                {t(`abilities.${abilityName}.short`)}\n                <aside>{t(`abilities.${abilityName}.long`)}</aside>\n              </BlackBox>\n            </td>\n            <td>\n              <BoxNumberInput\n                value={abilityAttributes.score}\n                onChange={onScoreChange(abilityName)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={getModifierFromScore(abilityAttributes.score)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={abilityAttributes.temporaryAdjustment || null}\n                onChange={onTempAdjustmentChange(abilityName)}\n              />\n            </td>\n            <td>\n              <BoxNumberInput\n                value={\n                  abilityAttributes.temporaryAdjustment\n                    ? getModifierFromScore(\n                        abilityAttributes.score +\n                          abilityAttributes.temporaryAdjustment,\n                      )\n                    : null\n                }\n              />\n            </td>\n          </tr>\n        )\n      })\n    return (\n      <table>\n        <thead>\n          <tr>\n            <td>{t('abilitiesTable.abilityName')}</td>\n            <td>{t('abilitiesTable.score')}</td>\n            <td>{t('abilitiesTable.modifier')}</td>\n            <td>{t('abilitiesTable.tempAdjustment')}</td>\n            <td>{t('abilitiesTable.tempModifier')}</td>\n          </tr>\n        </thead>\n        <tbody>{abilityElements}</tbody>\n      </table>\n    )\n  },\n)\n","import {\n  abilityName,\n  SET_ABILITY_SCORE,\n  SET_ABILITY_TEMP_ADJUSTMENT,\n  SetAbilityScoreAction,\n  SetAbilityTempAdjustmentAction,\n} from './types'\n\nexport const setAbilityScore = (\n  ability: abilityName,\n  newScore: number,\n): SetAbilityScoreAction => {\n  return {\n    type: SET_ABILITY_SCORE,\n    ability: ability,\n    score: newScore,\n  }\n}\n\nexport const setAbilityTempAdjustment = (\n  ability: abilityName,\n  newAdjustment: number,\n): SetAbilityTempAdjustmentAction => {\n  return {\n    type: SET_ABILITY_TEMP_ADJUSTMENT,\n    ability: ability,\n    adjustment: newAdjustment,\n  }\n}\n","export type abilityName =\n  | 'strength'\n  | 'dexterity'\n  | 'constitution'\n  | 'intelligence'\n  | 'wisdom'\n  | 'charisma'\n\nexport type AbilityAttributes = {\n  score: number\n  temporaryAdjustment: number\n}\n\nexport type AbilityState = {\n  [k in abilityName]: AbilityAttributes\n}\n\nexport const SET_ABILITY_SCORE = 'SET_ABILITY_SCORE'\nexport const SET_ABILITY_TEMP_ADJUSTMENT = 'SET_ABILITY_TEMP_ADJUSTMENT'\n\nexport type SetAbilityScoreAction = {\n  type: typeof SET_ABILITY_SCORE\n  ability: keyof AbilityState\n  score: number\n}\n\nexport type SetAbilityTempAdjustmentAction = {\n  type: typeof SET_ABILITY_TEMP_ADJUSTMENT\n  ability: keyof AbilityState\n  adjustment: number\n}\n\nexport type AbilitiesActionTypes =\n  | SetAbilityTempAdjustmentAction\n  | SetAbilityScoreAction\n","import {\n  SkillName,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n  UpdateSkillActionTypes,\n} from './types'\n\nexport const setSkillRanks = (\n  skillName: SkillName,\n  ranks: number,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_RANKS,\n    payload: {\n      skillName,\n      ranks,\n    },\n  }\n}\n\nexport const setSkillMiscMod = (\n  skillName: SkillName,\n  miscModifier: number,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_MISC_MODIFIER,\n    payload: {\n      skillName,\n      miscModifier,\n    },\n  }\n}\n\nexport const setIsSkillClassSkill = (\n  skillName: SkillName,\n  isClassSkill: boolean,\n): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_IS_CLASS_SKILL,\n    payload: {\n      skillName,\n      isClassSkill,\n    },\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './StyledCheckbox.scss'\n\nconst propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool.isRequired,\n}\n\nexport const StyledCheckbox = (\n  props: PropTypes.InferProps<typeof propTypes>,\n) => {\n  return (\n    <input\n      className={`styled-checkbox ${props.className}`}\n      type={'checkbox'}\n      checked={props.checked ?? false}\n      onChange={props.onChange!}\n      disabled={props.disabled}\n    />\n  )\n}\n\nStyledCheckbox.propTypes = propTypes\nStyledCheckbox.defaultProps = {\n  checked: false,\n  className: '',\n  onChange: () => {},\n  disabled: false,\n}\n","import { quickSkillDefinitions, Skill, SkillState } from './types'\nimport { createSelector } from 'reselect'\nimport { getAbilityModifiers } from '../Abilities/selectors'\nimport { abilityName } from '../Abilities/types'\nimport { RootState } from '../root-reducer'\n\nexport const getSkills = (state: RootState) => state.skills\nexport type TotalSkillBonuses = {\n  [k in keyof SkillState]: number\n}\n\nexport const computeTotalSkillBonus = (\n  skill: Skill,\n  abilityModifier: number,\n): number => {\n  return (\n    abilityModifier +\n    skill.ranks +\n    skill.miscModifier +\n    (skill.isClassSkill && skill.ranks >= 1 ? 3 : 0)\n  )\n}\n\nexport const getTotalSkillBonuses = createSelector(\n  [getSkills, getAbilityModifiers],\n  (skills, abilityModifiers) => {\n    const skillNames = Object.keys(skills) as Array<keyof SkillState>\n    return skillNames.reduce((totalSkillsBonuses, currSkillName) => {\n      const baseAbilityName = quickSkillDefinitions[currSkillName]\n        .baseAbility as abilityName\n\n      return {\n        ...totalSkillsBonuses,\n        [currSkillName]: computeTotalSkillBonus(\n          skills[currSkillName],\n          abilityModifiers[baseAbilityName],\n        ),\n      }\n    }, {} as TotalSkillBonuses)\n  },\n)\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent } from 'react'\nimport {\n  quickSkillDefinitions,\n  Skill,\n  SkillName,\n} from '../../store/Skills/types'\nimport * as UpdateSkillsActions from '../../store/Skills/actions'\n\nimport './DisplaySkills.scss'\nimport { StyledCheckbox } from '../StyledCheckbox/StyledCheckbox'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getTotalSkillBonuses } from '../../store/Skills/selectors'\nimport { useTranslation } from 'react-i18next'\n\nconst mapState = (state: RootState) => ({\n  skills: state.skills,\n  abilityModifiers: getAbilityModifiers(state),\n  totalSkillBonuses: getTotalSkillBonuses(state),\n})\n\nconst mapDispatchToProps = UpdateSkillsActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplaySkills = connector(\n  ({\n    skills,\n    setIsSkillClassSkill,\n    setSkillMiscMod,\n    setSkillRanks,\n    abilityModifiers,\n    totalSkillBonuses,\n  }: Props) => {\n    const { t } = useTranslation()\n    const onSkillRanksChange = (skillName: SkillName) => (\n      event: ChangeEvent<HTMLInputElement>,\n    ) => {\n      setSkillRanks(skillName, parseInt(event.target.value))\n    }\n\n    const onSkillMiscModChange = (skillName: SkillName) => (\n      event: ChangeEvent<HTMLInputElement>,\n    ) => {\n      setSkillMiscMod(skillName, parseInt(event.target.value))\n    }\n\n    return (\n      <div className={'skills'}>\n        <table>\n          <thead>\n            <tr>\n              <th>{t('skillsTable.skillName')}</th>\n              <th>\n                {t('general.total')} {t('general.bonus')}\n              </th>\n              <th> {/* Base ability name */} </th>\n              <th>\n                {t('general.ability.short')}.-{t('general.modifier.short')}.\n              </th>\n              <th> {/* + */} </th>\n              <th>{t('skillsTable.ranks')}</th>\n              <th> {/* + */} </th>\n              <th>\n                {t('general.misc.short')}. {t('general.modifier.short')}.\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {(Object.entries(skills) as Array<[SkillName, Skill]>)\n              .sort(([skillA], [skillB]) =>\n                t(`skills.${skillA}`).localeCompare(t(`skills.${skillB}`)),\n              )\n              .map(([skillName, skill], index) => {\n                const {\n                  baseAbility: abilityName,\n                  isTrainedOnly,\n                } = quickSkillDefinitions[skillName]\n                return (\n                  <tr key={index}>\n                    <td>\n                      <label>\n                        <StyledCheckbox\n                          checked={skill.isClassSkill}\n                          onChange={() =>\n                            setIsSkillClassSkill(skillName, !skill.isClassSkill)\n                          }\n                        />\n                        {t(`skills.${skillName}`)}\n                        {isTrainedOnly ? ' *' : ''}\n                      </label>\n                    </td>\n                    <td>{totalSkillBonuses[skillName]}</td>\n                    <td>={t(`abilities.${abilityName}.short`)}</td>\n                    <td>{abilityModifiers[abilityName]}</td>\n                    <td>+</td>\n                    <td>\n                      <input\n                        type={'number'}\n                        value={skill.ranks}\n                        onChange={onSkillRanksChange(skillName)}\n                      />\n                    </td>\n                    <td>+</td>\n                    <td>\n                      <input\n                        type={'number'}\n                        value={skill.miscModifier}\n                        onChange={onSkillMiscModChange(skillName)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n            <tr className={'legend'}>\n              <td>\n                <StyledCheckbox checked={true} disabled />\n                {t('skillsTable.classSkill')} &nbsp; &nbsp; *{' '}\n                {t('skillsTable.trainedOnly')}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  },\n)\n","import {\n  SavingThrowsState,\n  SET_ARMOR_BONUS,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  SetArmorBonusAction,\n  SetBaseAttackBonusAction,\n  SetBaseSaveAction,\n  SetDeflectionModifierAction,\n  SetInitiativeMiscModifierAction,\n  SetMiscArmorModifierAction,\n  SetMiscSavingThrowModifierAction,\n  SetNaturalArmorAction,\n  SetOtherArmorModifiersAction,\n  SetSavingThrowMagicModifierAction,\n  SetShieldBonusAction,\n  SetSpellResistanceAction,\n  SetTemporarySavingThrowModifierAction,\n} from './types'\n\nexport const setBaseSave = (\n  newBaseSave: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetBaseSaveAction => ({\n  type: SET_BASE_SAVE,\n  payload: { savingThrowType, newBaseSave },\n})\n\nexport const setSavingThrowMagicModifier = (\n  newMagicModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetSavingThrowMagicModifierAction => ({\n  type: SET_SAVING_THROW_MAGIC_MODIFIER,\n  payload: {\n    savingThrowType,\n    newMagicModifier,\n  },\n})\n\nexport const setMiscSavingThrowModifier = (\n  newMiscModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetMiscSavingThrowModifierAction => ({\n  type: SET_MISC_SAVING_THROW_MODIFIER,\n  payload: {\n    savingThrowType,\n    newMiscModifier,\n  },\n})\n\nexport const setTemporarySavingThrowModifier = (\n  newTemporaryModifier: number,\n  savingThrowType: keyof SavingThrowsState,\n): SetTemporarySavingThrowModifierAction => ({\n  type: SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  payload: {\n    newTemporaryModifier,\n    savingThrowType,\n  },\n})\n\nexport const setInitiativeMiscModifier = (\n  newMiscModifier: number,\n): SetInitiativeMiscModifierAction => ({\n  type: SET_INITIATIVE_MISC_MODIFIER,\n  payload: newMiscModifier,\n})\n\nexport const setBaseAttackBonus = (\n  newBaseAttackBonus: number,\n): SetBaseAttackBonusAction => ({\n  type: SET_BASE_ATTACK_BONUS,\n  payload: newBaseAttackBonus,\n})\n\nexport const setSpellResistance = (\n  newSpellResistance: number,\n): SetSpellResistanceAction => ({\n  type: SET_SPELL_RESISTANCE,\n  payload: newSpellResistance,\n})\n\nexport const setShieldBonus = (\n  newShieldBonus: number,\n): SetShieldBonusAction => ({\n  type: SET_SHIELD_BONUS,\n  payload: newShieldBonus,\n})\n\nexport const setArmorBonus = (newArmorBonus: number): SetArmorBonusAction => ({\n  type: SET_ARMOR_BONUS,\n  payload: newArmorBonus,\n})\n\nexport const setDeflectionModifier = (\n  newDeflectionModifier: number,\n): SetDeflectionModifierAction => ({\n  type: SET_DEFLECTION_MODIFIER,\n  payload: newDeflectionModifier,\n})\n\nexport const setMiscArmorModifier = (\n  newMiscArmorModifier: number,\n): SetMiscArmorModifierAction => ({\n  type: SET_MISC_ARMOR_MODIFIER,\n  payload: newMiscArmorModifier,\n})\n\nexport const setNaturalArmor = (\n  newNaturalArmor: number,\n): SetNaturalArmorAction => ({\n  type: SET_NATURAL_ARMOR,\n  payload: newNaturalArmor,\n})\n\nexport const setOtherArmorModifiers = (\n  newOtherArmorModifiers: string,\n): SetOtherArmorModifiersAction => ({\n  type: SET_OTHER_ARMOR_MODIFIERS,\n  payload: newOtherArmorModifiers,\n})\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\n\nexport const getCharacterMetadata = (state: RootState) =>\n  state.characterMetaData\n\nexport const getSizeModifier = createSelector(\n  [getCharacterMetadata],\n  (characterMetadataState: CharacterMetaDataState) => {\n    switch (characterMetadataState.sizeCategory) {\n      case SizeCategory.LARGE:\n        return -1\n      case SizeCategory.MEDIUM:\n        return 0\n      case SizeCategory.SMALL:\n        return 1\n      default:\n        return NaN\n    }\n  },\n)\n","import { CombatValuesState } from './types'\nimport { AbilityModifiers, getAbilityModifiers } from '../Abilities/selectors'\nimport { getSizeModifier } from '../CharacterMetaData/selectors'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\n\nexport const getCombatValues = (state: RootState) => state.combatValues\n\nexport const getTotalInitiativeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) =>\n    state.initiative.miscModifier + abilityModifiers.dexterity,\n)\n\nexport const getArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 +\n    state.armorClass.armorBonus +\n    state.armorClass.shieldBonus +\n    abilityModifiers.dexterity +\n    sizeModifier +\n    state.armorClass.naturalArmor +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getTouchArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 +\n    abilityModifiers.dexterity +\n    sizeModifier +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFlatFootedArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 +\n    state.armorClass.armorBonus +\n    state.armorClass.shieldBonus +\n    Math.min(0, abilityModifiers.dexterity) +\n    sizeModifier +\n    state.armorClass.naturalArmor +\n    state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFortitudeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.fortitude\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.constitution +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getReflexBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.reflex\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.dexterity +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getWillBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) => {\n    const savingThrow = state.savingThrows.will\n\n    return (\n      savingThrow.baseSave +\n      abilityModifiers.wisdom +\n      savingThrow.magicModifier +\n      savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n    )\n  },\n)\n\nexport const getCombatManeuverBonus = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    state.attackBonuses.baseAttackBonus +\n    abilityModifiers.strength -\n    sizeModifier,\n)\n\nexport const getCombatManeuverDefense = createSelector(\n  [getCombatManeuverBonus, getAbilityModifiers],\n  (combatManeuverBonus: number, abilityModifiers: AbilityModifiers) =>\n    combatManeuverBonus + abilityModifiers.dexterity + 10,\n)\n","import React from 'react'\nimport './invertedBorderRadius.scss'\nimport PropTypes, { InferProps } from 'prop-types'\n\nconst InvertedBorderRadiusPropTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\nexport const InvertedBorderRadius: React.FC<\n  InferProps<typeof InvertedBorderRadiusPropTypes>\n> = (\n  props = {\n    className: '',\n    style: {},\n  },\n) => {\n  return (\n    <div\n      className={`inverted-rounded-corners ${props.className ?? ''}`}\n      style={{\n        ...(props.style ?? {}),\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nInvertedBorderRadius.propTypes = InvertedBorderRadiusPropTypes\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport * as CombatValueActions from '../../store/CombatValues/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport {\n  getArmorClass,\n  getCombatManeuverBonus,\n  getCombatManeuverDefense,\n  getCombatValues,\n  getFlatFootedArmorClass,\n  getFortitudeBonus,\n  getReflexBonus,\n  getTotalInitiativeBonus,\n  getTouchArmorClass,\n  getWillBonus,\n} from '../../store/CombatValues/selectors'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getSizeModifier } from '../../store/CharacterMetaData/selectors'\nimport { SavingThrowsState } from '../../store/CombatValues/types'\nimport { abilityName } from '../../store/Abilities/types'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport './DisplayCombatValues.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\nimport { useTranslation } from 'react-i18next'\n\nconst callIfDefined: <T>(\n  callback: (param: T) => void,\n) => (param?: T) => void = (callback) => {\n  return (param) => {\n    if (param !== undefined) {\n      callback(param)\n    }\n  }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  combatValues: getCombatValues(state),\n  totalInitiativeBonus: getTotalInitiativeBonus(state),\n  abilityModifiers: getAbilityModifiers(state),\n  totalArmorClass: getArmorClass(state),\n  sizeModifier: getSizeModifier(state),\n  touchArmorClass: getTouchArmorClass(state),\n  flatFootedArmorClass: getFlatFootedArmorClass(state),\n  fortitudeBonus: getFortitudeBonus(state),\n  reflexBonus: getReflexBonus(state),\n  willBonus: getWillBonus(state),\n  combatManeuverBonus: getCombatManeuverBonus(state),\n  combatManeuverDefense: getCombatManeuverDefense(state),\n})\nconst mapDispatchToProps = CombatValueActions\nconst connector = connect(mapStateToProps, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCombatValues = connector(\n  ({\n    combatValues,\n    setInitiativeMiscModifier,\n    totalInitiativeBonus,\n    abilityModifiers,\n    totalArmorClass,\n    setArmorBonus,\n    setShieldBonus,\n    setNaturalArmor,\n    setDeflectionModifier,\n    setMiscArmorModifier,\n    sizeModifier,\n    touchArmorClass,\n    flatFootedArmorClass,\n    fortitudeBonus,\n    reflexBonus,\n    willBonus,\n    combatManeuverBonus,\n    combatManeuverDefense,\n    setBaseSave,\n    setSavingThrowMagicModifier,\n    setMiscSavingThrowModifier,\n    setTemporarySavingThrowModifier,\n    setBaseAttackBonus,\n    setSpellResistance,\n  }: Props) => {\n    const { t } = useTranslation()\n    const setForCertainSavingThrow = useCallback(\n      (\n        savingThrowName: keyof SavingThrowsState,\n        setter: (val: number, savingThrowName: keyof SavingThrowsState) => void,\n      ) =>\n        useCallback(\n          (newValue?: number) => {\n            if (newValue !== undefined) {\n              setter(newValue, savingThrowName)\n            }\n          },\n          [savingThrowName, setter],\n        ),\n      [],\n    )\n\n    return (\n      <div className={'combat-values-wrapper'}>\n        <div className={'initiative'} data-testid={'initiative-container'}>\n          <BlackBox>\n            {t('combatValues.initiative.long')}\n            <aside>{t('general.modifier.long')}</aside>\n          </BlackBox>\n          <BoxNumberInput\n            value={totalInitiativeBonus}\n            label={t('general.total')}\n            testId={'initiative-total-bonus'}\n          />\n          =\n          <BoxNumberInput\n            value={abilityModifiers.dexterity}\n            label={`${t('abilities.dexterity.short')}. ${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'initiative-dexterity-modifier'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setInitiativeMiscModifier)}\n            value={combatValues.initiative.miscModifier}\n            label={`${t('general.misc.short')}. ${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'initiative-misc-modifier'}\n          />\n        </div>\n        <div className={'armor-class'}>\n          <BlackBox>\n            {t('combatValues.armorClass.short')}\n            <aside>{t('combatValues.armorClass.long')}</aside>\n          </BlackBox>\n          <BoxNumberInput\n            value={totalArmorClass}\n            testId={'total-armor-class'}\n          />\n          =\n          <BoxNumberInput\n            value={10}\n            testId={'armor-class-general-bonus'}\n            hideBox={true}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setArmorBonus)}\n            value={combatValues.armorClass.armorBonus}\n            label={`${t('combatValues.armorBonus')}-${t('general.bonus')}`}\n            testId={'armor-class-armor-bonus'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setShieldBonus)}\n            value={combatValues.armorClass.shieldBonus}\n            label={`${t('combatValues.shield')}-${t('general.bonus')}`}\n            testId={'armor-class-shield-bonus'}\n          />\n          +\n          <BoxNumberInput\n            value={abilityModifiers.dexterity}\n            label={`${t('abilities.dexterity.short')}-${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'armor-class-dexterity-mod'}\n          />\n          +\n          <BoxNumberInput\n            value={sizeModifier}\n            label={`${t('combatValues.sizeModifier')}-${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'armor-class-size-modifier'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setNaturalArmor)}\n            value={combatValues.armorClass.naturalArmor}\n            label={t('combatValues.naturalArmor')}\n            testId={'armor-class-natural-armor'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setDeflectionModifier)}\n            value={combatValues.armorClass.deflectionModifier}\n            label={`${t('combatValues.deflectionModifier')}.-${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'armor-class-deflection-modifier'}\n          />\n          +\n          <BoxNumberInput\n            onChange={callIfDefined(setMiscArmorModifier)}\n            value={combatValues.armorClass.miscModifier}\n            label={`${t('general.misc.short')}.-${t(\n              'general.modifier.short',\n            )}.`}\n            testId={'armor-class-misc-modifier'}\n          />\n        </div>\n        <div className={'touch-armor-class'}>\n          <BlackBox>\n            {t('combatValues.touch')}\n            <aside>{t('combatValues.armorClass.long')}</aside>\n          </BlackBox>\n          <BoxNumberInput\n            value={touchArmorClass}\n            testId={'touch-armor-class'}\n          />\n        </div>\n        <div className={'flat-footed-armor-class'}>\n          <BlackBox>\n            {t('combatValues.flatFooted')}\n            <aside>{t('combatValues.armorClass.long')}</aside>\n          </BlackBox>\n          <BoxNumberInput\n            value={flatFootedArmorClass}\n            testId={'flat-footed-class'}\n          />\n        </div>\n        <div className={'saving-throws'}>\n          {(Object.keys(combatValues.savingThrows) as Array<\n            keyof SavingThrowsState\n          >)\n            .sort((nameA, nameB) =>\n              t(`combatValues.savingThrows.${nameA}`).localeCompare(\n                t(`combatValues.savingThrows.${nameB}`),\n              ),\n            )\n            .map((savingThrowName, index) => {\n              const savingThrow = combatValues.savingThrows[savingThrowName]\n              let baseAbilityName: abilityName\n              let savingThrowBonus: number\n\n              switch (savingThrowName) {\n                case 'fortitude':\n                  baseAbilityName = 'constitution'\n                  savingThrowBonus = fortitudeBonus\n                  break\n                case 'reflex':\n                  baseAbilityName = 'dexterity'\n                  savingThrowBonus = reflexBonus\n                  break\n                case 'will':\n                  savingThrowBonus = willBonus\n                  baseAbilityName = 'wisdom'\n                  break\n              }\n\n              const abilityModifier = abilityModifiers[baseAbilityName]\n\n              return (\n                <React.Fragment key={index}>\n                  <BlackBox>\n                    {t(`combatValues.savingThrows.${savingThrowName}`)}\n                    <aside>({t(`abilities.${baseAbilityName}.long`)})</aside>\n                  </BlackBox>\n                  <BoxNumberInput value={savingThrowBonus} />\n                  =\n                  <BoxNumberInput\n                    value={savingThrow.baseSave}\n                    onChange={setForCertainSavingThrow(\n                      savingThrowName,\n                      setBaseSave,\n                    )}\n                  />\n                  +\n                  <BoxNumberInput value={abilityModifier} />\n                  +\n                  <BoxNumberInput\n                    value={savingThrow.magicModifier}\n                    onChange={setForCertainSavingThrow(\n                      savingThrowName,\n                      setSavingThrowMagicModifier,\n                    )}\n                  />\n                  +\n                  <BoxNumberInput\n                    value={savingThrow.miscModifier}\n                    onChange={setForCertainSavingThrow(\n                      savingThrowName,\n                      setMiscSavingThrowModifier,\n                    )}\n                  />\n                  +\n                  <BoxNumberInput\n                    value={savingThrow.temporaryModifier}\n                    onChange={setForCertainSavingThrow(\n                      savingThrowName,\n                      setTemporarySavingThrowModifier,\n                    )}\n                  />\n                </React.Fragment>\n              )\n            })}\n        </div>\n        <label className={'base-attack-bonus'}>\n          <InvertedBorderRadius>\n            {t('combatValues.baseAttackBonus.long')}\n          </InvertedBorderRadius>\n          <BoxNumberInput\n            value={combatValues.attackBonuses.baseAttackBonus}\n            onChange={callIfDefined(setBaseAttackBonus)}\n          />\n        </label>\n        <label className={'spell-resistance'}>\n          <BlackBox>{t('combatValues.spellResistance')}</BlackBox>\n          <BoxNumberInput\n            value={combatValues.attackBonuses.spellResistance}\n            onChange={callIfDefined(setSpellResistance)}\n          />\n        </label>\n        <div className={'combat-values'}>\n          <div className={'combat-bonus'}>\n            <InvertedBorderRadius>\n              {t('combatValues.combatManeuverBonus.short')}\n            </InvertedBorderRadius>\n            <BoxNumberInput\n              value={combatManeuverBonus}\n              label={t('general.total')}\n            />\n            =\n            <BoxNumberInput\n              value={combatValues.attackBonuses.baseAttackBonus}\n              label={t('combatValues.baseAttackBonus.short')}\n            />\n            +\n            <BoxNumberInput\n              value={abilityModifiers.strength}\n              label={`${t('abilities.strength.short')}.-${t(\n                'general.modifier.short',\n              )}.`}\n            />\n            +\n            <BoxNumberInput\n              value={-sizeModifier}\n              label={`${t('combatValues.sizeModifier')}-${t(\n                'general.modifier.short',\n              )}.`}\n            />\n          </div>\n          <div className={'combat-defense'}>\n            <InvertedBorderRadius>\n              {t('combatValues.combatManeuverDefense.short')}\n            </InvertedBorderRadius>\n            <BoxNumberInput\n              value={combatManeuverDefense}\n              label={t('general.total')}\n            />\n            =\n            <BoxNumberInput\n              value={combatValues.attackBonuses.baseAttackBonus}\n              label={t('combatValues.baseAttackBonus.short')}\n            />\n            +\n            <BoxNumberInput\n              value={abilityModifiers.strength}\n              label={`${t('abilities.strength.short')}.-${t(\n                'general.modifier.short',\n              )}.`}\n            />\n            +\n            <BoxNumberInput\n              value={abilityModifiers.dexterity}\n              label={`${t('abilities.dexterity.short')}.-${t(\n                'general.modifier.short',\n              )}.`}\n            />\n            +\n            <BoxNumberInput\n              value={-sizeModifier}\n              label={`${t('combatValues.sizeModifier')}-${t(\n                'general.modifier.short',\n              )}.`}\n            />\n            +\n            <BoxNumberInput value={10} hideBox={true} />\n          </div>\n        </div>\n      </div>\n    )\n  },\n)\n","import { RootState } from '../root-reducer'\n\nexport const getLanguage = (state: RootState) => state.appState.lang\n","import React from 'react'\nimport { RootState } from '../store/root-reducer'\nimport { getLanguage } from '../store/AppState/selectors'\nimport { setLanguage } from '../store/AppState/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport 'flag-icon-css/sass/flag-icon.scss'\nimport './LanguageSwitcher.scss'\n\nconst mapState = (state: RootState) => ({\n  language: getLanguage(state),\n})\n\nconst mapDispatchToProps = {\n  setLanguage,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const LanguageSwitcher = connector(({ setLanguage }: Props) => {\n  return (\n    <div className={'language-switcher'}>\n      <span\n        className={'flag-icon flag-icon-de'}\n        onClick={() => setLanguage('de')}\n      />\n      <span\n        className={'flag-icon flag-icon-us'}\n        onClick={() => setLanguage('en')}\n      />\n    </div>\n  )\n})\n","import { AppState, SET_LANGUAGE, SetLanguageAction } from './types'\n\nexport const setLanguage = (\n  newLanguage: AppState['lang'],\n): SetLanguageAction => ({\n  type: SET_LANGUAGE,\n  language: newLanguage,\n})\n","import { TranslationResource } from './i18nSetup'\nimport { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\n\nexport const en: TranslationResource = {\n  translation: {\n    general: {\n      modifier: {\n        short: 'Mod',\n        long: 'Modifier',\n      },\n      misc: {\n        short: 'Misc',\n        long: 'Miscellaneous',\n      },\n      ability: {\n        short: 'Abil',\n        long: 'Ability',\n      },\n      total: 'Total',\n      bonus: 'Bonus',\n    },\n    abilities: {\n      charisma: {\n        short: 'CHA',\n        long: 'charisma',\n      },\n      constitution: {\n        short: 'CON',\n        long: 'constitution',\n      },\n      dexterity: {\n        short: 'DEX',\n        long: 'dexterity',\n      },\n      intelligence: {\n        short: 'INT',\n        long: 'intelligence',\n      },\n      strength: {\n        short: 'STR',\n        long: 'strength',\n      },\n      wisdom: {\n        short: 'WIS',\n        long: 'wisdom',\n      },\n    },\n    abilitiesTable: {\n      abilityName: 'Ability name',\n      score: 'Score',\n      modifier: 'Mod.',\n      tempAdjustment: 'Temp. Adjustment',\n      tempModifier: 'Temp. Mod.',\n    },\n    skills: {\n      acrobatics: 'acrobatics',\n      appraise: 'appraise',\n      bluff: 'bluff',\n      climb: 'climb',\n      craft: 'craft',\n      diplomacy: 'diplomacy',\n      disableDevice: 'disable Device',\n      disguise: 'disguise',\n      escapeArtist: 'escape artist',\n      fly: 'fly',\n      handleAnimal: 'handle animal',\n      heal: 'heal',\n      intimidate: 'intimidate',\n      knowledgeArcana: 'knowledge arcana',\n      knowledgeDungeoneering: 'knowledge dungeoneering',\n      knowledgeEngineering: 'knowledge engineering',\n      knowledgeGeography: 'knowledge geography',\n      knowledgeHistory: 'knowledge history',\n      knowledgeLocal: 'knowledge local',\n      knowledgeNature: 'knowledge nature',\n      knowledgeNobility: 'knowledge nobility',\n      knowledgePlanes: 'knowledge planes',\n      knowledgeReligion: 'knowledge religion',\n      linguistics: 'linguistics',\n      perception: 'perception',\n      perform: 'perform',\n      profession: 'profession',\n      ride: 'ride',\n      senseMotive: 'sense motive',\n      sleightOfHand: 'sleight of hand',\n      spellcraft: 'spellcraft',\n      stealth: 'stealth',\n      survival: 'survival',\n      swim: 'swim',\n      useMagicDevice: 'use magic device',\n    },\n    skillsTable: {\n      title: 'Skills',\n      ranks: 'Ranks',\n      skillName: 'Skill names',\n      classSkill: 'Class skill',\n      trainedOnly: 'Trained only',\n    },\n    combatValues: {\n      savingThrows: {\n        fortitude: 'fortitude',\n        reflex: 'reflex',\n        will: 'will',\n      },\n      initiative: {\n        short: 'INI',\n        long: 'Initiative',\n      },\n      armorClass: {\n        short: 'AC',\n        long: 'Armor class',\n      },\n      armorBonus: 'Armor',\n      shield: 'Shield',\n      sizeModifier: 'Size',\n      naturalArmor: 'Natural armor',\n      deflectionModifier: 'Deflection',\n      flatFooted: 'Flat-footed',\n      touch: 'Touch',\n      baseAttackBonus: {\n        short: 'BAB',\n        long: 'Base attack bonus',\n      },\n      spellResistance: 'Spell resistance',\n      combatManeuverBonus: {\n        short: 'CMB',\n        long: 'Combat Maneuver Bonus',\n      },\n      combatManeuverDefense: {\n        short: 'CMD',\n        long: 'Combat Maneuver Defense',\n      },\n    },\n    alignments: {\n      ethics: {\n        [Ethics.LAW]: {\n          long: 'Lawful',\n          short: 'L',\n        },\n        [Ethics.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Ethics.CHAOS]: {\n          long: 'Chaos',\n          short: 'C',\n        },\n      },\n      morality: {\n        [Morality.GOOD]: {\n          long: 'Good',\n          short: 'G',\n        },\n        [Morality.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Morality.BAD]: {\n          long: 'Bad',\n          short: 'B',\n        },\n      },\n      neutral: {\n        long: 'Neutral',\n        short: 'N',\n      },\n    },\n    genders: {\n      [CharacterGender.MALE]: 'Male',\n      [CharacterGender.FEMALE]: 'Female',\n      [CharacterGender.OTHER]: 'Other',\n    },\n    sizeCategories: {\n      [SizeCategory.SMALL]: 'Small',\n      [SizeCategory.MEDIUM]: 'Normal',\n      [SizeCategory.LARGE]: 'Large',\n    },\n    characterMetaData: {\n      characterName: 'character name',\n      alignment: 'alignment',\n      player: 'player',\n      characterClass: 'character class',\n      level: 'level',\n      race: 'race',\n      campaign: 'campaign',\n      homeland: 'homeland',\n      deity: 'deity',\n      sizeCategory: 'size category',\n      gender: 'gender',\n      age: 'age',\n      height: 'height',\n      weight: 'weight',\n      hair: 'hair',\n      eyes: 'eyes',\n    },\n  },\n}\n","import { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport { TranslationResource } from './i18nSetup'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\n\nexport const de: TranslationResource = {\n  translation: {\n    general: {\n      modifier: {\n        short: 'Mod',\n        long: 'Modifikator',\n      },\n      misc: {\n        short: 'Sonst',\n        long: 'Sonstig',\n      },\n      ability: {\n        short: 'Attr',\n        long: 'Attribut',\n      },\n      total: 'Gesamt',\n      bonus: 'Bonus',\n    },\n    abilities: {\n      charisma: {\n        short: 'CH',\n        long: 'Charisma',\n      },\n      constitution: {\n        short: 'KO',\n        long: 'Konstitution',\n      },\n      dexterity: {\n        short: 'GE',\n        long: 'Geschicklichkeit',\n      },\n      intelligence: {\n        short: 'IN',\n        long: 'Intelligenz',\n      },\n      strength: {\n        short: 'ST',\n        long: 'Stärke',\n      },\n      wisdom: {\n        short: 'WE',\n        long: 'Weisheit',\n      },\n    },\n    abilitiesTable: {\n      abilityName: 'Attribut',\n      score: 'Attributs­wert',\n      modifier: 'Attributs­mod.',\n      tempAdjustment: 'Temp. Wert',\n      tempModifier: 'Temp. Mod.',\n    },\n    skills: {\n      acrobatics: 'Akrobatik',\n      appraise: 'Schätzen',\n      bluff: 'Bluffen',\n      climb: 'Klettern',\n      craft: 'Handwerk',\n      diplomacy: 'Diplomatie',\n      disableDevice: 'Mechanismus Ausschalten',\n      disguise: 'Verkleiden',\n      escapeArtist: 'Entfesslungskunst',\n      fly: 'Fliegen',\n      handleAnimal: 'Mit Tieren umgehen',\n      heal: 'Heilkunde',\n      intimidate: 'Einschüchtern',\n      knowledgeArcana: 'Wissen (Arkanes)',\n      knowledgeDungeoneering: 'Wissen (Gewölbekunde)',\n      knowledgeEngineering: 'Wissen (Baukunst)',\n      knowledgeGeography: 'Wissen (Geographie)',\n      knowledgeHistory: 'Wissen (Geschichte)',\n      knowledgeLocal: 'Wissen (Lokales)',\n      knowledgeNature: 'Wissen (Natur)',\n      knowledgeNobility: 'Wissen (Adel und Königshäuser)',\n      knowledgePlanes: 'Wissen (Die Ebenen)',\n      knowledgeReligion: 'Wissen (Religion)',\n      linguistics: 'Sprachenkunde',\n      perception: 'Wahrnehmung',\n      perform: 'Auftreten',\n      profession: 'Beruf',\n      ride: 'Reiten',\n      senseMotive: 'Motiv erkennen',\n      sleightOfHand: 'Fingerfertigkeit',\n      spellcraft: 'Zauberkunde',\n      stealth: 'Heimlichkeit',\n      survival: 'Überlebenskunst',\n      swim: 'Schwimmen',\n      useMagicDevice: 'Magischen Gegenstand benutzen',\n    },\n    skillsTable: {\n      title: 'Fertigkeiten',\n      ranks: 'Ränge',\n      skillName: 'Fertigkeit',\n      classSkill: 'Klassenfertigkeit',\n      trainedOnly: 'Nur geübt',\n    },\n    combatValues: {\n      savingThrows: {\n        fortitude: 'Zähigkeit',\n        reflex: 'Reflex',\n        will: 'Wille',\n      },\n      initiative: {\n        short: 'INI',\n        long: 'Initiative',\n      },\n      armorClass: {\n        short: 'RK',\n        long: 'Rüstungs­klasse',\n      },\n      armorBonus: 'Rüstungs',\n      shield: 'Schild',\n      sizeModifier: 'Größen',\n      naturalArmor: 'Natürl. Rüstung',\n      deflectionModifier: 'Ablenkungs',\n      flatFooted: 'Auf dem falschen Fuß',\n      touch: 'Berührung',\n      baseAttackBonus: {\n        short: 'GAB',\n        long: 'Grund-Angriffsbonus',\n      },\n      spellResistance: 'Zauber­resistenz',\n      combatManeuverBonus: {\n        short: 'KMB',\n        long: 'Kampfmaneuverbonus',\n      },\n      combatManeuverDefense: {\n        short: 'KMV',\n        long: 'Kampfmaneuververteidigung',\n      },\n    },\n    alignments: {\n      ethics: {\n        [Ethics.LAW]: {\n          long: 'Rechtschaffend',\n          short: 'R',\n        },\n        [Ethics.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Ethics.CHAOS]: {\n          long: 'Chaotisch',\n          short: 'C',\n        },\n      },\n      morality: {\n        [Morality.GOOD]: {\n          long: 'Gut',\n          short: 'G',\n        },\n        [Morality.NEUTRAL]: {\n          long: 'Neutral',\n          short: 'N',\n        },\n        [Morality.BAD]: {\n          long: 'Böse',\n          short: 'B',\n        },\n      },\n      neutral: {\n        long: 'Neutral',\n        short: 'N',\n      },\n    },\n    genders: {\n      [CharacterGender.MALE]: 'Männlich',\n      [CharacterGender.FEMALE]: 'Weiblich',\n      [CharacterGender.OTHER]: 'Sonstige',\n    },\n    sizeCategories: {\n      [SizeCategory.SMALL]: 'Klein',\n      [SizeCategory.MEDIUM]: 'Normal',\n      [SizeCategory.LARGE]: 'Groß',\n    },\n    characterMetaData: {\n      characterName: 'Charaktername',\n      alignment: 'Gesinnung',\n      player: 'Spieler',\n      characterClass: 'Klasse',\n      level: 'Stufe',\n      race: 'Volk',\n      campaign: 'Kampagne',\n      homeland: 'Heimat',\n      deity: 'Gottheit',\n      sizeCategory: 'Größenkategorie',\n      gender: 'Geschlecht',\n      age: 'Alter',\n      height: 'Größe',\n      weight: 'Gewicht',\n      hair: 'Haarfarbe',\n      eyes: 'Augenfarbe',\n    },\n  },\n}\n","import i18n, { Resource } from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport { abilityName } from '../store/Abilities/types'\nimport { en } from './en'\nimport { de } from './de'\nimport { SkillName } from '../store/Skills/types'\nimport { Ethics, Morality } from '../store/CharacterMetaData/Alignment'\nimport {\n  CharacterGender,\n  SizeCategory,\n} from '../store/CharacterMetaData/Character'\nimport { useEffect, useState } from 'react'\nimport { getLanguage } from '../store/AppState/selectors'\nimport { useSelector } from 'react-redux'\n\nexport type TranslationResource = Resource & {\n  translation: {\n    general: {\n      modifier: {\n        short: string\n        long: string\n      }\n      misc: {\n        short: string\n        long: string\n      }\n      ability: {\n        short: string\n        long: string\n      }\n      total: string\n      bonus: string\n    }\n    abilities: {\n      [key in abilityName]: {\n        short: string\n        long: string\n      }\n    }\n    abilitiesTable: {\n      abilityName: string\n      score: string\n      modifier: string\n      tempAdjustment: string\n      tempModifier: string\n    }\n    skills: {\n      [key in SkillName]: string\n    }\n    skillsTable: {\n      title: string\n      skillName: string\n      ranks: string\n      classSkill: string\n      trainedOnly: string\n    }\n    combatValues: {\n      savingThrows: {\n        fortitude: string\n        reflex: string\n        will: string\n      }\n      initiative: {\n        short: string\n        long: string\n      }\n      armorClass: {\n        short: string\n        long: string\n      }\n      armorBonus: string\n      shield: string\n      sizeModifier: string\n      naturalArmor: string\n      deflectionModifier: string\n      touch: string\n      flatFooted: string\n      baseAttackBonus: {\n        short: string\n        long: string\n      }\n      spellResistance: string\n      combatManeuverBonus: {\n        short: string\n        long: string\n      }\n      combatManeuverDefense: {\n        short: string\n        long: string\n      }\n    }\n    alignments: {\n      ethics: {\n        [key in Ethics]: {\n          long: string\n          short: string\n        }\n      }\n      morality: {\n        [key in Morality]: {\n          long: string\n          short: string\n        }\n      }\n      neutral: {\n        long: string\n        short: string\n      }\n    }\n    genders: {\n      [key in CharacterGender]: string\n    }\n    sizeCategories: {\n      [key in SizeCategory]: string\n    }\n    characterMetaData: {\n      characterName: string\n      alignment: string\n      player: string\n      characterClass: string\n      level: string\n      race: string\n      campaign: string\n      homeland: string\n      deity: string\n      sizeCategory: string\n      gender: string\n      age: string\n      height: string\n      weight: string\n      hair: string\n      eyes: string\n    }\n  }\n}\n\nexport const initializeI18n = () => {\n  return i18n.use(initReactI18next).init({\n    resources: {\n      en,\n      de,\n    },\n    lng: 'en',\n    fallbackLng: 'en',\n  })\n}\n\nexport const useI18nSetup = () => {\n  const [hasLoaded, setHasBeenInitialized] = useState(false)\n  useEffect(() => {\n    initializeI18n().then(() => setHasBeenInitialized(true))\n  }, [])\n\n  const language = useSelector(getLanguage)\n  useEffect(() => {\n    if (hasLoaded) {\n      i18n.changeLanguage(language).catch(console.error)\n    }\n  }, [language, hasLoaded])\n\n  return { hasLoaded }\n}\n","import React from 'react'\nimport { DisplayCharacterMetaData } from '../DisplayCharacterMetaData/DisplayCharacterMetaData'\nimport { DisplayAbilities } from '../DisplayAbilities/DisplayAbilities'\nimport { DisplaySkills } from '../DisplaySkills/DisplaySkills'\nimport { DisplayCombatValues } from '../DisplayCombatValues/DisplayCombatValues'\nimport { LanguageSwitcher } from '../LanguageSwitcher'\nimport { useI18nSetup } from '../../i18n/i18nSetup'\n\nexport const CharacterSheet: React.FC = () => {\n  const { hasLoaded: i18nHasLoaded } = useI18nSetup()\n\n  return i18nHasLoaded ? (\n    <div>\n      <img\n        className={'pathfinder-logo'}\n        alt={'Pathfinder logo'}\n        src={'./pathfinderDE-logo.png'}\n      />\n      <LanguageSwitcher />\n      <DisplayCharacterMetaData />\n      <DisplayAbilities />\n      <DisplayCombatValues />\n      <DisplaySkills />\n    </div>\n  ) : null\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport { CharacterSheet } from './components/CharacterSheet/CharacterSheet'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst persistor = persistStore(store)\n\nconst App: React.FC = () => {\n  return (\n    <PersistGate persistor={persistor}>\n      <Provider store={store}>\n        <CharacterSheet />\n      </Provider>\n    </PersistGate>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}