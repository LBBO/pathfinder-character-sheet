{"version":3,"sources":["store/CharacterMetaData/Alignment.ts","store/CharacterMetaData/reducers.ts","store/Abilities/selectors.ts","store/Abilities/reducers.ts","store/Skills/types.ts","store/Skills/reducers.ts","store/index.ts","store/root-reducer.ts","store/CharacterMetaData/actions.ts","store/CharacterMetaData/types.ts","components/AlignmentInput/AlignmentInput.tsx","components/DisplayCharacterMetaData/DisplayCharacterMetaData.tsx","components/InvertedBorderRadius/InvertedBorderRadius.tsx","components/DisplayAbilities/DisplayAbilities.tsx","store/Abilities/actions.ts","store/Abilities/types.ts","store/Skills/actions.ts","components/StyledCheckbox/StyledCheckbox.tsx","components/DisplaySkills/DisplaySkills.tsx","components/CharacterSheet/CharacterSheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Morality","Ethics","initialState","level","characterName","getModifierFromScore","score","Math","floor","charisma","temporaryAdjustment","constitution","dexterity","intelligence","strength","wisdom","quickSkillDefinitions","acrobatics","baseAbility","isTrainedOnly","appraise","bluff","climb","craft","diplomacy","disableDevice","disguise","escapeArtist","fly","handleAnimal","heal","intimidate","knowledgeArcana","knowledgeDungeoneering","knowledgeEngineering","knowledgeGeography","knowledgeHistory","knowledgeLocal","knowledgeNature","knowledgeNobility","knowledgePlanes","knowledgeReligion","linguistics","perception","perform","profession","ride","senseMotive","sleightOfHand","spellcraft","stealth","survival","swim","useMagicDevice","updateTotalSkillBonus","skill","totalBonus","abilityModifier","ranks","miscModifier","isClassSkill","createInitialState","abilityModifiers","result","Object","keys","forEach","skillName","baseAbilityName","name","applyNewModifiers","state","abilities","copy","entries","SkillsReducer","action","updatedSkill","abilitiesChanged","type","payload","console","warn","store","createStore","abilitiesState","characterMetaData","campaign","age","alignment","className","deity","eyes","gender","hair","height","homeland","race","sizeCategory","weight","playerName","CharacterMetaDataReducer","ability","modifier","adjustment","AbilitiesReducer","reduce","modifiers","abilityName","values","skills","devToolsEnhancer","setCharacterName","setCharacterClass","setCharacterRace","setCharacterAlignment","setCharacterLevel","setCharacterDeity","setCharacterSizeCategory","setCharacterGender","setCharacterAge","setCharacterHomeland","setCharacterHeight","setCharacterWeight","setCharacterHair","setCharacterEyes","setPlayerName","setCampaign","NEUTRAL","options","ethics","LAW","morality","GOOD","BAD","CHAOS","AlignmentInput","PropTypes","any","func","isRequired","string","value","onChange","id","label","currentValue","find","data-testid","event","target","map","optionName","index","key","htmlFor","mapDispatchToProps","CharacterMetadataActions","connector","connect","MetadataStringInput","MetadataNumberInput","number","undefined","DisplayCharacterMetaData","callWithStringValue","useCallback","callback","callWithNumberValue","parseInt","Number","isNaN","InvertedBorderRadius","object","props","style","children","setAbilityScore","newScore","setAbilityTempAdjustment","newAdjustment","DisplayAbilities","onScoreChange","onTempAdjustmentChange","abilityElements","abilityAttributes","fontSize","setSkillRanks","setSkillMiscMod","setIsSkillClassSkill","StyledCheckbox","bool","checked","defaultProps","UpdateSkillsActions","DisplaySkills","onSkillRanksChange","onSkillMiscModChange","CharacterSheet","alt","src","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.265644fe.chunk.js","sourcesContent":["export enum Morality {\n  GOOD,\n  NEUTRAL,\n  BAD,\n}\n\nexport enum Ethics {\n  LAW,\n  NEUTRAL,\n  CHAOS\n}\n\nexport type Alignment = {\n  morality: Morality\n  ethics: Ethics\n}\n\nexport const NeutralAlignment = {\n  morality: Morality.NEUTRAL,\n  ethics: Ethics.NEUTRAL,\n}\n","import { CharacterMetaDataState, UpdateCharacterMetaDataActionTypes } from './types'\n\nconst initialState: CharacterMetaDataState = {\n  level: 0,\n  characterName: '',\n}\n\nexport const CharacterMetaDataReducer = (\n  state = initialState, action?: UpdateCharacterMetaDataActionTypes): CharacterMetaDataState => {\n  switch (action?.type) {\n    case 'UPDATE_CHARACTER_NAME':\n      return {\n        ...state,\n        characterName: action.payload,\n      }\n    case 'UPDATE_CAMPAIGN':\n      return {\n        ...state,\n        campaign: action.payload,\n      }\n    case 'UPDATE_CHARACTER_AGE':\n      return {\n        ...state,\n        age: action.payload,\n      }\n    case 'UPDATE_CHARACTER_ALIGNMENT':\n      return {\n        ...state,\n        alignment: action.payload,\n      }\n    case 'UPDATE_CHARACTER_CLASS':\n      return {\n        ...state,\n        className: action.payload,\n      }\n    case 'UPDATE_CHARACTER_DEITY':\n      return {\n        ...state,\n        deity: action.payload,\n      }\n    case 'UPDATE_CHARACTER_EYES':\n      return {\n        ...state,\n        eyes: action.payload,\n      }\n    case 'UPDATE_CHARACTER_GENDER':\n      return {\n        ...state,\n        gender: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HAIR':\n      return {\n        ...state,\n        hair: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HEIGHT':\n      return {\n        ...state,\n        height: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HOMELAND':\n      return {\n        ...state,\n        homeland: action.payload,\n      }\n    case 'UPDATE_CHARACTER_LEVEL':\n      return {\n        ...state,\n        level: action.payload,\n      }\n    case 'UPDATE_CHARACTER_RACE':\n      return {\n        ...state,\n        race: action.payload,\n      }\n    case 'UPDATE_CHARACTER_SIZE_CATEGORY':\n      return {\n        ...state,\n        sizeCategory: action.payload,\n      }\n    case 'UPDATE_CHARACTER_WEIGHT':\n      return {\n        ...state,\n        weight: action.payload,\n      }\n    case 'UPDATE_PLAYER_NAME':\n      return {\n        ...state,\n        playerName: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { AbilityAttributes, abilityName, AbilityState } from './types'\n\nexport type AbilityModifiers = {\n  [k in abilityName]: number\n}\n\nexport const getModifierFromScore = (score: number) => Math.floor(score / 2) - 5\n\nexport const getCurrentModifiersFromAbilities = (abilitiesState: AbilityState) => (Object.entries(abilitiesState) as Array<[abilityName, AbilityAttributes]>)\n  .reduce((modifiers: AbilityModifiers, [abilityName, values]) => {\n    modifiers[abilityName] = getModifierFromScore(values.score + values.temporaryAdjustment)\n\n    return modifiers\n  }, {} as AbilityModifiers)\n","import { AbilitiesActionTypes, AbilityState } from './types'\nimport { getModifierFromScore } from './selectors'\n\nexport const createDefaultAbility = () => ({\n  score: 10,\n  temporaryAdjustment: 0,\n})\n\nconst initialState: AbilityState = {\n  charisma: createDefaultAbility(),\n  constitution: createDefaultAbility(),\n  dexterity: createDefaultAbility(),\n  intelligence: createDefaultAbility(),\n  strength: createDefaultAbility(),\n  wisdom: createDefaultAbility(),\n}\n\nexport const AbilitiesReducer = (state: AbilityState = initialState, action?: AbilitiesActionTypes): AbilityState => {\n  switch (action?.type) {\n    case 'SET_ABILITY_SCORE':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          score: action.score || 0,\n          modifier: getModifierFromScore(action.score),\n        },\n      }\n    case 'SET_ABILITY_TEMP_ADJUSTMENT':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          temporaryAdjustment: action.adjustment || 0,\n        },\n      }\n    default:\n      return state\n  }\n}\n","export const quickSkillDefinitions = {\n  acrobatics: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  appraise: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: false\n  },\n  bluff: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  climb: {\n    baseAbility: \"strength\",\n    isTrainedOnly: false\n  },\n  craft: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: false\n  },\n  diplomacy: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  disableDevice: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: true\n  },\n  disguise: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  escapeArtist: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  fly: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  handleAnimal: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: true\n  },\n  heal: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  intimidate: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  knowledgeArcana: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeDungeoneering: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeEngineering: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeGeography: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeHistory: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeLocal: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeNature: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeNobility: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgePlanes: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeReligion: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  linguistics: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  perception: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  perform: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  profession: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: true\n  },\n  ride: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  senseMotive: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  sleightOfHand: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: true\n  },\n  spellcraft: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  stealth: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  survival: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  swim: {\n    baseAbility: \"strength\",\n    isTrainedOnly: false\n  },\n  useMagicDevice: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: true\n  }\n}\n\nexport type SkillName = keyof typeof quickSkillDefinitions\n\nexport type Skill = {\n  name: SkillName,\n  abilityModifier: number,\n  ranks: number,\n  miscModifier: number,\n  totalBonus: number,\n  isClassSkill: boolean\n}\n\nexport type SkillState = {\n  [k in keyof typeof quickSkillDefinitions]: Skill\n}\n\nexport const UPDATE_SKILL_RANKS = 'UPDATE_SKILL_RANKS'\nexport const UPDATE_SKILL_MISC_MODIFIER = 'UPDATE_SKILL_MISC_MODIFIER'\nexport const UPDATE_SKILL_IS_CLASS_SKILL = 'UPDATE_SKILL_IS_CLASS_SKILL'\n\nexport type UpdateSkillRankAction = {\n  type: typeof UPDATE_SKILL_RANKS,\n  payload: {\n    skillName: SkillName,\n    ranks: number,\n  },\n}\n\nexport type UpdateSkillMiscModifierAction = {\n  type: typeof UPDATE_SKILL_MISC_MODIFIER,\n  payload: {\n    skillName: SkillName,\n    miscModifier: number,\n  },\n}\n\nexport type UpdateSkillIsClassSkill = {\n  type: typeof UPDATE_SKILL_IS_CLASS_SKILL,\n  payload: {\n    skillName: SkillName,\n    isClassSkill: boolean,\n  },\n}\n\nexport type UpdateSkillActionTypes = UpdateSkillRankAction | UpdateSkillMiscModifierAction | UpdateSkillIsClassSkill\n","import {\n  quickSkillDefinitions,\n  Skill,\n  SkillState,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n  UpdateSkillActionTypes,\n} from './types'\nimport { abilityName } from '../Abilities/types'\nimport { AbilityModifiers } from '../Abilities/selectors'\n\nexport const updateTotalSkillBonus = (skill: Skill) => {\n  skill.totalBonus = skill.abilityModifier + skill.ranks + skill.miscModifier + (skill.isClassSkill && skill.ranks >= 1 ? 3 : 0)\n}\n\nexport const createInitialState = (abilityModifiers: AbilityModifiers) => {\n  const result = {} as SkillState\n\n  (Object.keys(quickSkillDefinitions) as Array<keyof SkillState>)\n    .forEach((skillName: keyof SkillState) => {\n      const baseAbilityName = quickSkillDefinitions[skillName].baseAbility as abilityName\n      result[skillName] = {\n        name: skillName,\n        isClassSkill: false,\n        abilityModifier: abilityModifiers[baseAbilityName],\n        miscModifier: 0,\n        ranks: 0,\n        totalBonus: abilityModifiers[baseAbilityName],\n      }\n\n      updateTotalSkillBonus(result[skillName])\n    })\n\n  return result\n}\n\nexport const applyNewModifiers = (state: SkillState, abilities: AbilityModifiers): SkillState => {\n  const copy = { ...state };\n\n  (Object.entries(state) as Array<[keyof SkillState, Skill]>).forEach(([skillName, skill]) => {\n    const baseAbilityName = quickSkillDefinitions[skillName].baseAbility as abilityName\n\n    copy[skillName] = {\n      ...skill,\n      abilityModifier: abilities[baseAbilityName],\n    }\n\n    updateTotalSkillBonus(copy[skillName])\n  })\n\n  return copy\n}\n\nexport const SkillsReducer = (\n  state?: SkillState,\n  action?: UpdateSkillActionTypes,\n  abilities?: AbilityModifiers,\n  abilitiesChanged = false\n): SkillState => {\n  if (!state) {\n    return createInitialState(abilities!)\n  }\n\n  if (abilitiesChanged) {\n    return applyNewModifiers(state, abilities!)\n  }\n\n  let updatedSkill: Skill\n  switch (action?.type) {\n    case UPDATE_SKILL_MISC_MODIFIER:\n      updatedSkill = {\n        ...state[action?.payload.skillName],\n        miscModifier: action?.payload.miscModifier,\n      }\n      break\n\n    case UPDATE_SKILL_RANKS:\n      if (action?.payload.ranks < 0) {\n        // TODO: don't accept ranks > character level\n        console.warn('Ranks must be >= 0')\n      } else {\n        updatedSkill = {\n          ...state[action?.payload.skillName],\n          ranks: action?.payload.ranks,\n        }\n      }\n\n      break\n\n    case UPDATE_SKILL_IS_CLASS_SKILL:\n      updatedSkill = {\n        ...state[action?.payload.skillName],\n        isClassSkill: action?.payload.isClassSkill,\n      }\n\n      break\n  }\n\n  // @ts-ignore updatedSkill is used before it is assigned\n  if (updatedSkill && action) {\n    updateTotalSkillBonus(updatedSkill)\n\n    return {\n      ...state,\n      [action?.payload.skillName]: updatedSkill,\n    }\n  } else {\n    return state\n  }\n}\n","import { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { rootReducer } from './root-reducer'\n\nexport const store = createStore(\n  rootReducer,\n  devToolsEnhancer({}),\n)\n","import { CharacterMetaDataReducer } from './CharacterMetaData/reducers'\nimport { AbilitiesReducer } from './Abilities/reducers'\nimport { SkillsReducer } from './Skills/reducers'\nimport { CharacterMetaDataState, UpdateCharacterMetaDataActionTypes } from './CharacterMetaData/types'\nimport { AbilitiesActionTypes, AbilityState } from './Abilities/types'\nimport { SkillState, UpdateSkillActionTypes } from './Skills/types'\nimport { Action } from 'redux'\nimport { getCurrentModifiersFromAbilities } from './Abilities/selectors'\n\nexport type RootState = {\n  characterMetaData: CharacterMetaDataState,\n  abilities: AbilityState,\n  skills: SkillState,\n}\n\nexport type RootActionTypes = UpdateCharacterMetaDataActionTypes | AbilitiesActionTypes | UpdateSkillActionTypes\n\nexport const rootReducer = (state?: RootState, action?: Action): RootState => {\n  const characterMetaData = CharacterMetaDataReducer(state?.characterMetaData, action as UpdateCharacterMetaDataActionTypes)\n  const abilities = AbilitiesReducer(state?.abilities, action as AbilitiesActionTypes)\n  const abilityModifiers = getCurrentModifiersFromAbilities(abilities)\n\n  return {\n    characterMetaData,\n    abilities,\n    skills: SkillsReducer(state?.skills, action as UpdateSkillActionTypes, abilityModifiers, abilities !== state?.abilities),\n  }\n}\n","import {\n  UPDATE_CAMPAIGN,\n  UPDATE_CHARACTER_AGE,\n  UPDATE_CHARACTER_ALIGNMENT,\n  UPDATE_CHARACTER_CLASS,\n  UPDATE_CHARACTER_DEITY,\n  UPDATE_CHARACTER_EYES,\n  UPDATE_CHARACTER_GENDER,\n  UPDATE_CHARACTER_HAIR,\n  UPDATE_CHARACTER_HEIGHT,\n  UPDATE_CHARACTER_HOMELAND,\n  UPDATE_CHARACTER_LEVEL,\n  UPDATE_CHARACTER_NAME,\n  UPDATE_CHARACTER_RACE,\n  UPDATE_CHARACTER_SIZE_CATEGORY,\n  UPDATE_CHARACTER_WEIGHT,\n  UPDATE_PLAYER_NAME,\n  UpdateCharacterMetaDataActionTypes,\n} from './types'\nimport { CharacterGender, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const setCharacterName = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_NAME,\n    payload: name,\n  }\n)\n\nexport const setCharacterClass = (className: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_CLASS,\n    payload: className,\n  }\n)\n\nexport const setCharacterRace = (race: CharacterRace | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_RACE,\n    payload: race,\n  }\n)\n\nexport const setCharacterAlignment = (alignment: Alignment | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_ALIGNMENT,\n    payload: alignment,\n  }\n)\n\nexport const setCharacterLevel = (level: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_LEVEL,\n    payload: level,\n  }\n)\n\nexport const setCharacterDeity = (deity: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_DEITY,\n    payload: deity,\n  }\n)\n\nexport const setCharacterSizeCategory = (sizeCategory: SizeCategory | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_SIZE_CATEGORY,\n    payload: sizeCategory,\n  }\n)\n\nexport const setCharacterGender = (gender: CharacterGender | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_GENDER,\n    payload: gender,\n  }\n)\n\nexport const setCharacterAge = (age: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_AGE,\n    payload: age,\n  }\n)\n\nexport const setCharacterHomeland = (homeland: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HOMELAND,\n    payload: homeland,\n  }\n)\n\nexport const setCharacterHeight = (height: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HEIGHT,\n    payload: height,\n  }\n)\n\nexport const setCharacterWeight = (weight: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_WEIGHT,\n    payload: weight,\n  }\n)\n\nexport const setCharacterHair = (hair: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HAIR,\n    payload: hair,\n  }\n)\n\nexport const setCharacterEyes = (eyes: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_EYES,\n    payload: eyes,\n  }\n)\n\nexport const setPlayerName = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_PLAYER_NAME,\n    payload: name,\n  }\n)\n\nexport const setCampaign = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CAMPAIGN,\n    payload: name,\n  }\n)\n","import { CharacterClass, CharacterGender, CharacterMetaData, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const UPDATE_CHARACTER_NAME = 'UPDATE_CHARACTER_NAME'\nexport const UPDATE_CHARACTER_CLASS = 'UPDATE_CHARACTER_CLASS'\nexport const UPDATE_CHARACTER_RACE = 'UPDATE_CHARACTER_RACE'\nexport const UPDATE_CHARACTER_ALIGNMENT = 'UPDATE_CHARACTER_ALIGNMENT'\nexport const UPDATE_CHARACTER_LEVEL = 'UPDATE_CHARACTER_LEVEL'\nexport const UPDATE_CHARACTER_DEITY = 'UPDATE_CHARACTER_DEITY'\nexport const UPDATE_CHARACTER_SIZE_CATEGORY = 'UPDATE_CHARACTER_SIZE_CATEGORY'\nexport const UPDATE_CHARACTER_GENDER = 'UPDATE_CHARACTER_GENDER'\nexport const UPDATE_CHARACTER_AGE = 'UPDATE_CHARACTER_AGE'\nexport const UPDATE_CHARACTER_HOMELAND = 'UPDATE_CHARACTER_HOMELAND'\nexport const UPDATE_CHARACTER_HEIGHT = 'UPDATE_CHARACTER_HEIGHT'\nexport const UPDATE_CHARACTER_WEIGHT = 'UPDATE_CHARACTER_WEIGHT'\nexport const UPDATE_CHARACTER_HAIR = 'UPDATE_CHARACTER_HAIR'\nexport const UPDATE_CHARACTER_EYES = 'UPDATE_CHARACTER_EYES'\nexport const UPDATE_PLAYER_NAME = 'UPDATE_PLAYER_NAME'\nexport const UPDATE_CAMPAIGN = 'UPDATE_CAMPAIGN'\n\ntype UpdateCharacterNameAction = {\n  type: typeof UPDATE_CHARACTER_NAME\n  payload: string\n}\n\ntype UpdateCharacterClassAction = {\n  type: typeof UPDATE_CHARACTER_CLASS\n  payload: CharacterClass | undefined\n}\n\ntype UpdateCharacterRaceAction = {\n  type: typeof UPDATE_CHARACTER_RACE\n  payload: CharacterRace | undefined\n}\n\ntype UpdateCharacterAlignmentAction = {\n  type: typeof UPDATE_CHARACTER_ALIGNMENT\n  payload: Alignment | undefined\n}\n\ntype UpdateCharacterLevelAction = {\n  type: typeof UPDATE_CHARACTER_LEVEL\n  payload: number | undefined\n}\n\ntype UpdateCharacterDeityTypeAction = {\n  type: typeof UPDATE_CHARACTER_DEITY\n  payload: string\n}\n\ntype UpdateCharacterSizeCategoryAction = {\n  type: typeof UPDATE_CHARACTER_SIZE_CATEGORY\n  payload: SizeCategory | undefined\n}\n\ntype UpdateCharacterGenderAction = {\n  type: typeof UPDATE_CHARACTER_GENDER\n  payload: CharacterGender | undefined\n}\n\ntype UpdateCharacterAgeAction = {\n  type: typeof UPDATE_CHARACTER_AGE\n  payload: number | undefined\n}\n\ntype UpdateCharacterHomelandAction = {\n  type: typeof UPDATE_CHARACTER_HOMELAND\n  payload: string\n}\n\ntype UpdateCharacterHeightAction = {\n  type: typeof UPDATE_CHARACTER_HEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterWeightAction = {\n  type: typeof UPDATE_CHARACTER_WEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterHAIRAction = {\n  type: typeof UPDATE_CHARACTER_HAIR\n  payload: string\n}\n\ntype UpdateCharacterEYESAction = {\n  type: typeof UPDATE_CHARACTER_EYES\n  payload: string\n}\n\ntype UpdatePlayerNameAction = {\n  type: typeof UPDATE_PLAYER_NAME\n  payload: string\n}\n\ntype UpdateCampaignAction = {\n  type: typeof UPDATE_CAMPAIGN\n  payload: string\n}\n\nexport type UpdateCharacterMetaDataActionTypes =\n  UpdateCharacterNameAction\n  | UpdateCharacterClassAction\n  | UpdateCharacterRaceAction\n  | UpdateCharacterAlignmentAction\n  | UpdateCharacterLevelAction\n  | UpdateCharacterDeityTypeAction\n  | UpdateCharacterSizeCategoryAction\n  | UpdateCharacterGenderAction\n  | UpdateCharacterAgeAction\n  | UpdateCharacterHomelandAction\n  | UpdateCharacterHeightAction\n  | UpdateCharacterWeightAction\n  | UpdateCharacterHAIRAction\n  | UpdateCharacterEYESAction\n  | UpdatePlayerNameAction\n  | UpdateCampaignAction\n\nexport type CharacterMetaDataState = CharacterMetaData\n","import React, { ChangeEvent } from 'react'\nimport { Alignment, Ethics, Morality } from '../../store/CharacterMetaData/Alignment'\nimport PropTypes from 'prop-types'\nimport { Overwrite } from '../../types/util'\n\nconst options = {\n  'LG': { ethics: Ethics.LAW, morality: Morality.GOOD },\n  'LN': { ethics: Ethics.LAW, morality: Morality.NEUTRAL },\n  'LB': { ethics: Ethics.LAW, morality: Morality.BAD },\n\n  'NG': { ethics: Ethics.NEUTRAL, morality: Morality.GOOD },\n  'N': { ethics: Ethics.NEUTRAL, morality: Morality.NEUTRAL },\n  'NB': { ethics: Ethics.NEUTRAL, morality: Morality.BAD },\n\n  'CG': { ethics: Ethics.CHAOS, morality: Morality.GOOD },\n  'CN': { ethics: Ethics.CHAOS, morality: Morality.NEUTRAL },\n  'CB': { ethics: Ethics.CHAOS, morality: Morality.BAD },\n}\n\nconst SelectInputPropTypes = {\n  value: PropTypes.any,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\ntype PropsType = Overwrite<PropTypes.InferProps<typeof SelectInputPropTypes>, {\n  onChange: (alignment: Alignment) => void,\n}>\n\nexport const AlignmentInput: React.FC<PropsType> = ({ value, onChange, id, label }) => {\n  const onSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const alignment = options[event.target.value as keyof typeof options]\n    onChange(alignment)\n  }\n\n  const currentValue = Object.entries(options)\n    .find(([, alignment]) =>\n      alignment?.ethics === value?.ethics && alignment?.morality === value?.morality,\n    )?.[0] ?? 'none'\n\n  return <div\n    className={`metadata-input-block ${id}`}\n    data-testid={'alignment-input-wrapper'}\n  >\n    <select\n      onChange={onSelect}\n      id={id}\n      value={currentValue}\n      data-testid={'alignment-input-select'}\n    >\n      <option label={''} value={'none'} />\n      {Object.keys(options).map((optionName, index) =>\n        <option label={optionName} value={optionName} key={index} />,\n      )}\n    </select>\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport * as CharacterMetadataActions from '../../store/CharacterMetaData/actions'\nimport PropTypes from 'prop-types'\n\nimport './DisplayCharacterMetaData.scss'\nimport { AlignmentInput } from '../AlignmentInput/AlignmentInput'\n\nconst mapState = (state: RootState) => state.characterMetaData\n\nconst mapDispatchToProps = CharacterMetadataActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst StringInputPropTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataStringInput: React.FC<PropTypes.InferProps<typeof StringInputPropTypes>> = ({ value, onChange, id, label, }) => {\n  return <div className={`metadata-input-block ${id}`}>\n    <input value={value ?? ''} onChange={onChange} id={id} />\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n\nconst NumberInputPropTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataNumberInput: React.FC<PropTypes.InferProps<typeof NumberInputPropTypes>> = ({ value, onChange, id, label, }) => {\n  return <div className={`metadata-input-block ${id}`}>\n    <input value={value ?? undefined} onChange={onChange} id={id} type={'number'} />\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n\nexport const DisplayCharacterMetaData = connector(({\n  characterName, setCharacterName,\n  playerName, setPlayerName,\n  deity, setCharacterDeity,\n  homeland, setCharacterHomeland,\n  race, setCharacterRace,\n  hair, setCharacterHair,\n  eyes, setCharacterEyes,\n  level, setCharacterLevel,\n  className, setCharacterClass,\n  campaign, setCampaign,\n  age, setCharacterAge,\n  height, setCharacterHeight,\n  weight, setCharacterWeight,\n  alignment, setCharacterAlignment,\n}: Props) => {\n  const callWithStringValue = useCallback(\n    (callback: (value: string) => any) => useCallback(\n      (event: ChangeEvent<HTMLInputElement>) => callback(event.target.value),\n      [callback],\n    ),\n    [],\n  )\n\n  const callWithNumberValue = useCallback(\n    (callback: (value: number | undefined) => any) => useCallback(\n      (event: ChangeEvent<HTMLInputElement>) => {\n        const value = parseInt(event.target.value)\n        callback(Number.isNaN(value) ? undefined : value)\n      },\n      [callback],\n    ),\n    [],\n  )\n\n  return (\n    <div className={'character-meta-data'}>\n      <MetadataStringInput\n        id={'character-name'}\n        value={characterName}\n        label={'Charakter Name'}\n        onChange={callWithStringValue(setCharacterName)}\n      />\n      <AlignmentInput\n        id={'alignment'}\n        value={alignment}\n        label={'Alignment'}\n        onChange={setCharacterAlignment}\n      />\n      <MetadataStringInput\n        id={'player-name'}\n        value={playerName}\n        label={'Player'}\n        onChange={callWithStringValue(setPlayerName)}\n      />\n      <MetadataStringInput\n        id={'class-name'}\n        value={className}\n        label={'Character Class'}\n        onChange={callWithStringValue(setCharacterClass)}\n      />\n      <MetadataNumberInput\n        id={'level'}\n        value={level}\n        label={'Level'}\n        onChange={callWithNumberValue(setCharacterLevel)}\n      />\n      <MetadataStringInput\n        id={'deity'}\n        value={deity}\n        label={'Deity'}\n        onChange={callWithStringValue(setCharacterDeity)}\n      />\n      <MetadataStringInput\n        id={'campaign'}\n        value={campaign}\n        label={'Campaign'}\n        onChange={callWithStringValue(setCampaign)}\n      />\n      <MetadataStringInput\n        id={'homeland'}\n        value={homeland}\n        label={'Homeland'}\n        onChange={callWithStringValue(setCharacterHomeland)}\n      />\n      <MetadataStringInput\n        id={'race'}\n        value={race}\n        label={'Race'}\n        onChange={callWithStringValue(setCharacterRace)}\n      />\n      <MetadataStringInput\n        id={'hair'}\n        value={hair}\n        label={'Hair'}\n        onChange={callWithStringValue(setCharacterHair)}\n      />\n      <MetadataStringInput\n        id={'eyes'}\n        value={eyes}\n        label={'Eyes'}\n        onChange={callWithStringValue(setCharacterEyes)}\n      />\n      <MetadataNumberInput\n        id={'age'}\n        value={age}\n        label={'Age'}\n        onChange={callWithNumberValue(setCharacterAge)}\n      />\n      <MetadataNumberInput\n        id={'height'}\n        value={height}\n        label={'Height'}\n        onChange={callWithNumberValue(setCharacterHeight)}\n      />\n      <MetadataNumberInput\n        id={'weight'}\n        value={weight}\n        label={'Weight'}\n        onChange={callWithNumberValue(setCharacterWeight)}\n      />\n    </div>\n  )\n})\n","import React from 'react'\nimport './invertedBorderRadius.scss'\nimport PropTypes, { InferProps } from 'prop-types'\n\nconst InvertedBorderRadiusPropTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\nexport const InvertedBorderRadius: React.FC<InferProps<typeof InvertedBorderRadiusPropTypes>> = (props = {\n  className: '',\n  style: {},\n}) => {\n  return <div\n    className={`inverted-rounded-corners ${props.className ?? ''}`}\n    style={{\n      ...(\n        props.style ?? {}\n      ),\n    }}\n  >\n    {props.children}\n  </div>\n}\n\nInvertedBorderRadius.propTypes = InvertedBorderRadiusPropTypes\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent } from 'react'\nimport { setAbilityScore, setAbilityTempAdjustment } from '../../store/Abilities/actions'\nimport { AbilityAttributes, AbilityState } from '../../store/Abilities/types'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport { getModifierFromScore } from '../../store/Abilities/selectors'\n\nconst mapState = (state: RootState) => (\n  {\n    abilities: state.abilities,\n  }\n)\n\nconst mapDispatchToProps = {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayAbilities = connector((\n  { abilities, setAbilityScore, setAbilityTempAdjustment }: Props,\n) => {\n  const onScoreChange = (abilityName: keyof AbilityState) => (event: ChangeEvent<HTMLInputElement>) => {\n    setAbilityScore(abilityName, parseInt(event.target.value))\n  }\n  const onTempAdjustmentChange = (abilityName: keyof AbilityState) => (event: ChangeEvent<HTMLInputElement>) => {\n    setAbilityTempAdjustment(abilityName, parseInt(event.target.value))\n  }\n\n  const abilityElements = Object.keys(abilities).map((abilityName) => {\n    // @ts-ignore\n    const abilityAttributes: AbilityAttributes = abilities[abilityName]\n\n    return (\n      <tr key={abilityName}>\n        <td>\n          <InvertedBorderRadius\n            style={{\n              fontSize: '1em',\n            }}\n          >\n            {abilityName}\n          </InvertedBorderRadius>\n        </td>\n        <td>\n          <input\n            type={'number'}\n            value={abilityAttributes.score}\n            onChange={onScoreChange(abilityName as keyof AbilityState)}\n          />\n        </td>\n        <td>{getModifierFromScore(abilityAttributes.score)}</td>\n        <td>\n          <input\n            type={'number'}\n             // Display an empty input if temp adjustment is 0\n            value={abilityAttributes.temporaryAdjustment || ''}\n            onChange={onTempAdjustmentChange(abilityName as keyof AbilityState)}\n          />\n        </td>\n        <td>{\n          abilityAttributes.temporaryAdjustment ?\n            getModifierFromScore(abilityAttributes.score + abilityAttributes.temporaryAdjustment) :\n            ''\n        }</td>\n      </tr>\n    )\n  })\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td>Ability Name</td>\n          <td>Score</td>\n          <td>Mod</td>\n          <td>Temp adjustment</td>\n          <td>Temp mod</td>\n        </tr>\n      </thead>\n      <tbody>\n        {abilityElements}\n      </tbody>\n    </table>\n  )\n})\n","import {\n  abilityName,\n  SET_ABILITY_SCORE,\n  SET_ABILITY_TEMP_ADJUSTMENT,\n  SetAbilityScoreAction,\n  SetAbilityTempAdjustmentAction,\n} from './types'\n\nexport const setAbilityScore = (ability: abilityName, newScore: number): SetAbilityScoreAction => {\n    return {\n      type: SET_ABILITY_SCORE,\n      ability: ability,\n      score: newScore,\n    }\n}\n\nexport const setAbilityTempAdjustment = (ability: abilityName, newAdjustment: number): SetAbilityTempAdjustmentAction => {\n    return {\n      type: SET_ABILITY_TEMP_ADJUSTMENT,\n      ability: ability,\n      adjustment: newAdjustment,\n    }\n}\n","export type abilityName = 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma'\n\nexport type AbilityAttributes = {\n  score: number\n  temporaryAdjustment: number\n}\n\nexport type AbilityState = {\n  [k in abilityName]: AbilityAttributes\n}\n\nexport const SET_ABILITY_SCORE = 'SET_ABILITY_SCORE'\nexport const SET_ABILITY_TEMP_ADJUSTMENT = 'SET_ABILITY_TEMP_ADJUSTMENT'\n\nexport type SetAbilityScoreAction = {\n  type: typeof SET_ABILITY_SCORE\n  ability: keyof AbilityState\n  score: number\n}\n\nexport type SetAbilityTempAdjustmentAction = {\n  type: typeof SET_ABILITY_TEMP_ADJUSTMENT\n  ability: keyof AbilityState\n  adjustment: number\n}\n\nexport type AbilitiesActionTypes = SetAbilityTempAdjustmentAction | SetAbilityScoreAction\n","import {\n  SkillName,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n  UpdateSkillActionTypes,\n} from './types'\n\nexport const setSkillRanks = (skillName: SkillName, ranks: number): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_RANKS,\n    payload: {\n      skillName,\n      ranks,\n    },\n  }\n}\n\nexport const setSkillMiscMod = (skillName: SkillName, miscModifier: number): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_MISC_MODIFIER,\n    payload: {\n      skillName,\n      miscModifier,\n    },\n  }\n}\n\nexport const setIsSkillClassSkill = (skillName: SkillName, isClassSkill: boolean): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_IS_CLASS_SKILL,\n    payload: {\n      skillName,\n      isClassSkill,\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './StyledCheckbox.scss'\n\nconst propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport const StyledCheckbox: React.FC<PropTypes.InferProps<typeof propTypes>> = (props) => {\n  return <input\n    className={`styled-checkbox ${props.className}`}\n    type={'checkbox'}\n    checked={props.checked ?? false}\n    onChange={props.onChange!}\n  />\n}\n\nStyledCheckbox.propTypes = propTypes\nStyledCheckbox.defaultProps = {\n  checked: false,\n  className: '',\n  onChange: () => {},\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent } from 'react'\nimport { quickSkillDefinitions, Skill, SkillName } from '../../store/Skills/types'\nimport * as UpdateSkillsActions from '../../store/Skills/actions'\n\nimport './DisplaySkills.scss'\nimport { StyledCheckbox } from '../StyledCheckbox/StyledCheckbox'\n\nconst mapState = (state: RootState) => (\n  {\n    skills: state.skills,\n  }\n)\n\nconst mapDispatchToProps = UpdateSkillsActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplaySkills = connector((\n  {\n    skills,\n    setIsSkillClassSkill,\n    setSkillMiscMod,\n    setSkillRanks,\n  }: Props,\n) => {\n  const onSkillRanksChange = (skillName: SkillName) => (event: ChangeEvent<HTMLInputElement>) => {\n    setSkillRanks(skillName, parseInt(event.target.value))\n  }\n\n  const onSkillMiscModChange = (skillName: SkillName) => (event: ChangeEvent<HTMLInputElement>) => {\n    setSkillMiscMod(skillName, parseInt(event.target.value))\n  }\n\n  return <div className={'skills'}>\n    <table>\n      <thead>\n        <tr>\n          <th> {/* Checkbox */} </th>\n          <th>Skill Names</th>\n          <th>Total Bonus</th>\n          <th> {/* Base ability name */} </th>\n          <th>Ability Mod.</th>\n          <th> {/* + */} </th>\n          <th>Ranks</th>\n          <th> {/* + */} </th>\n          <th>Misc. Mod.</th>\n        </tr>\n      </thead>\n      <tbody>\n        {(\n          Object.entries(skills) as Array<[SkillName, Skill]>\n        )\n          .map(([skillName, skill], index) => {\n            const { baseAbility: abilityName, isTrainedOnly } = quickSkillDefinitions[skillName]\n            return <tr\n              key={index}\n            >\n              <td>\n                <StyledCheckbox\n                  checked={skill.isClassSkill}\n                  onChange={() => setIsSkillClassSkill(skillName, !skill.isClassSkill)}\n                />\n                {/*<input onChange={() => setIsSkillClassSkill(skillName, !skill.isClassSkill)} />*/}\n              </td>\n              <td>{skillName}{isTrainedOnly ? '*' : ''}</td>\n              <td>{skill.totalBonus}</td>\n              <td>={abilityName}</td>\n              <td>{skill.abilityModifier}</td>\n              <td>+</td>\n              <td>\n                <input\n                  type={'number'}\n                  value={skill.ranks}\n                  onChange={onSkillRanksChange(skillName)}\n                />\n              </td>\n              <td>+</td>\n              <td>\n                <input\n                  type={'number'}\n                  value={skill.miscModifier}\n                  onChange={onSkillMiscModChange(skillName)}\n                />\n              </td>\n            </tr>\n          })}\n        <tr className={'legend'}>\n          <td>\n            <StyledCheckbox checked={true} />\n          </td>\n          <td>Class Skill &nbsp; &nbsp; * Trained Only</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n})\n","import React from 'react'\nimport { DisplayCharacterMetaData } from '../DisplayCharacterMetaData/DisplayCharacterMetaData'\nimport { DisplayAbilities } from '../DisplayAbilities/DisplayAbilities'\nimport { DisplaySkills } from '../DisplaySkills/DisplaySkills'\n\nexport const CharacterSheet: React.FC = () => {\n  return (\n    <div>\n      <img className={'pathfinder-logo'} alt={'Pathfinder logo'} src={'./pathfinderDE-logo.png'} />\n      <DisplayCharacterMetaData />\n      <DisplayAbilities />\n      <DisplaySkills />\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport { CharacterSheet } from './components/CharacterSheet/CharacterSheet'\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <CharacterSheet/>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}