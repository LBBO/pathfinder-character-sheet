{"version":3,"sources":["store/CharacterMetaData/Character.ts","store/CharacterMetaData/reducers.ts","components/DisplayCharacterMetaData/MetadataSelect/MetadataSelect.tsx","store/Abilities/selectors.ts","store/Abilities/reducers.ts","store/Skills/types.ts","store/root-reducer.ts","store/Skills/reducers.ts","store/CombatValues/reducers.ts","store/CombatValues/initialState.ts","store/CombatValues/types.ts","store/index.ts","store/CharacterMetaData/actions.ts","store/CharacterMetaData/types.ts","store/CharacterMetaData/Alignment.ts","components/DisplayCharacterMetaData/DisplayCharacterMetaData.tsx","components/BoxInput/BoxInput.tsx","components/BoxInput/BoxNumberInput.tsx","components/BlackBox/BlackBox.tsx","components/DisplayAbilities/DisplayAbilities.tsx","store/Abilities/actions.ts","store/Abilities/types.ts","store/Skills/actions.ts","components/StyledCheckbox/StyledCheckbox.tsx","store/Skills/selectors.ts","components/DisplaySkills/DisplaySkills.tsx","store/CombatValues/actions.ts","store/CharacterMetaData/selectors.ts","store/CombatValues/selectors.ts","components/InvertedBorderRadius/InvertedBorderRadius.tsx","components/DisplayCombatValues/DisplayCombatValues.tsx","components/CharacterSheet/CharacterSheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SizeCategory","CharacterGender","MetadataSelectTestIds","initialState","level","characterName","sizeCategory","MEDIUM","getModifierFromScore","score","Math","floor","getAbilityModifiers","createSelector","state","abilities","abilitiesState","Object","entries","reduce","modifiers","abilityName","values","temporaryAdjustment","charisma","constitution","dexterity","intelligence","strength","wisdom","quickSkillDefinitions","acrobatics","baseAbility","isTrainedOnly","appraise","bluff","climb","craft","diplomacy","disableDevice","disguise","escapeArtist","fly","handleAnimal","heal","intimidate","knowledgeArcana","knowledgeDungeoneering","knowledgeEngineering","knowledgeGeography","knowledgeHistory","knowledgeLocal","knowledgeNature","knowledgeNobility","knowledgePlanes","knowledgeReligion","linguistics","perception","perform","profession","ride","senseMotive","sleightOfHand","spellcraft","stealth","survival","swim","useMagicDevice","RootReducer","combineReducers","characterMetaData","action","type","payload","campaign","age","alignment","className","deity","eyes","gender","hair","height","homeland","race","weight","playerName","ability","modifier","adjustment","skills","skillCopy","skillName","miscModifier","ranks","console","warn","isClassSkill","result","keys","forEach","name","createInitialState","combatValues","armorClass","shieldBonus","armorBonus","deflectionModifier","naturalArmor","otherModifiers","initiative","attackBonuses","baseAttackBonus","spellResistance","savingThrows","fortitude","baseSave","magicModifier","temporaryModifier","reflex","will","savingThrowType","stateCopy","currentSavingThrow","newBaseSave","newMagicModifier","newMiscModifier","newTemporaryModifier","persistenceConfig","key","storage","localForage","persistedReducer","persistReducer","store","createStore","devToolsEnhancer","setCharacterName","setCharacterClass","setCharacterRace","setCharacterAlignment","setCharacterLevel","setCharacterDeity","setCharacterSizeCategory","setCharacterGender","setCharacterAge","setCharacterHomeland","setCharacterHeight","setCharacterWeight","setCharacterHair","setCharacterEyes","setPlayerName","setCampaign","Morality","Ethics","MetadataSelect","value","onChange","id","label","options","testIds","useEffect","optionValues","map","option","includes","undefined","error","data-testid","wrapper","event","selectedIndex","currentTarget","selectedOption","JSON","stringify","select","index","htmlFor","NEUTRAL","GenderInputTestIds","GenderInputOptions","MALE","FEMALE","OTHER","SizeCategoryInputTestIds","SizeCategoryInputOptions","SMALL","LARGE","AlignmentInputTestIds","AlignmentOptions","ethics","LAW","morality","GOOD","BAD","CHAOS","PropTypes","string","func","isRequired","MetadataStringInput","MetadataNumberInput","number","mapDispatchToProps","CharacterMetadataActions","DisplayCharacterMetaData","connect","connector","callWithStringValue","useCallback","callback","target","callWithNumberValue","parseInt","Number","isNaN","BoxInputPropTypes","oneOfType","arrayOf","testId","labelTestId","hideBox","bool","disabled","BoxInputDefaultProps","BoxInput","props","defaultProps","any","BoxNumberInput","changeHandlerFromProps","changeHandler","evt","valueAsNumber","Boolean","BlackBox","children","propsWithoutChildren","abilityShorthands","setAbilityScore","newScore","setAbilityTempAdjustment","newAdjustment","DisplayAbilities","onScoreChange","newVal","onTempAdjustmentChange","abilityElements","abilityAttributes","setSkillRanks","setSkillMiscMod","setIsSkillClassSkill","StyledCheckbox","checked","getTotalSkillBonuses","abilityModifiers","totalSkillsBonuses","currSkillName","skill","baseAbilityName","UpdateSkillsActions","DisplaySkills","totalSkillBonuses","onSkillRanksChange","onSkillMiscModChange","setBaseSave","setSavingThrowMagicModifier","setMiscSavingThrowModifier","setTemporarySavingThrowModifier","setInitiativeMiscModifier","setBaseAttackBonus","newBaseAttackBonus","setSpellResistance","newSpellResistance","setShieldBonus","newShieldBonus","setArmorBonus","newArmorBonus","setDeflectionModifier","newDeflectionModifier","setMiscArmorModifier","newMiscArmorModifier","setNaturalArmor","newNaturalArmor","setOtherArmorModifiers","newOtherArmorModifiers","getSizeModifier","characterMetadataState","NaN","getCombatValues","getTotalInitiativeBonus","getArmorClass","sizeModifier","getTouchArmorClass","getFlatFootedArmorClass","min","getFortitudeBonus","savingThrow","getReflexBonus","getWillBonus","getCombatManeuverBonus","getCombatManeuverDefense","combatManeuverBonus","InvertedBorderRadius","object","style","callIfDefined","param","CombatValueActions","DisplayCombatValues","totalInitiativeBonus","totalArmorClass","touchArmorClass","flatFootedArmorClass","fortitudeBonus","reflexBonus","willBonus","combatManeuverDefense","setForCertainSavingThrow","savingThrowName","setter","newValue","savingThrowBonus","abilityModifier","Fragment","CharacterSheet","alt","src","persistor","persistStore","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca1650cc.chunk.js","sourcesContent":["import { Alignment } from './Alignment'\n\nexport type CharacterClass = string\n\n// TODO: add other size categories\n//  http://prd.5footstep.de/Grundregelwerk/Kampf/DieGrundregelndesKampfes/Ruestungsklasse\nexport enum SizeCategory {\n  SMALL = -1,\n  MEDIUM = 0,\n  LARGE = 1,\n}\n\nexport enum CharacterGender {\n  MALE,\n  FEMALE,\n  OTHER,\n}\n\nexport type CharacterRace = string\n\nexport type CharacterMetaData = {\n  characterName: string\n  className?: CharacterClass\n  race?: CharacterRace\n  alignment?: Alignment\n  level?: number\n  deity?: string\n  sizeCategory: SizeCategory\n  gender?: CharacterGender\n  age?: number\n  homeland?: string\n  height?: number\n  weight?: number\n  hair?: string\n  eyes?: string\n\n  playerName?: string\n  campaign?: string\n}\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootActionTypes } from '../root-reducer'\n\nconst initialState: CharacterMetaDataState = {\n  level: 0,\n  characterName: '',\n  sizeCategory: SizeCategory.MEDIUM,\n}\n\nexport const CharacterMetaDataReducer = (\n  state = initialState, action?: RootActionTypes): CharacterMetaDataState => {\n  switch (action?.type) {\n    case 'UPDATE_CHARACTER_NAME':\n      return {\n        ...state,\n        characterName: action.payload,\n      }\n    case 'UPDATE_CAMPAIGN':\n      return {\n        ...state,\n        campaign: action.payload,\n      }\n    case 'UPDATE_CHARACTER_AGE':\n      return {\n        ...state,\n        age: action.payload,\n      }\n    case 'UPDATE_CHARACTER_ALIGNMENT':\n      return {\n        ...state,\n        alignment: action.payload,\n      }\n    case 'UPDATE_CHARACTER_CLASS':\n      return {\n        ...state,\n        className: action.payload,\n      }\n    case 'UPDATE_CHARACTER_DEITY':\n      return {\n        ...state,\n        deity: action.payload,\n      }\n    case 'UPDATE_CHARACTER_EYES':\n      return {\n        ...state,\n        eyes: action.payload,\n      }\n    case 'UPDATE_CHARACTER_GENDER':\n      return {\n        ...state,\n        gender: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HAIR':\n      return {\n        ...state,\n        hair: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HEIGHT':\n      return {\n        ...state,\n        height: action.payload,\n      }\n    case 'UPDATE_CHARACTER_HOMELAND':\n      return {\n        ...state,\n        homeland: action.payload,\n      }\n    case 'UPDATE_CHARACTER_LEVEL':\n      return {\n        ...state,\n        level: action.payload,\n      }\n    case 'UPDATE_CHARACTER_RACE':\n      return {\n        ...state,\n        race: action.payload,\n      }\n    case 'UPDATE_CHARACTER_SIZE_CATEGORY':\n      return {\n        ...state,\n        sizeCategory: action.payload,\n      }\n    case 'UPDATE_CHARACTER_WEIGHT':\n      return {\n        ...state,\n        weight: action.payload,\n      }\n    case 'UPDATE_PLAYER_NAME':\n      return {\n        ...state,\n        playerName: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import React, { ChangeEvent, useEffect } from 'react'\n\nexport enum MetadataSelectTestIds {\n  wrapper = 'metadata-select-wrapper',\n  select = 'metadata-select',\n}\n\ntype PropsType<T> = {\n  onChange: (newValue: T) => void,\n  value: T,\n  options: Array<{ label?: string, value: T }>\n  label?: string,\n  id: string,\n  testIds?: { wrapper: string, select: string },\n}\n\nexport const MetadataSelect = <T extends any>({\n  value,\n  onChange,\n  id,\n  label,\n  options,\n  testIds = MetadataSelectTestIds,\n}: PropsType<T>) => {\n  useEffect(() => {\n    const optionValues = options.map(option => option.value) as Array<unknown>\n\n    if (optionValues.includes(undefined) && optionValues.includes('')) {\n      console.error(\n        `MetadataSelect has recieved both an option with the value undefined and one with the value ''. Due ` +\n        `to React / browser implementation details, undefined is converted to '', so both those options cannot exist at the ` +\n        `same time. Please remove either from the options array!`,\n      )\n    }\n  }, [options])\n\n  const onSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedIndex = event.currentTarget.selectedIndex\n    const selectedOption = options[selectedIndex]\n    onChange(selectedOption.value)\n  }\n\n  return <div\n    className={`metadata-input-block ${id}`}\n    data-testid={testIds.wrapper}\n  >\n    <select\n      onChange={onSelect}\n      id={id}\n      value={value === undefined ? '' : JSON.stringify(value)}\n      data-testid={testIds.select}\n    >\n      {\n        options\n          .map(({ label, value }, index) =>\n            <option label={label} value={value === undefined ? '' : JSON.stringify(value)} key={index} />,\n          )\n      }\n    </select>\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n","import { AbilityAttributes, abilityName, AbilityState } from './types'\nimport { createSelector } from 'reselect'\nimport { RootState } from '../root-reducer'\n\nexport type AbilityModifiers = {\n  [k in abilityName]: number\n}\n\nexport const getModifierFromScore = (score: number) => Math.floor(score / 2) - 5\n\nexport const getAbilities = (state: RootState) => state.abilities\n\nexport const getCurrentModifiersFromAbilities = (abilitiesState: AbilityState) => (\n  Object.entries(abilitiesState) as Array<[abilityName, AbilityAttributes]>\n)\n  .reduce((modifiers: AbilityModifiers, [abilityName, values]) => {\n    modifiers[abilityName] = getModifierFromScore(values.score + values.temporaryAdjustment)\n\n    return modifiers\n  }, {} as AbilityModifiers)\n\nexport const getAbilityModifiers = createSelector(\n  [getAbilities], getCurrentModifiersFromAbilities)\n","import { AbilityState } from './types'\nimport { getModifierFromScore } from './selectors'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createDefaultAbility = () => ({\n  score: 10,\n  temporaryAdjustment: 0,\n})\n\nconst initialState: AbilityState = {\n  charisma: createDefaultAbility(),\n  constitution: createDefaultAbility(),\n  dexterity: createDefaultAbility(),\n  intelligence: createDefaultAbility(),\n  strength: createDefaultAbility(),\n  wisdom: createDefaultAbility(),\n}\n\nexport const AbilitiesReducer = (state: AbilityState = initialState, action?: RootActionTypes): AbilityState => {\n  switch (action?.type) {\n    case 'SET_ABILITY_SCORE':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          score: action.score || 0,\n          modifier: getModifierFromScore(action.score),\n        },\n      }\n    case 'SET_ABILITY_TEMP_ADJUSTMENT':\n      return {\n        ...state,\n        [action.ability]: {\n          ...state[action.ability],\n          // NaN --> 0\n          temporaryAdjustment: action.adjustment || 0,\n        },\n      }\n    default:\n      return state\n  }\n}\n","import { abilityName } from '../Abilities/types'\n\nexport type SkillName = 'acrobatics' |\n  'appraise' |\n  'bluff' |\n  'climb' |\n  'craft' |\n  'diplomacy' |\n  'disableDevice' |\n  'disguise' |\n  'escapeArtist' |\n  'fly' |\n  'handleAnimal' |\n  'heal' |\n  'intimidate' |\n  'knowledgeArcana' |\n  'knowledgeDungeoneering' |\n  'knowledgeEngineering' |\n  'knowledgeGeography' |\n  'knowledgeHistory' |\n  'knowledgeLocal' |\n  'knowledgeNature' |\n  'knowledgeNobility' |\n  'knowledgePlanes' |\n  'knowledgeReligion' |\n  'linguistics' |\n  'perception' |\n  'perform' |\n  'profession' |\n  'ride' |\n  'senseMotive' |\n  'sleightOfHand' |\n  'spellcraft' |\n  'stealth' |\n  'survival' |\n  'swim' |\n  'useMagicDevice'\n\nexport const quickSkillDefinitions: {\n  [k in SkillName]: {\n    baseAbility: abilityName,\n    isTrainedOnly: boolean,\n  }\n} = {\n  acrobatics: {\n    baseAbility: 'dexterity',\n    isTrainedOnly: false,\n  },\n  appraise: {\n    baseAbility: 'intelligence',\n    isTrainedOnly: false,\n  },\n  bluff: {\n    baseAbility: 'charisma',\n    isTrainedOnly: false\n  },\n  climb: {\n    baseAbility: \"strength\",\n    isTrainedOnly: false\n  },\n  craft: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: false\n  },\n  diplomacy: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  disableDevice: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: true\n  },\n  disguise: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  escapeArtist: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  fly: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  handleAnimal: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: true\n  },\n  heal: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  intimidate: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  knowledgeArcana: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeDungeoneering: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeEngineering: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeGeography: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeHistory: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeLocal: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeNature: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeNobility: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgePlanes: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  knowledgeReligion: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  linguistics: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  perception: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  perform: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: false\n  },\n  profession: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: true\n  },\n  ride: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  senseMotive: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  sleightOfHand: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: true\n  },\n  spellcraft: {\n    baseAbility: \"intelligence\",\n    isTrainedOnly: true\n  },\n  stealth: {\n    baseAbility: \"dexterity\",\n    isTrainedOnly: false\n  },\n  survival: {\n    baseAbility: \"wisdom\",\n    isTrainedOnly: false\n  },\n  swim: {\n    baseAbility: \"strength\",\n    isTrainedOnly: false\n  },\n  useMagicDevice: {\n    baseAbility: \"charisma\",\n    isTrainedOnly: true\n  }\n}\n\nexport type Skill = {\n  name: SkillName,\n  ranks: number,\n  miscModifier: number,\n  isClassSkill: boolean\n}\n\nexport type SkillState = {\n  [k in SkillName]: Skill\n}\n\nexport const UPDATE_SKILL_RANKS = 'UPDATE_SKILL_RANKS'\nexport const UPDATE_SKILL_MISC_MODIFIER = 'UPDATE_SKILL_MISC_MODIFIER'\nexport const UPDATE_SKILL_IS_CLASS_SKILL = 'UPDATE_SKILL_IS_CLASS_SKILL'\n\nexport type UpdateSkillRankAction = {\n  type: typeof UPDATE_SKILL_RANKS,\n  payload: {\n    skillName: SkillName,\n    ranks: number,\n  },\n}\n\nexport type UpdateSkillMiscModifierAction = {\n  type: typeof UPDATE_SKILL_MISC_MODIFIER,\n  payload: {\n    skillName: SkillName,\n    miscModifier: number,\n  },\n}\n\nexport type UpdateSkillIsClassSkill = {\n  type: typeof UPDATE_SKILL_IS_CLASS_SKILL,\n  payload: {\n    skillName: SkillName,\n    isClassSkill: boolean,\n  },\n}\n\nexport type UpdateSkillActionTypes = UpdateSkillRankAction | UpdateSkillMiscModifierAction | UpdateSkillIsClassSkill\n","import { CharacterMetaDataReducer } from './CharacterMetaData/reducers'\nimport { AbilitiesReducer } from './Abilities/reducers'\nimport { SkillsReducer } from './Skills/reducers'\nimport { CharacterMetaDataState, UpdateCharacterMetaDataActionTypes } from './CharacterMetaData/types'\nimport { AbilitiesActionTypes, AbilityState } from './Abilities/types'\nimport { SkillState, UpdateSkillActionTypes } from './Skills/types'\nimport { CombatValuesActionTypes, CombatValuesState } from './CombatValues/types'\nimport { CombatValuesReducer } from './CombatValues/reducers'\nimport { combineReducers } from 'redux'\n\nexport type RootState = {\n  characterMetaData: CharacterMetaDataState,\n  abilities: AbilityState,\n  skills: SkillState,\n  combatValues: CombatValuesState,\n}\n\nexport type EmptyActionType = { type: 'EMPTY_ACTION' }\nexport const EmptyAction: EmptyActionType = {\n  type: 'EMPTY_ACTION',\n}\n\nexport type RootActionTypes =\n  CombatValuesActionTypes |\n  UpdateCharacterMetaDataActionTypes |\n  AbilitiesActionTypes |\n  UpdateSkillActionTypes |\n  EmptyActionType\n\n// export const RootReducer = (state?: RootState, action?: RootActionTypes) => (\n//   {\n//     characterMetaData: CharacterMetaDataReducer(state?.characterMetaData, action),\n//     abilities: AbilitiesReducer(state?.abilities, action),\n//     skills: SkillsReducer(state?.skills, action),\n//     combatValues: CombatValuesReducer(state?.combatValues, action),\n//   }\n// )\n\nexport const RootReducer = combineReducers<RootState, RootActionTypes>(\n  {\n    characterMetaData: CharacterMetaDataReducer,\n    abilities: AbilitiesReducer,\n    skills: SkillsReducer,\n    combatValues: CombatValuesReducer,\n  },\n)\n","import {\n  quickSkillDefinitions,\n  SkillState,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n} from './types'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const createInitialState = () => {\n  const result = {} as SkillState\n\n  (\n    Object.keys(quickSkillDefinitions) as Array<keyof SkillState>\n  )\n    .forEach((skillName: keyof SkillState) => {\n      result[skillName] = {\n        name: skillName,\n        isClassSkill: false,\n        miscModifier: 0,\n        ranks: 0,\n      }\n    })\n\n  return result\n}\n\nexport const SkillsReducer = (\n  state?: SkillState,\n  action?: RootActionTypes,\n): SkillState => {\n  if (!state) {\n    return createInitialState()\n  } else if (\n    action?.type === UPDATE_SKILL_MISC_MODIFIER ||\n    action?.type === UPDATE_SKILL_RANKS ||\n    action?.type === UPDATE_SKILL_IS_CLASS_SKILL\n  ) {\n    const skillCopy = {\n      ...state[action?.payload.skillName],\n    }\n\n    switch (action?.type) {\n      case UPDATE_SKILL_MISC_MODIFIER:\n        skillCopy.miscModifier = action?.payload.miscModifier\n        break\n\n      case UPDATE_SKILL_RANKS:\n        if (action?.payload.ranks < 0) {\n          // TODO: don't accept ranks > character level\n          console.warn('Ranks must be >= 0')\n        } else {\n          skillCopy.ranks = action?.payload.ranks\n        }\n        break\n\n      case UPDATE_SKILL_IS_CLASS_SKILL:\n        skillCopy.isClassSkill = action?.payload.isClassSkill\n\n        break\n    }\n\n    return {\n      ...state,\n      [action?.payload.skillName]: skillCopy,\n    }\n  } else {\n    return state\n  }\n}\n","import {\n  CombatValuesState,\n  SET_ARMOR_BONUS,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n} from './types'\nimport { getInitialCombatValuesState } from './initialState'\nimport { RootActionTypes } from '../root-reducer'\n\nexport const CombatValuesReducer = (\n  state = getInitialCombatValuesState(),\n  action?: RootActionTypes,\n): CombatValuesState => {\n  // Handle actions that change saving throws\n  if (\n    action?.type === SET_BASE_SAVE ||\n    action?.type === SET_SAVING_THROW_MAGIC_MODIFIER ||\n    action?.type === SET_MISC_SAVING_THROW_MODIFIER ||\n    action?.type === SET_TEMPORARY_SAVING_THROW_MODIFIER\n  ) {\n    const savingThrowType = action?.payload.savingThrowType\n    const stateCopy = {\n      ...state,\n      savingThrows: {\n        ...state.savingThrows,\n        [savingThrowType]: {\n          ...state.savingThrows[savingThrowType],\n        },\n      },\n    }\n    const currentSavingThrow = stateCopy.savingThrows[savingThrowType]\n\n    switch (action.type) {\n      case SET_BASE_SAVE:\n        currentSavingThrow.baseSave = action.payload.newBaseSave\n        break\n      case SET_SAVING_THROW_MAGIC_MODIFIER:\n        currentSavingThrow.magicModifier = action.payload.newMagicModifier\n        break\n      case SET_MISC_SAVING_THROW_MODIFIER:\n        currentSavingThrow.miscModifier = action.payload.newMiscModifier\n        break\n      case SET_TEMPORARY_SAVING_THROW_MODIFIER:\n        currentSavingThrow.temporaryModifier = action.payload.newTemporaryModifier\n    }\n\n    return stateCopy\n  }\n\n  switch (action?.type) {\n    case SET_INITIATIVE_MISC_MODIFIER:\n      return {\n        ...state,\n        initiative: {\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_BASE_ATTACK_BONUS:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          baseAttackBonus: action?.payload,\n        },\n      }\n\n    case SET_SPELL_RESISTANCE:\n      return {\n        ...state,\n        attackBonuses: {\n          ...state.attackBonuses,\n          spellResistance: action?.payload,\n        },\n      }\n\n    case SET_SHIELD_BONUS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          shieldBonus: action?.payload,\n        },\n      }\n\n    case SET_ARMOR_BONUS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          armorBonus: action?.payload,\n        },\n      }\n\n    case SET_DEFLECTION_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          deflectionModifier: action?.payload,\n        },\n      }\n\n    case SET_MISC_ARMOR_MODIFIER:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          miscModifier: action?.payload,\n        },\n      }\n\n    case SET_NATURAL_ARMOR:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          naturalArmor: action?.payload,\n        },\n      }\n\n    case SET_OTHER_ARMOR_MODIFIERS:\n      return {\n        ...state,\n        armorClass: {\n          ...state.armorClass,\n          otherModifiers: action?.payload,\n        },\n      }\n\n    default:\n      return state\n  }\n}\n","import { CombatValuesState } from './types'\n\nexport const getInitialCombatValuesState = (): CombatValuesState => (\n  {\n    armorClass: {\n      shieldBonus: 0,\n      armorBonus: 0,\n      deflectionModifier: 0,\n      miscModifier: 0,\n      naturalArmor: 0,\n      otherModifiers: '',\n    },\n    initiative: {\n      miscModifier: 0,\n    },\n    attackBonuses: {\n      baseAttackBonus: 0,\n      spellResistance: 0,\n    },\n    savingThrows: {\n      fortitude: {\n        baseSave: 0,\n        magicModifier: 0,\n        miscModifier: 0,\n        temporaryModifier: 0,\n      },\n      reflex: {\n        baseSave: 0,\n        magicModifier: 0,\n        miscModifier: 0,\n        temporaryModifier: 0,\n      },\n      will: {\n        baseSave: 0,\n        magicModifier: 0,\n        miscModifier: 0,\n        temporaryModifier: 0,\n      },\n    },\n  }\n)\n","export type InitiativeState = {\n  miscModifier: number,\n}\nexport const SET_INITIATIVE_MISC_MODIFIER = 'SET_INITIATIVE_MISC_MODIFIER'\nexport type SetInitiativeMiscModifierAction = {\n  type: typeof SET_INITIATIVE_MISC_MODIFIER,\n  payload: number,\n}\n\nexport type ArmorClassState = {\n  armorBonus: number, // aus ruestung tabelle\n  shieldBonus: number, // aus ruestung tabelle\n  naturalArmor: number, // talente / volk\n  deflectionModifier: number, // zauber?\n  miscModifier: number,\n  otherModifiers: string,\n}\nexport const SET_ARMOR_BONUS = 'SET_ARMOR_BONUS'\nexport type SetArmorBonusAction = {\n  type: typeof SET_ARMOR_BONUS,\n  payload: number,\n}\nexport const SET_SHIELD_BONUS = 'SET_SHIELD_BONUS'\nexport type SetShieldBonusAction = {\n  type: typeof SET_SHIELD_BONUS,\n  payload: number,\n}\nexport const SET_NATURAL_ARMOR = 'SET_NATURAL_ARMOR'\nexport type SetNaturalArmorAction = {\n  type: typeof SET_NATURAL_ARMOR,\n  payload: number,\n}\nexport const SET_DEFLECTION_MODIFIER = 'SET_DEFLECTION_MODIFIER'\nexport type SetDeflectionModifierAction = {\n  type: typeof SET_DEFLECTION_MODIFIER,\n  payload: number,\n}\nexport const SET_MISC_ARMOR_MODIFIER = 'SET_MISC_ARMOR_MODIFIER'\nexport type SetMiscArmorModifierAction = {\n  type: typeof SET_MISC_ARMOR_MODIFIER,\n  payload: number,\n}\nexport const SET_OTHER_ARMOR_MODIFIERS = 'SET_OTHER_ARMOR_MODIFIERS'\nexport type SetOtherArmorModifiersAction = {\n  type: typeof SET_OTHER_ARMOR_MODIFIERS,\n  payload: string\n}\n\nexport type SavingThrowValues = {\n  baseSave: number, // tabellen\n  magicModifier: number, // zauber\n  miscModifier: number, // talente\n  temporaryModifier: number,\n}\nexport const SET_BASE_SAVE = 'SET_BASE_SAVE'\nexport type SetBaseSaveAction = {\n  type: typeof SET_BASE_SAVE,\n  payload: {\n    savingThrowType: keyof SavingThrowsState,\n    newBaseSave: number,\n  },\n}\nexport const SET_SAVING_THROW_MAGIC_MODIFIER = 'SET_SAVING_THROW_MAGIC_MODIFIER'\nexport type SetSavingThrowMagicModifierAction = {\n  type: typeof SET_SAVING_THROW_MAGIC_MODIFIER,\n  payload: {\n    savingThrowType: keyof SavingThrowsState,\n    newMagicModifier: number,\n  },\n}\nexport const SET_MISC_SAVING_THROW_MODIFIER = 'SET_MISC_SAVING_THROW_MODIFIER'\nexport type SetMiscSavingThrowModifierAction = {\n  type: typeof SET_MISC_SAVING_THROW_MODIFIER,\n  payload: {\n    savingThrowType: keyof SavingThrowsState,\n    newMiscModifier: number,\n  },\n}\nexport const SET_TEMPORARY_SAVING_THROW_MODIFIER = 'SET_TEMPORARY_SAVING_THROW_MODIFIER'\nexport type SetTemporarySavingThrowModifierAction = {\n  type: typeof SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  payload: {\n    savingThrowType: keyof SavingThrowsState,\n    newTemporaryModifier: number,\n  },\n}\n\nexport type SavingThrowsState = {\n  fortitude: SavingThrowValues,\n  reflex: SavingThrowValues,\n  will: SavingThrowValues,\n}\n\nexport type AttackBonusesState = {\n  baseAttackBonus: number,\n  spellResistance: number, // gegenstaende, klassen, voelker\n}\nexport const SET_BASE_ATTACK_BONUS = 'SET_BASE_ATTACK_BONUS'\nexport type SetBaseAttackBonusAction = {\n  type: typeof SET_BASE_ATTACK_BONUS,\n  payload: number,\n}\nexport const SET_SPELL_RESISTANCE = 'SET_SPELL_RESISTANCE'\nexport type SetSpellResistanceAction = {\n  type: typeof SET_SPELL_RESISTANCE,\n  payload: number,\n}\n\nexport type CombatValuesState = {\n  initiative: InitiativeState,\n  armorClass: ArmorClassState,\n  savingThrows: SavingThrowsState,\n  attackBonuses: AttackBonusesState,\n}\n\nexport type CombatValuesActionTypes = SetInitiativeMiscModifierAction |\n  SetArmorBonusAction |\n  SetShieldBonusAction |\n  SetNaturalArmorAction |\n  SetDeflectionModifierAction |\n  SetMiscArmorModifierAction |\n  SetOtherArmorModifiersAction |\n  SetBaseSaveAction |\n  SetSavingThrowMagicModifierAction |\n  SetMiscSavingThrowModifierAction |\n  SetTemporarySavingThrowModifierAction |\n  SetBaseAttackBonusAction |\n  SetSpellResistanceAction\n","import { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { RootReducer } from './root-reducer'\nimport localForage from 'localforage'\nimport { persistReducer } from 'redux-persist'\n\n\nconst persistenceConfig = {\n  key: 'pathfinder-character-sheet',\n  storage: localForage,\n}\n\nconst persistedReducer = persistReducer(persistenceConfig, RootReducer)\n\nexport const store = createStore(\n  persistedReducer,\n  devToolsEnhancer({}),\n)\n","import {\n  UPDATE_CAMPAIGN,\n  UPDATE_CHARACTER_AGE,\n  UPDATE_CHARACTER_ALIGNMENT,\n  UPDATE_CHARACTER_CLASS,\n  UPDATE_CHARACTER_DEITY,\n  UPDATE_CHARACTER_EYES,\n  UPDATE_CHARACTER_GENDER,\n  UPDATE_CHARACTER_HAIR,\n  UPDATE_CHARACTER_HEIGHT,\n  UPDATE_CHARACTER_HOMELAND,\n  UPDATE_CHARACTER_LEVEL,\n  UPDATE_CHARACTER_NAME,\n  UPDATE_CHARACTER_RACE,\n  UPDATE_CHARACTER_SIZE_CATEGORY,\n  UPDATE_CHARACTER_WEIGHT,\n  UPDATE_PLAYER_NAME,\n  UpdateCharacterMetaDataActionTypes,\n} from './types'\nimport { CharacterGender, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const setCharacterName = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_NAME,\n    payload: name,\n  }\n)\n\nexport const setCharacterClass = (className: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_CLASS,\n    payload: className,\n  }\n)\n\nexport const setCharacterRace = (race: CharacterRace | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_RACE,\n    payload: race,\n  }\n)\n\nexport const setCharacterAlignment = (alignment: Alignment | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_ALIGNMENT,\n    payload: alignment,\n  }\n)\n\nexport const setCharacterLevel = (level: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_LEVEL,\n    payload: level,\n  }\n)\n\nexport const setCharacterDeity = (deity: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_DEITY,\n    payload: deity,\n  }\n)\n\nexport const setCharacterSizeCategory = (sizeCategory: SizeCategory): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_SIZE_CATEGORY,\n    payload: sizeCategory,\n  }\n)\n\nexport const setCharacterGender = (gender: CharacterGender | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_GENDER,\n    payload: gender,\n  }\n)\n\nexport const setCharacterAge = (age: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_AGE,\n    payload: age,\n  }\n)\n\nexport const setCharacterHomeland = (homeland: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HOMELAND,\n    payload: homeland,\n  }\n)\n\nexport const setCharacterHeight = (height: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HEIGHT,\n    payload: height,\n  }\n)\n\nexport const setCharacterWeight = (weight: number | undefined): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_WEIGHT,\n    payload: weight,\n  }\n)\n\nexport const setCharacterHair = (hair: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_HAIR,\n    payload: hair,\n  }\n)\n\nexport const setCharacterEyes = (eyes: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CHARACTER_EYES,\n    payload: eyes,\n  }\n)\n\nexport const setPlayerName = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_PLAYER_NAME,\n    payload: name,\n  }\n)\n\nexport const setCampaign = (name: string): UpdateCharacterMetaDataActionTypes => (\n  {\n    type: UPDATE_CAMPAIGN,\n    payload: name,\n  }\n)\n","import { CharacterClass, CharacterGender, CharacterMetaData, CharacterRace, SizeCategory } from './Character'\nimport { Alignment } from './Alignment'\n\nexport const UPDATE_CHARACTER_NAME = 'UPDATE_CHARACTER_NAME'\nexport const UPDATE_CHARACTER_CLASS = 'UPDATE_CHARACTER_CLASS'\nexport const UPDATE_CHARACTER_RACE = 'UPDATE_CHARACTER_RACE'\nexport const UPDATE_CHARACTER_ALIGNMENT = 'UPDATE_CHARACTER_ALIGNMENT'\nexport const UPDATE_CHARACTER_LEVEL = 'UPDATE_CHARACTER_LEVEL'\nexport const UPDATE_CHARACTER_DEITY = 'UPDATE_CHARACTER_DEITY'\nexport const UPDATE_CHARACTER_SIZE_CATEGORY = 'UPDATE_CHARACTER_SIZE_CATEGORY'\nexport const UPDATE_CHARACTER_GENDER = 'UPDATE_CHARACTER_GENDER'\nexport const UPDATE_CHARACTER_AGE = 'UPDATE_CHARACTER_AGE'\nexport const UPDATE_CHARACTER_HOMELAND = 'UPDATE_CHARACTER_HOMELAND'\nexport const UPDATE_CHARACTER_HEIGHT = 'UPDATE_CHARACTER_HEIGHT'\nexport const UPDATE_CHARACTER_WEIGHT = 'UPDATE_CHARACTER_WEIGHT'\nexport const UPDATE_CHARACTER_HAIR = 'UPDATE_CHARACTER_HAIR'\nexport const UPDATE_CHARACTER_EYES = 'UPDATE_CHARACTER_EYES'\nexport const UPDATE_PLAYER_NAME = 'UPDATE_PLAYER_NAME'\nexport const UPDATE_CAMPAIGN = 'UPDATE_CAMPAIGN'\n\ntype UpdateCharacterNameAction = {\n  type: typeof UPDATE_CHARACTER_NAME\n  payload: string\n}\n\ntype UpdateCharacterClassAction = {\n  type: typeof UPDATE_CHARACTER_CLASS\n  payload: CharacterClass | undefined\n}\n\ntype UpdateCharacterRaceAction = {\n  type: typeof UPDATE_CHARACTER_RACE\n  payload: CharacterRace | undefined\n}\n\ntype UpdateCharacterAlignmentAction = {\n  type: typeof UPDATE_CHARACTER_ALIGNMENT\n  payload: Alignment | undefined\n}\n\ntype UpdateCharacterLevelAction = {\n  type: typeof UPDATE_CHARACTER_LEVEL\n  payload: number | undefined\n}\n\ntype UpdateCharacterDeityTypeAction = {\n  type: typeof UPDATE_CHARACTER_DEITY\n  payload: string\n}\n\ntype UpdateCharacterSizeCategoryAction = {\n  type: typeof UPDATE_CHARACTER_SIZE_CATEGORY\n  payload: SizeCategory\n}\n\ntype UpdateCharacterGenderAction = {\n  type: typeof UPDATE_CHARACTER_GENDER\n  payload: CharacterGender | undefined\n}\n\ntype UpdateCharacterAgeAction = {\n  type: typeof UPDATE_CHARACTER_AGE\n  payload: number | undefined\n}\n\ntype UpdateCharacterHomelandAction = {\n  type: typeof UPDATE_CHARACTER_HOMELAND\n  payload: string\n}\n\ntype UpdateCharacterHeightAction = {\n  type: typeof UPDATE_CHARACTER_HEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterWeightAction = {\n  type: typeof UPDATE_CHARACTER_WEIGHT\n  payload: number | undefined\n}\n\ntype UpdateCharacterHAIRAction = {\n  type: typeof UPDATE_CHARACTER_HAIR\n  payload: string\n}\n\ntype UpdateCharacterEYESAction = {\n  type: typeof UPDATE_CHARACTER_EYES\n  payload: string\n}\n\ntype UpdatePlayerNameAction = {\n  type: typeof UPDATE_PLAYER_NAME\n  payload: string\n}\n\ntype UpdateCampaignAction = {\n  type: typeof UPDATE_CAMPAIGN\n  payload: string\n}\n\nexport type UpdateCharacterMetaDataActionTypes =\n  UpdateCharacterNameAction\n  | UpdateCharacterClassAction\n  | UpdateCharacterRaceAction\n  | UpdateCharacterAlignmentAction\n  | UpdateCharacterLevelAction\n  | UpdateCharacterDeityTypeAction\n  | UpdateCharacterSizeCategoryAction\n  | UpdateCharacterGenderAction\n  | UpdateCharacterAgeAction\n  | UpdateCharacterHomelandAction\n  | UpdateCharacterHeightAction\n  | UpdateCharacterWeightAction\n  | UpdateCharacterHAIRAction\n  | UpdateCharacterEYESAction\n  | UpdatePlayerNameAction\n  | UpdateCampaignAction\n\nexport type CharacterMetaDataState = CharacterMetaData\n","export enum Morality {\n  GOOD,\n  NEUTRAL,\n  BAD,\n}\n\nexport enum Ethics {\n  LAW,\n  NEUTRAL,\n  CHAOS\n}\n\nexport type Alignment = {\n  morality: Morality\n  ethics: Ethics\n}\n\nexport const NeutralAlignment = {\n  morality: Morality.NEUTRAL,\n  ethics: Ethics.NEUTRAL,\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent, useCallback } from 'react'\nimport * as CharacterMetadataActions from '../../store/CharacterMetaData/actions'\nimport PropTypes from 'prop-types'\n\nimport './DisplayCharacterMetaData.scss'\nimport { CharacterGender, SizeCategory } from '../../store/CharacterMetaData/Character'\nimport { MetadataSelect } from './MetadataSelect/MetadataSelect'\nimport { Ethics, Morality } from '../../store/CharacterMetaData/Alignment'\n\nconst GenderInputOptions = [\n  { label: undefined, value: undefined },\n  { label: 'Male', value: CharacterGender.MALE },\n  { label: 'Female', value: CharacterGender.FEMALE },\n  { label: 'Other', value: CharacterGender.OTHER },\n]\n\nexport enum GenderInputTestIds {\n  wrapper = 'gender-input-wrapper',\n  select = 'gender-input-select',\n}\n\nconst SizeCategoryInputOptions = [\n  { label: 'Small', value: SizeCategory.SMALL },\n  { label: 'Medium', value: SizeCategory.MEDIUM },\n  { label: 'large', value: SizeCategory.LARGE },\n]\n\nexport enum SizeCategoryInputTestIds {\n  wrapper = 'size-category-input-wrapper',\n  select = 'size-category-input-select',\n}\n\nconst AlignmentOptions = [\n  { label: undefined, value: undefined },\n  { label: 'LG', value: { ethics: Ethics.LAW, morality: Morality.GOOD } },\n  { label: 'LN', value: { ethics: Ethics.LAW, morality: Morality.NEUTRAL } },\n  { label: 'LB', value: { ethics: Ethics.LAW, morality: Morality.BAD } },\n\n  { label: 'NG', value: { ethics: Ethics.NEUTRAL, morality: Morality.GOOD } },\n  { label: 'N', value: { ethics: Ethics.NEUTRAL, morality: Morality.NEUTRAL } },\n  { label: 'NB', value: { ethics: Ethics.NEUTRAL, morality: Morality.BAD } },\n\n  { label: 'CG', value: { ethics: Ethics.CHAOS, morality: Morality.GOOD } },\n  { label: 'CN', value: { ethics: Ethics.CHAOS, morality: Morality.NEUTRAL } },\n  { label: 'CB', value: { ethics: Ethics.CHAOS, morality: Morality.BAD } },\n]\n\nexport enum AlignmentInputTestIds {\n  wrapper = 'alignment-input-wrapper',\n  select = 'alignment-input-select',\n}\n\nconst StringInputPropTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataStringInput: React.FC<PropTypes.InferProps<typeof StringInputPropTypes>> = ({ value, onChange, id, label }) => {\n  return <div className={`metadata-input-block ${id}`}>\n    <input value={value ?? ''} onChange={onChange} id={id} />\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n\nconst NumberInputPropTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string,\n}\n\nconst MetadataNumberInput: React.FC<PropTypes.InferProps<typeof NumberInputPropTypes>> = ({ value, onChange, id, label }) => {\n  return <div className={`metadata-input-block ${id}`}>\n    <input value={value ?? undefined} onChange={onChange} id={id} type={'number'} />\n    <label htmlFor={id}>{label}</label>\n  </div>\n}\n\nconst mapState = (state: RootState) => state.characterMetaData\n\nconst mapDispatchToProps = CharacterMetadataActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCharacterMetaData = connector(({\n  characterName, setCharacterName,\n  playerName, setPlayerName,\n  deity, setCharacterDeity,\n  homeland, setCharacterHomeland,\n  race, setCharacterRace,\n  hair, setCharacterHair,\n  eyes, setCharacterEyes,\n  level, setCharacterLevel,\n  className, setCharacterClass,\n  campaign, setCampaign,\n  age, setCharacterAge,\n  height, setCharacterHeight,\n  weight, setCharacterWeight,\n  alignment, setCharacterAlignment,\n  sizeCategory, setCharacterSizeCategory,\n  gender, setCharacterGender,\n}: Props) => {\n  const callWithStringValue = useCallback(\n    (callback: (value: string) => any) => useCallback(\n      (event: ChangeEvent<HTMLInputElement>) => callback(event.target.value),\n      [callback],\n    ),\n    [],\n  )\n\n  const callWithNumberValue = useCallback(\n    (callback: (value: number | undefined) => any) => useCallback(\n      (event: ChangeEvent<HTMLInputElement>) => {\n        const value = parseInt(event.target.value)\n        callback(Number.isNaN(value) ? undefined : value)\n      },\n      [callback],\n    ),\n    [],\n  )\n\n  return (\n    <div className={'character-meta-data'}>\n      <MetadataStringInput\n        id={'character-name'}\n        value={characterName}\n        label={'Charakter Name'}\n        onChange={callWithStringValue(setCharacterName)}\n      />\n      <MetadataSelect\n        onChange={setCharacterAlignment}\n        options={AlignmentOptions}\n        id={'alignment'}\n        label={'Alignment'}\n        value={alignment}\n        testIds={AlignmentInputTestIds}\n      />\n      <MetadataStringInput\n        id={'player-name'}\n        value={playerName}\n        label={'Player'}\n        onChange={callWithStringValue(setPlayerName)}\n      />\n      <MetadataStringInput\n        id={'class-name'}\n        value={className}\n        label={'Character Class'}\n        onChange={callWithStringValue(setCharacterClass)}\n      />\n      <MetadataNumberInput\n        id={'level'}\n        value={level}\n        label={'Level'}\n        onChange={callWithNumberValue(setCharacterLevel)}\n      />\n      <MetadataStringInput\n        id={'deity'}\n        value={deity}\n        label={'Deity'}\n        onChange={callWithStringValue(setCharacterDeity)}\n      />\n      <MetadataSelect\n        testIds={SizeCategoryInputTestIds}\n        onChange={setCharacterSizeCategory}\n        options={SizeCategoryInputOptions}\n        id={'size-category'}\n        value={sizeCategory}\n        label={'Size Category'}\n      />\n      <MetadataSelect\n        testIds={GenderInputTestIds}\n        onChange={setCharacterGender}\n        options={GenderInputOptions}\n        id={'gender'}\n        value={gender}\n        label={'Gender'}\n      />\n      <MetadataStringInput\n        id={'campaign'}\n        value={campaign}\n        label={'Campaign'}\n        onChange={callWithStringValue(setCampaign)}\n      />\n      <MetadataStringInput\n        id={'homeland'}\n        value={homeland}\n        label={'Homeland'}\n        onChange={callWithStringValue(setCharacterHomeland)}\n      />\n      <MetadataStringInput\n        id={'race'}\n        value={race}\n        label={'Race'}\n        onChange={callWithStringValue(setCharacterRace)}\n      />\n      <MetadataStringInput\n        id={'hair'}\n        value={hair}\n        label={'Hair'}\n        onChange={callWithStringValue(setCharacterHair)}\n      />\n      <MetadataStringInput\n        id={'eyes'}\n        value={eyes}\n        label={'Eyes'}\n        onChange={callWithStringValue(setCharacterEyes)}\n      />\n      <MetadataNumberInput\n        id={'age'}\n        value={age}\n        label={'Age'}\n        onChange={callWithNumberValue(setCharacterAge)}\n      />\n      <MetadataNumberInput\n        id={'height'}\n        value={height}\n        label={'Height'}\n        onChange={callWithNumberValue(setCharacterHeight)}\n      />\n      <MetadataNumberInput\n        id={'weight'}\n        value={weight}\n        label={'Weight'}\n        onChange={callWithNumberValue(setCharacterWeight)}\n      />\n    </div>\n  )\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Overwrite } from '../../types/util'\nimport './BoxInput.scss'\n\nexport const BoxInputPropTypes = {\n  className: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.arrayOf(PropTypes.string.isRequired),\n  ]).isRequired,\n  testId: PropTypes.string,\n  labelTestId: PropTypes.string,\n  hideBox: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n}\n\nexport const BoxInputDefaultProps = {\n  onChange: () => {},\n  className: '',\n  value: '',\n  hideBox: false,\n  type: '',\n  disabled: false,\n}\n\ntype PropType = Overwrite<PropTypes.InferProps<typeof BoxInputPropTypes>, {\n  onChange?: React.EventHandler<React.ChangeEvent>\n}>\n\nexport const BoxInput = (props: PropType) => {\n  return <label\n    className={`box-input ${props.hideBox ? 'hide-box' : ''} ${props.className}`}\n    data-testid={props.labelTestId}\n  >\n    <input\n      onChange={props.onChange}\n      value={props.value}\n      data-testid={props.testId}\n      type={props.type}\n      disabled={props.disabled}\n    />\n    {props.label ? <span className={'label'}>\n      {props.label}\n    </span> : null}\n  </label>\n}\n\nBoxInput.propTypes = BoxInputPropTypes\nBoxInput.defaultProps = BoxInputDefaultProps\n","import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { BoxInput, BoxInputDefaultProps, BoxInputPropTypes } from './BoxInput'\nimport { Overwrite } from '../../types/util'\n\nconst propTypes = {\n  ...BoxInputPropTypes,\n  value: PropTypes.number,\n  type: PropTypes.any,\n  onChange: PropTypes.func,\n}\n\nconst defaultProps = {\n  ...BoxInputDefaultProps,\n  type: undefined,\n  onChange: undefined,\n}\n\ntype PropTypes = Overwrite<PropTypes.InferProps<typeof propTypes>, {\n  onChange?: (value: number | undefined, evt: React.ChangeEvent<HTMLInputElement>) => void,\n}>\n\nexport const BoxNumberInput = (props: PropTypes) => {\n  const changeHandlerFromProps = props.onChange\n  const changeHandler = useCallback((evt: React.ChangeEvent<HTMLInputElement>) => {\n    let valueAsNumber = parseInt(evt.target.value)\n    changeHandlerFromProps?.(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber, evt)\n  }, [changeHandlerFromProps])\n\n  return <BoxInput\n    {...props}\n    value={props.value === null ? undefined : props.value}\n    onChange={changeHandler}\n    type={'number'}\n    disabled={!Boolean(props.onChange)}\n  />\n}\nBoxNumberInput.propTypes = propTypes\nBoxNumberInput.defaultProps = defaultProps\n","import React from 'react'\nimport './BlackBox.scss'\n\ntype Props = {\n  [key: string]: any,\n  className?: string,\n}\n\nexport const BlackBox: React.FC<Props> = (props) => {\n  const { children, className, ...propsWithoutChildren } = props\n  return <div\n    {...propsWithoutChildren}\n    className={`black-box ${className}`}\n  >\n    {props.children}\n  </div>\n}\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React from 'react'\nimport { setAbilityScore, setAbilityTempAdjustment } from '../../store/Abilities/actions'\nimport { AbilityAttributes, abilityName, AbilityState } from '../../store/Abilities/types'\nimport { getModifierFromScore } from '../../store/Abilities/selectors'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport './DisplayAbilities.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\n\nconst abilityShorthands: { [key in abilityName]: string } = {\n  dexterity: 'dex',\n  strength: 'str',\n  wisdom: 'wis',\n  constitution: 'con',\n  charisma: 'cha',\n  intelligence: 'int',\n}\n\nconst mapState = (state: RootState) => (\n  {\n    abilities: state.abilities,\n  }\n)\n\nconst mapDispatchToProps = {\n  setAbilityScore,\n  setAbilityTempAdjustment,\n}\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayAbilities = connector(({\n  abilities,\n  setAbilityScore,\n  setAbilityTempAdjustment,\n}: Props) => {\n  const onScoreChange = (abilityName: keyof AbilityState) => (newVal?: number) => {\n    if (newVal !== undefined) {\n      setAbilityScore(abilityName, newVal)\n    }\n  }\n  const onTempAdjustmentChange = (abilityName: keyof AbilityState) => (newVal?: number) => {\n    if (newVal !== undefined) {\n      setAbilityTempAdjustment(abilityName, newVal)\n    }\n  }\n\n  const abilityNames = Object.keys(abilities) as Array<abilityName>\n  const abilityElements = abilityNames.map((abilityName) => {\n    const abilityAttributes: AbilityAttributes = abilities[abilityName]\n\n    return (\n      <tr key={abilityName}>\n        <td>\n          <BlackBox\n          >\n            {abilityShorthands[abilityName]}\n            <aside>{abilityName}</aside>\n          </BlackBox>\n        </td>\n        <td>\n          <BoxNumberInput\n            value={abilityAttributes.score}\n            onChange={onScoreChange(abilityName)}\n          />\n        </td>\n        <td>\n          <BoxNumberInput\n            value={getModifierFromScore(abilityAttributes.score)}\n          />\n        </td>\n        <td>\n          <BoxNumberInput\n            value={abilityAttributes.temporaryAdjustment || null}\n            onChange={onTempAdjustmentChange(abilityName)}\n          />\n        </td>\n        <td>\n          <BoxNumberInput\n            value={abilityAttributes.temporaryAdjustment ?\n              getModifierFromScore(abilityAttributes.score + abilityAttributes.temporaryAdjustment)\n              : null\n            }\n          /></td>\n      </tr>\n    )\n  })\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td>Ability Name</td>\n          <td>Score</td>\n          <td>Mod</td>\n          <td>Temp adjustment</td>\n          <td>Temp mod</td>\n        </tr>\n      </thead>\n      <tbody>\n        {abilityElements}\n      </tbody>\n    </table>\n  )\n})\n","import {\n  abilityName,\n  SET_ABILITY_SCORE,\n  SET_ABILITY_TEMP_ADJUSTMENT,\n  SetAbilityScoreAction,\n  SetAbilityTempAdjustmentAction,\n} from './types'\n\nexport const setAbilityScore = (ability: abilityName, newScore: number): SetAbilityScoreAction => {\n    return {\n      type: SET_ABILITY_SCORE,\n      ability: ability,\n      score: newScore,\n    }\n}\n\nexport const setAbilityTempAdjustment = (ability: abilityName, newAdjustment: number): SetAbilityTempAdjustmentAction => {\n    return {\n      type: SET_ABILITY_TEMP_ADJUSTMENT,\n      ability: ability,\n      adjustment: newAdjustment,\n    }\n}\n","export type abilityName = 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma'\n\nexport type AbilityAttributes = {\n  score: number\n  temporaryAdjustment: number\n}\n\nexport type AbilityState = {\n  [k in abilityName]: AbilityAttributes\n}\n\nexport const SET_ABILITY_SCORE = 'SET_ABILITY_SCORE'\nexport const SET_ABILITY_TEMP_ADJUSTMENT = 'SET_ABILITY_TEMP_ADJUSTMENT'\n\nexport type SetAbilityScoreAction = {\n  type: typeof SET_ABILITY_SCORE\n  ability: keyof AbilityState\n  score: number\n}\n\nexport type SetAbilityTempAdjustmentAction = {\n  type: typeof SET_ABILITY_TEMP_ADJUSTMENT\n  ability: keyof AbilityState\n  adjustment: number\n}\n\nexport type AbilitiesActionTypes = SetAbilityTempAdjustmentAction | SetAbilityScoreAction\n","import {\n  SkillName,\n  UPDATE_SKILL_IS_CLASS_SKILL,\n  UPDATE_SKILL_MISC_MODIFIER,\n  UPDATE_SKILL_RANKS,\n  UpdateSkillActionTypes,\n} from './types'\n\nexport const setSkillRanks = (skillName: SkillName, ranks: number): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_RANKS,\n    payload: {\n      skillName,\n      ranks,\n    },\n  }\n}\n\nexport const setSkillMiscMod = (skillName: SkillName, miscModifier: number): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_MISC_MODIFIER,\n    payload: {\n      skillName,\n      miscModifier,\n    },\n  }\n}\n\nexport const setIsSkillClassSkill = (skillName: SkillName, isClassSkill: boolean): UpdateSkillActionTypes => {\n  return {\n    type: UPDATE_SKILL_IS_CLASS_SKILL,\n    payload: {\n      skillName,\n      isClassSkill,\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './StyledCheckbox.scss'\n\nconst propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool.isRequired,\n}\n\nexport const StyledCheckbox = (props: PropTypes.InferProps<typeof propTypes>) => {\n  return <input\n    className={`styled-checkbox ${props.className}`}\n    type={'checkbox'}\n    checked={props.checked ?? false}\n    onChange={props.onChange!}\n    disabled={props.disabled}\n  />\n}\n\nStyledCheckbox.propTypes = propTypes\nStyledCheckbox.defaultProps = {\n  checked: false,\n  className: '',\n  onChange: () => {},\n  disabled: false,\n}\n","import { quickSkillDefinitions, Skill, SkillState } from './types'\nimport { createSelector } from 'reselect'\nimport { getAbilityModifiers } from '../Abilities/selectors'\nimport { abilityName } from '../Abilities/types'\nimport { RootState } from '../root-reducer'\n\nexport const getSkills = (state: RootState) => state.skills\nexport type TotalSkillBonuses = {\n  [k in keyof SkillState]: number\n}\n\nexport const computeTotalSkillBonus = (skill: Skill, abilityModifier: number): number => {\n  return abilityModifier + skill.ranks + skill.miscModifier + (\n    skill.isClassSkill && skill.ranks >= 1 ? 3 : 0\n  )\n}\n\nexport const getTotalSkillBonuses = createSelector([getSkills, getAbilityModifiers], (skills, abilityModifiers) => {\n  const skillNames = Object.keys(skills) as Array<keyof SkillState>\n  return skillNames.reduce((totalSkillsBonuses, currSkillName) => {\n    const baseAbilityName = quickSkillDefinitions[currSkillName].baseAbility as abilityName\n\n    return {\n      ...totalSkillsBonuses,\n      [currSkillName]: computeTotalSkillBonus(skills[currSkillName], abilityModifiers[baseAbilityName]),\n    }\n  }, {} as TotalSkillBonuses)\n})\n","import { RootState } from '../../store/root-reducer'\nimport { connect, ConnectedProps } from 'react-redux'\nimport React, { ChangeEvent } from 'react'\nimport { quickSkillDefinitions, Skill, SkillName } from '../../store/Skills/types'\nimport * as UpdateSkillsActions from '../../store/Skills/actions'\n\nimport './DisplaySkills.scss'\nimport { StyledCheckbox } from '../StyledCheckbox/StyledCheckbox'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getTotalSkillBonuses } from '../../store/Skills/selectors'\n\nconst mapState = (state: RootState) => (\n  {\n    skills: state.skills,\n    abilityModifiers: getAbilityModifiers(state),\n    totalSkillBonuses: getTotalSkillBonuses(state),\n  }\n)\n\nconst mapDispatchToProps = UpdateSkillsActions\n\nconst connector = connect(mapState, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplaySkills = connector((\n  {\n    skills,\n    setIsSkillClassSkill,\n    setSkillMiscMod,\n    setSkillRanks,\n    abilityModifiers,\n    totalSkillBonuses,\n  }: Props,\n) => {\n  const onSkillRanksChange = (skillName: SkillName) => (event: ChangeEvent<HTMLInputElement>) => {\n    setSkillRanks(skillName, parseInt(event.target.value))\n  }\n\n  const onSkillMiscModChange = (skillName: SkillName) => (event: ChangeEvent<HTMLInputElement>) => {\n    setSkillMiscMod(skillName, parseInt(event.target.value))\n  }\n\n  return <div className={'skills'}>\n    <table>\n      <thead>\n        <tr>\n          <th>Skill Names</th>\n          <th>Total Bonus</th>\n          <th> {/* Base ability name */} </th>\n          <th>Ability Mod.</th>\n          <th> {/* + */} </th>\n          <th>Ranks</th>\n          <th> {/* + */} </th>\n          <th>Misc. Mod.</th>\n        </tr>\n      </thead>\n      <tbody>\n        {(\n          Object.entries(skills) as Array<[SkillName, Skill]>\n        )\n          .map(([skillName, skill], index) => {\n            const { baseAbility: abilityName, isTrainedOnly } = quickSkillDefinitions[skillName]\n            return <tr\n              key={index}\n            >\n              <td>\n                <label>\n                  <StyledCheckbox\n                    checked={skill.isClassSkill}\n                    onChange={() => setIsSkillClassSkill(skillName, !skill.isClassSkill)}\n                  />\n\n                  {skillName}{isTrainedOnly ? '*' : ''}\n                </label>\n              </td>\n              <td>{totalSkillBonuses[skillName]}</td>\n              <td>={abilityName}</td>\n              <td>{abilityModifiers[abilityName]}</td>\n              <td>+</td>\n              <td>\n                <input\n                  type={'number'}\n                  value={skill.ranks}\n                  onChange={onSkillRanksChange(skillName)}\n                />\n              </td>\n              <td>+</td>\n              <td>\n                <input\n                  type={'number'}\n                  value={skill.miscModifier}\n                  onChange={onSkillMiscModChange(skillName)}\n                />\n              </td>\n            </tr>\n          })}\n        <tr className={'legend'}>\n          <td>\n            <StyledCheckbox checked={true} disabled />\n            Class Skill &nbsp; &nbsp; * Trained Only\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n})\n","import {\n  SavingThrowsState,\n  SET_ARMOR_BONUS,\n  SET_BASE_ATTACK_BONUS,\n  SET_BASE_SAVE,\n  SET_DEFLECTION_MODIFIER,\n  SET_INITIATIVE_MISC_MODIFIER,\n  SET_MISC_ARMOR_MODIFIER,\n  SET_MISC_SAVING_THROW_MODIFIER,\n  SET_NATURAL_ARMOR,\n  SET_OTHER_ARMOR_MODIFIERS,\n  SET_SAVING_THROW_MAGIC_MODIFIER,\n  SET_SHIELD_BONUS,\n  SET_SPELL_RESISTANCE,\n  SET_TEMPORARY_SAVING_THROW_MODIFIER,\n  SetArmorBonusAction,\n  SetBaseAttackBonusAction,\n  SetBaseSaveAction,\n  SetDeflectionModifierAction,\n  SetInitiativeMiscModifierAction,\n  SetMiscArmorModifierAction,\n  SetMiscSavingThrowModifierAction,\n  SetNaturalArmorAction,\n  SetOtherArmorModifiersAction,\n  SetSavingThrowMagicModifierAction,\n  SetShieldBonusAction,\n  SetSpellResistanceAction,\n  SetTemporarySavingThrowModifierAction,\n} from './types'\n\nexport const setBaseSave = (newBaseSave: number, savingThrowType: keyof SavingThrowsState): SetBaseSaveAction => (\n  {\n    type: SET_BASE_SAVE,\n    payload: { savingThrowType, newBaseSave },\n  }\n)\n\nexport const setSavingThrowMagicModifier = (\n  newMagicModifier: number, savingThrowType: keyof SavingThrowsState): SetSavingThrowMagicModifierAction => (\n  {\n    type: SET_SAVING_THROW_MAGIC_MODIFIER,\n    payload: {\n      savingThrowType, newMagicModifier,\n    },\n  }\n)\n\nexport const setMiscSavingThrowModifier = (\n  newMiscModifier: number, savingThrowType: keyof SavingThrowsState): SetMiscSavingThrowModifierAction => (\n  {\n    type: SET_MISC_SAVING_THROW_MODIFIER,\n    payload: {\n      savingThrowType, newMiscModifier,\n    },\n  }\n)\n\nexport const setTemporarySavingThrowModifier = (\n  newTemporaryModifier: number, savingThrowType: keyof SavingThrowsState): SetTemporarySavingThrowModifierAction => (\n  {\n    type: SET_TEMPORARY_SAVING_THROW_MODIFIER,\n    payload: {\n      newTemporaryModifier, savingThrowType,\n    },\n  }\n)\n\nexport const setInitiativeMiscModifier = (newMiscModifier: number): SetInitiativeMiscModifierAction => (\n  {\n    type: SET_INITIATIVE_MISC_MODIFIER,\n    payload: newMiscModifier,\n  }\n)\n\nexport const setBaseAttackBonus = (newBaseAttackBonus: number): SetBaseAttackBonusAction => (\n  {\n    type: SET_BASE_ATTACK_BONUS,\n    payload: newBaseAttackBonus,\n  }\n)\n\nexport const setSpellResistance = (newSpellResistance: number): SetSpellResistanceAction => (\n  {\n    type: SET_SPELL_RESISTANCE,\n    payload: newSpellResistance,\n  }\n)\n\nexport const setShieldBonus = (newShieldBonus: number): SetShieldBonusAction => (\n  {\n    type: SET_SHIELD_BONUS,\n    payload: newShieldBonus,\n  }\n)\n\nexport const setArmorBonus = (newArmorBonus: number): SetArmorBonusAction => (\n  {\n    type: SET_ARMOR_BONUS,\n    payload: newArmorBonus,\n  }\n)\n\nexport const setDeflectionModifier = (newDeflectionModifier: number): SetDeflectionModifierAction => (\n  {\n    type: SET_DEFLECTION_MODIFIER,\n    payload: newDeflectionModifier,\n  }\n)\n\nexport const setMiscArmorModifier = (newMiscArmorModifier: number): SetMiscArmorModifierAction => (\n  {\n    type: SET_MISC_ARMOR_MODIFIER,\n    payload: newMiscArmorModifier,\n  }\n)\n\nexport const setNaturalArmor = (newNaturalArmor: number): SetNaturalArmorAction => (\n  {\n    type: SET_NATURAL_ARMOR,\n    payload: newNaturalArmor,\n  }\n)\n\nexport const setOtherArmorModifiers = (newOtherArmorModifiers: string): SetOtherArmorModifiersAction => (\n  {\n    type: SET_OTHER_ARMOR_MODIFIERS,\n    payload: newOtherArmorModifiers,\n  }\n)\n","import { CharacterMetaDataState } from './types'\nimport { SizeCategory } from './Character'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\n\nexport const getCharacterMetadata = (state: RootState) => state.characterMetaData\n\nexport const getSizeModifier = createSelector(\n  [getCharacterMetadata], (characterMetadataState: CharacterMetaDataState) => {\n    switch (characterMetadataState.sizeCategory) {\n      case SizeCategory.LARGE:\n        return -1\n      case SizeCategory.MEDIUM:\n        return 0\n      case SizeCategory.SMALL:\n        return 1\n      default:\n        return NaN\n    }\n  })\n","import { CombatValuesState } from './types'\nimport { AbilityModifiers, getAbilityModifiers } from '../Abilities/selectors'\nimport { getSizeModifier } from '../CharacterMetaData/selectors'\nimport { RootState } from '../root-reducer'\nimport { createSelector } from 'reselect'\n\nexport const getCombatValues = (state: RootState) => state.combatValues\n\nexport const getTotalInitiativeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (state: CombatValuesState, abilityModifiers: AbilityModifiers) =>\n    state.initiative.miscModifier + abilityModifiers.dexterity,\n)\n\nexport const getArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 + state.armorClass.armorBonus + state.armorClass.shieldBonus + abilityModifiers.dexterity +\n    sizeModifier + state.armorClass.naturalArmor + state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getTouchArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 + abilityModifiers.dexterity + sizeModifier + state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFlatFootedArmorClass = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) =>\n    10 + state.armorClass.armorBonus + state.armorClass.shieldBonus + Math.min(0, abilityModifiers.dexterity) +\n    sizeModifier + state.armorClass.naturalArmor + state.armorClass.deflectionModifier +\n    state.armorClass.miscModifier,\n)\n\nexport const getFortitudeBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n  ) => {\n    const savingThrow = state.savingThrows.fortitude\n\n    return savingThrow.baseSave + abilityModifiers.constitution + savingThrow.magicModifier + savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n  },\n)\n\nexport const getReflexBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n  ) => {\n    const savingThrow = state.savingThrows.reflex\n\n    return savingThrow.baseSave + abilityModifiers.dexterity + savingThrow.magicModifier + savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n  },\n)\n\nexport const getWillBonus = createSelector(\n  [getCombatValues, getAbilityModifiers],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n  ) => {\n    const savingThrow = state.savingThrows.will\n\n    return savingThrow.baseSave + abilityModifiers.wisdom + savingThrow.magicModifier + savingThrow.miscModifier +\n      savingThrow.temporaryModifier\n  },\n)\n\nexport const getCombatManeuverBonus = createSelector(\n  [getCombatValues, getAbilityModifiers, getSizeModifier],\n  (\n    state: CombatValuesState,\n    abilityModifiers: AbilityModifiers,\n    sizeModifier: number,\n  ) => state.attackBonuses.baseAttackBonus + abilityModifiers.strength - sizeModifier,\n)\n\nexport const getCombatManeuverDefense = createSelector(\n  [getCombatManeuverBonus, getAbilityModifiers],\n  (\n    combatManeuverBonus: number,\n    abilityModifiers: AbilityModifiers,\n  ) => combatManeuverBonus + abilityModifiers.dexterity + 10,\n)\n","import React from 'react'\nimport './invertedBorderRadius.scss'\nimport PropTypes, { InferProps } from 'prop-types'\n\nconst InvertedBorderRadiusPropTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\nexport const InvertedBorderRadius: React.FC<InferProps<typeof InvertedBorderRadiusPropTypes>> = (props = {\n  className: '',\n  style: {},\n}) => {\n  return <div\n    className={`inverted-rounded-corners ${props.className ?? ''}`}\n    style={{\n      ...(\n        props.style ?? {}\n      ),\n    }}\n  >\n    {props.children}\n  </div>\n}\n\nInvertedBorderRadius.propTypes = InvertedBorderRadiusPropTypes\n","import React, { useCallback } from 'react'\nimport { RootState } from '../../store/root-reducer'\nimport * as CombatValueActions from '../../store/CombatValues/actions'\nimport { connect, ConnectedProps } from 'react-redux'\nimport {\n  getArmorClass,\n  getCombatManeuverBonus,\n  getCombatManeuverDefense,\n  getCombatValues,\n  getFlatFootedArmorClass,\n  getFortitudeBonus,\n  getReflexBonus,\n  getTotalInitiativeBonus,\n  getTouchArmorClass,\n  getWillBonus,\n} from '../../store/CombatValues/selectors'\nimport { getAbilityModifiers } from '../../store/Abilities/selectors'\nimport { getSizeModifier } from '../../store/CharacterMetaData/selectors'\nimport { SavingThrowsState } from '../../store/CombatValues/types'\nimport { abilityName } from '../../store/Abilities/types'\nimport { BoxNumberInput } from '../BoxInput/BoxNumberInput'\nimport { InvertedBorderRadius } from '../InvertedBorderRadius/InvertedBorderRadius'\nimport './DisplayCombatValues.scss'\nimport { BlackBox } from '../BlackBox/BlackBox'\n\nconst callIfDefined: <T>(callback: (param: T) => void) => (param?: T) => void = (callback) => {\n  return (param) => {\n    if (param !== undefined) {\n      callback(param)\n    }\n  }\n}\n\nconst mapStateToProps = (state: RootState) => (\n  {\n    combatValues: getCombatValues(state),\n    totalInitiativeBonus: getTotalInitiativeBonus(state),\n    abilityModifiers: getAbilityModifiers(state),\n    totalArmorClass: getArmorClass(state),\n    sizeModifier: getSizeModifier(state),\n    touchArmorClass: getTouchArmorClass(state),\n    flatFootedArmorClass: getFlatFootedArmorClass(state),\n    fortitudeBonus: getFortitudeBonus(state),\n    reflexBonus: getReflexBonus(state),\n    willBonus: getWillBonus(state),\n    combatManeuverBonus: getCombatManeuverBonus(state),\n    combatManeuverDefense: getCombatManeuverDefense(state),\n  }\n)\nconst mapDispatchToProps = CombatValueActions\nconst connector = connect(mapStateToProps, mapDispatchToProps)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const DisplayCombatValues = connector(({\n  combatValues,\n  setInitiativeMiscModifier,\n  totalInitiativeBonus,\n  abilityModifiers,\n  totalArmorClass,\n  setArmorBonus,\n  setShieldBonus,\n  setNaturalArmor,\n  setDeflectionModifier,\n  setMiscArmorModifier,\n  sizeModifier,\n  touchArmorClass,\n  flatFootedArmorClass,\n  fortitudeBonus,\n  reflexBonus,\n  willBonus,\n  combatManeuverBonus,\n  combatManeuverDefense,\n  setBaseSave,\n  setSavingThrowMagicModifier,\n  setMiscSavingThrowModifier,\n  setTemporarySavingThrowModifier,\n  setBaseAttackBonus,\n  setSpellResistance,\n}: Props) => {\n  const setForCertainSavingThrow = useCallback(\n    (\n      savingThrowName: keyof SavingThrowsState,\n      setter: (val: number, savingThrowName: keyof SavingThrowsState) => void,\n    ) =>\n      useCallback((newValue?: number) => {\n        if (newValue !== undefined) {\n          setter(newValue, savingThrowName)\n        }\n      }, [savingThrowName, setter]),\n    [],\n  )\n\n  return <div className={'combat-values-wrapper'}>\n    <div className={'initiative'} data-testid={'initiative-container'}>\n      <BlackBox>\n        Initiative\n        <aside>Modifier</aside>\n      </BlackBox>\n      <BoxNumberInput\n        value={totalInitiativeBonus}\n        label={'total'}\n        testId={'initiative-total-bonus'}\n      />\n      =\n      <BoxNumberInput\n        value={abilityModifiers.dexterity}\n        label={'dexterity modifier'}\n        testId={'initiative-dexterity-modifier'}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setInitiativeMiscModifier)}\n        value={combatValues.initiative.miscModifier}\n        label={'misc modifier'}\n        testId={'initiative-misc-modifier'}\n      />\n    </div>\n    <div className={'armor-class'}>\n      <BlackBox>\n        AC\n        <aside>\n          Armor Class\n        </aside>\n      </BlackBox>\n      <BoxNumberInput\n        value={totalArmorClass}\n        testId={'total-armor-class'}\n      />\n      =\n      <BoxNumberInput\n        value={10}\n        testId={'armor-class-general-bonus'}\n        hideBox={true}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setArmorBonus)}\n        value={combatValues.armorClass.armorBonus}\n        label={'armor class'}\n        testId={'armor-class-armor-bonus'}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setShieldBonus)}\n        value={combatValues.armorClass.shieldBonus}\n        label={'shield bonus'}\n        testId={'armor-class-shield-bonus'}\n      />\n      +\n      <BoxNumberInput\n        value={abilityModifiers.dexterity}\n        label={'dexterity modifier'}\n        testId={'armor-class-dexterity-mod'}\n      />\n      +\n      <BoxNumberInput\n        value={sizeModifier}\n        label={'size modifier'}\n        testId={'armor-class-size-modifier'}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setNaturalArmor)}\n        value={combatValues.armorClass.naturalArmor}\n        label={'natural armor'}\n        testId={'armor-class-natural-armor'}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setDeflectionModifier)}\n        value={combatValues.armorClass.deflectionModifier}\n        label={'deflection mod'}\n        testId={'armor-class-deflection-modifier'}\n      />\n      +\n      <BoxNumberInput\n        onChange={callIfDefined(setMiscArmorModifier)}\n        value={combatValues.armorClass.miscModifier}\n        label={'misc mod'}\n        testId={'armor-class-misc-modifier'}\n      />\n    </div>\n    <div className={'touch-armor-class'}>\n      <BlackBox>\n        Touch\n        <aside>Armor Class</aside>\n      </BlackBox>\n      <BoxNumberInput\n        value={touchArmorClass}\n        testId={'touch-armor-class'}\n      />\n    </div>\n    <div className={'flat-footed-armor-class'}>\n      <BlackBox>\n        Flat-Footed\n        <aside>Armor Class</aside>\n      </BlackBox>\n      <BoxNumberInput\n        value={flatFootedArmorClass}\n        testId={'flat-footed-class'}\n      />\n    </div>\n    <div className={'saving-throws'}>\n      {(\n        Object.keys(combatValues.savingThrows) as Array<keyof SavingThrowsState>\n      )\n        .map((savingThrowName, index) => {\n          const savingThrow = combatValues.savingThrows[savingThrowName]\n          let baseAbilityName: abilityName\n          let savingThrowBonus: number\n\n          switch (savingThrowName) {\n            case 'fortitude':\n              baseAbilityName = 'constitution'\n              savingThrowBonus = fortitudeBonus\n              break\n            case 'reflex':\n              baseAbilityName = 'dexterity'\n              savingThrowBonus = reflexBonus\n              break\n            case 'will':\n              savingThrowBonus = willBonus\n              baseAbilityName = 'wisdom'\n              break\n          }\n\n          const abilityModifier = abilityModifiers[baseAbilityName]\n\n          return <React.Fragment\n            key={index}\n          >\n            <BlackBox>\n              {savingThrowName}\n              <aside>\n                ({baseAbilityName})\n              </aside>\n            </BlackBox>\n            <BoxNumberInput\n              value={savingThrowBonus}\n            />\n            =\n            <BoxNumberInput\n              value={savingThrow.baseSave}\n              onChange={setForCertainSavingThrow(savingThrowName, setBaseSave)}\n            />\n            +\n            <BoxNumberInput\n              value={abilityModifier}\n            />\n            +\n            <BoxNumberInput\n              value={savingThrow.magicModifier}\n              onChange={setForCertainSavingThrow(savingThrowName, setSavingThrowMagicModifier)}\n            />\n            +\n            <BoxNumberInput\n              value={savingThrow.miscModifier}\n              onChange={setForCertainSavingThrow(savingThrowName, setMiscSavingThrowModifier)}\n            />\n            +\n            <BoxNumberInput\n              value={savingThrow.temporaryModifier}\n              onChange={setForCertainSavingThrow(savingThrowName, setTemporarySavingThrowModifier)}\n            />\n          </React.Fragment>\n        })}\n    </div>\n    <label className={'base-attack-bonus'}>\n      <InvertedBorderRadius>\n        Base Attack Bonus\n      </InvertedBorderRadius>\n      <BoxNumberInput\n        value={combatValues.attackBonuses.baseAttackBonus}\n        onChange={callIfDefined(setBaseAttackBonus)}\n      />\n    </label>\n    <label className={'spell-resistance'}>\n      <BlackBox>\n        Spell Resistance\n      </BlackBox>\n      <BoxNumberInput\n        value={combatValues.attackBonuses.spellResistance}\n        onChange={callIfDefined(setSpellResistance)}\n      />\n    </label>\n    <div className={'combat-values'}>\n      <div className={'combat-bonus'}>\n        <InvertedBorderRadius>\n          Combat Maneuver Bonus\n        </InvertedBorderRadius>\n        <BoxNumberInput\n          value={combatManeuverBonus}\n          label={'total'}\n        />\n        =\n        <BoxNumberInput\n          value={combatValues.attackBonuses.baseAttackBonus}\n          label={'base attack bonus'}\n        />\n        +\n        <BoxNumberInput\n          value={abilityModifiers.strength}\n          label={'strength modifier'}\n        />\n        +\n        <BoxNumberInput\n          value={-sizeModifier}\n          label={'size modifier'}\n        />\n      </div>\n      <div className={'combat-defense'}>\n        <InvertedBorderRadius>\n          Combat Maneuver Defense\n        </InvertedBorderRadius>\n        <BoxNumberInput\n          value={combatManeuverDefense}\n          label={'total'}\n        />\n        =\n        <BoxNumberInput\n          value={combatValues.attackBonuses.baseAttackBonus}\n          label={'base attack bonus'}\n        />\n        +\n        <BoxNumberInput\n          value={abilityModifiers.strength}\n          label={'strength modifier'}\n        />\n        +\n        <BoxNumberInput\n          value={abilityModifiers.dexterity}\n          label={'dexterity modifier'}\n        />\n        +\n        <BoxNumberInput\n          value={-sizeModifier}\n          label={'size modifier'}\n        />\n        +\n        <BoxNumberInput\n          value={10}\n          hideBox={true}\n        />\n      </div>\n    </div>\n  </div>\n})\n","import React from 'react'\nimport { DisplayCharacterMetaData } from '../DisplayCharacterMetaData/DisplayCharacterMetaData'\nimport { DisplayAbilities } from '../DisplayAbilities/DisplayAbilities'\nimport { DisplaySkills } from '../DisplaySkills/DisplaySkills'\nimport { DisplayCombatValues } from '../DisplayCombatValues/DisplayCombatValues'\n\nexport const CharacterSheet: React.FC = () => {\n  return (\n    <div>\n      <img className={'pathfinder-logo'} alt={'Pathfinder logo'} src={'./pathfinderDE-logo.png'} />\n      <DisplayCharacterMetaData />\n      <DisplayAbilities />\n      <DisplayCombatValues />\n      <DisplaySkills />\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport { CharacterSheet } from './components/CharacterSheet/CharacterSheet'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst persistor = persistStore(store)\n\nconst App: React.FC = () => {\n  return (\n    <PersistGate persistor={persistor}>\n      <Provider store={store}>\n        <CharacterSheet/>\n      </Provider>\n    </PersistGate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}